{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0","program":"/home/thainguyen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lock_api","--edition=2018","/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=6f16829e3eb3a3fb","-C","extra-filename=-6f16829e3eb3a3fb","--out-dir","/home/thainguyen/work/rust/rust-practice/target/rls/debug/deps","-L","dependency=/home/thainguyen/work/rust/rust-practice/target/rls/debug/deps","--extern","scopeguard=/home/thainguyen/work/rust/rust-practice/target/rls/debug/deps/libscopeguard-ac73752c03fc3e4f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/thainguyen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/thainguyen/work/rust/rust-practice/target/rls/debug/deps/liblock_api-6f16829e3eb3a3fb.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[688332577683748837,3667895774377608436]},"crate_root":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src","external_crates":[{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11533795067257537051,6600409280955634707]}},{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12614123221401343543,9564301585503608515]}},{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1785005413158388284,2453622026203223019]}},{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[5635686179303233414,10423312357370750990]}}],"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3871,"byte_end":3872,"line_start":101,"line_end":101,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3912,"byte_end":3913,"line_start":104,"line_end":104,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3951,"byte_end":3952,"line_start":107,"line_end":107,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":853}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0.swap(true, Ordering::Acquire)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2098,"byte_end":2146,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/     }","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2147,"byte_end":2156,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2157,"byte_end":2160,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/     fn unlock(&self) {","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2161,"byte_end":2187,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2188,"byte_end":2239,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2240,"byte_end":2249,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2250,"byte_end":2255,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2256,"byte_end":2259,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2260,"byte_end":2344,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2345,"byte_end":2404,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2405,"byte_end":2482,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2483,"byte_end":2490,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2491,"byte_end":2494,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2495,"byte_end":2517,"line_start":63,"line_end":63,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2518,"byte_end":2521,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2522,"byte_end":2601,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2602,"byte_end":2677,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2678,"byte_end":2747,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2748,"byte_end":2751,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2752,"byte_end":2806,"line_start":69,"line_end":69,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2807,"byte_end":2862,"line_start":70,"line_end":70,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2863,"byte_end":2919,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2920,"byte_end":2969,"line_start":72,"line_end":72,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":2970,"byte_end":3018,"line_start":73,"line_end":73,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3019,"byte_end":3022,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3023,"byte_end":3102,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3103,"byte_end":3176,"line_start":76,"line_end":76,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3177,"byte_end":3180,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3181,"byte_end":3201,"line_start":78,"line_end":78,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3202,"byte_end":3205,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This crate supports two cargo features:","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3206,"byte_end":3249,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3250,"byte_end":3253,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3254,"byte_end":3336,"line_start":82,"line_end":82,"column_start":1,"column_end":83}},{"value":"/ - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3337,"byte_end":3412,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/   feature is `const fn` constructors for lock types.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3413,"byte_end":3469,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3471,"byte_end":3481,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3482,"byte_end":3504,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3505,"byte_end":3531,"line_start":88,"line_end":88,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3710,"byte_end":3719,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3625,"byte_end":3698,"line_start":94,"line_end":94,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3815,"byte_end":3826,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3726,"byte_end":3803,"line_start":97,"line_end":97,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4899,"byte_end":4907,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4565,"byte_end":4598,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4599,"byte_end":4602,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4603,"byte_end":4678,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4679,"byte_end":4712,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4713,"byte_end":4716,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4717,"byte_end":4729,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4730,"byte_end":4733,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4734,"byte_end":4806,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4807,"byte_end":4881,"line_start":28,"line_end":28,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4965,"byte_end":4969,"line_start":31,"line_end":31,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4914,"byte_end":4954,"line_start":30,"line_end":30,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5134,"byte_end":5145,"line_start":35,"line_end":35,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4982,"byte_end":5057,"line_start":33,"line_end":33,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5062,"byte_end":5124,"line_start":34,"line_end":34,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5239,"byte_end":5243,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5152,"byte_end":5231,"line_start":37,"line_end":37,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5317,"byte_end":5325,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5257,"byte_end":5309,"line_start":40,"line_end":40,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5378,"byte_end":5384,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub fn unlock(&Self)","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5347,"byte_end":5370,"line_start":43,"line_end":43,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5776,"byte_end":5788,"line_start":53,"line_end":53,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5396,"byte_end":5460,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5461,"byte_end":5464,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5465,"byte_end":5545,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5546,"byte_end":5621,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5622,"byte_end":5696,"line_start":51,"line_end":51,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5697,"byte_end":5758,"line_start":52,"line_end":52,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5865,"byte_end":5876,"line_start":55,"line_end":55,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub fn unlock_fair(&Self)","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5805,"byte_end":5857,"line_start":54,"line_end":54,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6169,"byte_end":6173,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub fn bump(&Self)","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5890,"byte_end":5959,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5964,"byte_end":5967,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5972,"byte_end":6048,"line_start":59,"line_end":59,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6053,"byte_end":6129,"line_start":60,"line_end":60,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6134,"byte_end":6161,"line_start":61,"line_end":61,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6471,"byte_end":6484,"line_start":72,"line_end":72,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6241,"byte_end":6312,"line_start":68,"line_end":68,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6313,"byte_end":6316,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6317,"byte_end":6397,"line_start":70,"line_end":70,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6398,"byte_end":6453,"line_start":71,"line_end":71,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6553,"byte_end":6561,"line_start":74,"line_end":74,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6501,"byte_end":6543,"line_start":73,"line_end":73,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6621,"byte_end":6628,"line_start":77,"line_end":77,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6568,"byte_end":6611,"line_start":76,"line_end":76,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6704,"byte_end":6716,"line_start":80,"line_end":80,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6635,"byte_end":6696,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6832,"byte_end":6846,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6763,"byte_end":6824,"line_start":82,"line_end":82,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":33},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":7400,"byte_end":7405,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6890,"byte_end":6956,"line_start":86,"line_end":86,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6957,"byte_end":6960,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6961,"byte_end":7040,"line_start":88,"line_end":88,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":7041,"byte_end":7108,"line_start":89,"line_end":89,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":7109,"byte_end":7188,"line_start":90,"line_end":90,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":7189,"byte_end":7264,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":7265,"byte_end":7344,"line_start":92,"line_end":92,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":7345,"byte_end":7388,"line_start":93,"line_end":93,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8662,"byte_end":8665,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8540,"byte_end":8599,"line_start":142,"line_end":142,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8604,"byte_end":8636,"line_start":143,"line_end":143,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8641,"byte_end":8650,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8903,"byte_end":8913,"line_start":155,"line_end":155,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8794,"byte_end":8849,"line_start":152,"line_end":152,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8854,"byte_end":8863,"line_start":153,"line_end":153,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8868,"byte_end":8891,"line_start":154,"line_end":154,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9719,"byte_end":9723,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9181,"byte_end":9257,"line_start":169,"line_end":169,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9262,"byte_end":9265,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9270,"byte_end":9348,"line_start":171,"line_end":171,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9353,"byte_end":9428,"line_start":172,"line_end":172,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9433,"byte_end":9509,"line_start":173,"line_end":173,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9514,"byte_end":9574,"line_start":174,"line_end":174,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9579,"byte_end":9582,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9587,"byte_end":9663,"line_start":176,"line_end":176,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9668,"byte_end":9693,"line_start":177,"line_end":177,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9698,"byte_end":9707,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10116,"byte_end":10124,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9814,"byte_end":9848,"line_start":184,"line_end":184,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9853,"byte_end":9856,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9861,"byte_end":9937,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9942,"byte_end":10018,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10023,"byte_end":10044,"line_start":188,"line_end":188,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10049,"byte_end":10052,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10057,"byte_end":10090,"line_start":190,"line_end":190,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10095,"byte_end":10104,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10532,"byte_end":10539,"line_start":205,"line_end":205,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10285,"byte_end":10340,"line_start":200,"line_end":200,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10345,"byte_end":10348,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10353,"byte_end":10428,"line_start":202,"line_end":202,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10433,"byte_end":10506,"line_start":203,"line_end":203,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10511,"byte_end":10520,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11123,"byte_end":11135,"line_start":221,"line_end":221,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10615,"byte_end":10646,"line_start":209,"line_end":209,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10651,"byte_end":10654,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10659,"byte_end":10733,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10738,"byte_end":10808,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10813,"byte_end":10834,"line_start":213,"line_end":213,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10839,"byte_end":10842,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10847,"byte_end":10859,"line_start":215,"line_end":215,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10864,"byte_end":10867,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10872,"byte_end":10946,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10951,"byte_end":11020,"line_start":218,"line_end":218,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11025,"byte_end":11090,"line_start":219,"line_end":219,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11095,"byte_end":11104,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11572,"byte_end":11575,"line_start":235,"line_end":235,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11183,"byte_end":11227,"line_start":225,"line_end":225,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11232,"byte_end":11235,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11240,"byte_end":11315,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11320,"byte_end":11381,"line_start":228,"line_end":228,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11386,"byte_end":11389,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11394,"byte_end":11406,"line_start":230,"line_end":230,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11411,"byte_end":11414,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11419,"byte_end":11486,"line_start":232,"line_end":232,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11491,"byte_end":11539,"line_start":233,"line_end":233,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11544,"byte_end":11553,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12206,"byte_end":12223,"line_start":253,"line_end":253,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11669,"byte_end":11729,"line_start":241,"line_end":241,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11734,"byte_end":11737,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11742,"byte_end":11816,"line_start":243,"line_end":243,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11821,"byte_end":11891,"line_start":244,"line_end":244,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11896,"byte_end":11917,"line_start":245,"line_end":245,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11922,"byte_end":11925,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11930,"byte_end":11942,"line_start":247,"line_end":247,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11947,"byte_end":11950,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11955,"byte_end":12029,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12034,"byte_end":12103,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12108,"byte_end":12173,"line_start":251,"line_end":251,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12178,"byte_end":12187,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12623,"byte_end":12635,"line_start":265,"line_end":265,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12326,"byte_end":12387,"line_start":259,"line_end":259,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12392,"byte_end":12395,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12400,"byte_end":12470,"line_start":261,"line_end":261,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12475,"byte_end":12550,"line_start":262,"line_end":262,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12555,"byte_end":12597,"line_start":263,"line_end":263,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12602,"byte_end":12611,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13126,"byte_end":13140,"line_start":279,"line_end":279,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12829,"byte_end":12890,"line_start":273,"line_end":273,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12895,"byte_end":12898,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12903,"byte_end":12973,"line_start":275,"line_end":275,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12978,"byte_end":13053,"line_start":276,"line_end":276,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13058,"byte_end":13100,"line_start":277,"line_end":277,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13105,"byte_end":13114,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14658,"byte_end":14668,"line_start":328,"line_end":328,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14318,"byte_end":14398,"line_start":322,"line_end":322,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14399,"byte_end":14459,"line_start":323,"line_end":323,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14460,"byte_end":14463,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14464,"byte_end":14542,"line_start":325,"line_end":325,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14543,"byte_end":14586,"line_start":326,"line_end":326,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14587,"byte_end":14646,"line_start":327,"line_end":327,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15019,"byte_end":15024,"line_start":337,"line_end":337,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14952,"byte_end":15007,"line_start":336,"line_end":336,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15489,"byte_end":15492,"line_start":350,"line_end":350,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15083,"byte_end":15153,"line_start":341,"line_end":341,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15158,"byte_end":15161,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15166,"byte_end":15223,"line_start":343,"line_end":343,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15228,"byte_end":15260,"line_start":344,"line_end":344,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15265,"byte_end":15268,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15273,"byte_end":15324,"line_start":346,"line_end":346,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15329,"byte_end":15405,"line_start":347,"line_end":347,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15410,"byte_end":15463,"line_start":348,"line_end":348,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15468,"byte_end":15477,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16322,"byte_end":16329,"line_start":374,"line_end":374,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15836,"byte_end":15905,"line_start":364,"line_end":364,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15910,"byte_end":15986,"line_start":365,"line_end":365,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15991,"byte_end":15994,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15999,"byte_end":16056,"line_start":367,"line_end":367,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16061,"byte_end":16093,"line_start":368,"line_end":368,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16098,"byte_end":16101,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16106,"byte_end":16157,"line_start":370,"line_end":370,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16162,"byte_end":16238,"line_start":371,"line_end":371,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16243,"byte_end":16296,"line_start":372,"line_end":372,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16301,"byte_end":16310,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17010,"byte_end":17018,"line_start":396,"line_end":396,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16784,"byte_end":16848,"line_start":391,"line_end":391,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16853,"byte_end":16856,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16861,"byte_end":16929,"line_start":393,"line_end":393,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16934,"byte_end":16984,"line_start":394,"line_end":394,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16989,"byte_end":16998,"line_start":395,"line_end":395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18034,"byte_end":18045,"line_start":420,"line_end":420,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17253,"byte_end":17304,"line_start":407,"line_end":407,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17309,"byte_end":17312,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17317,"byte_end":17391,"line_start":409,"line_end":409,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17396,"byte_end":17468,"line_start":410,"line_end":410,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17473,"byte_end":17547,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17552,"byte_end":17627,"line_start":412,"line_end":412,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17632,"byte_end":17703,"line_start":413,"line_end":413,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17708,"byte_end":17765,"line_start":414,"line_end":414,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17770,"byte_end":17773,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17778,"byte_end":17854,"line_start":416,"line_end":416,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17859,"byte_end":17935,"line_start":417,"line_end":417,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17940,"byte_end":18008,"line_start":418,"line_end":418,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18013,"byte_end":18022,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18415,"byte_end":18428,"line_start":432,"line_end":432,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18127,"byte_end":18191,"line_start":425,"line_end":425,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18196,"byte_end":18199,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18204,"byte_end":18253,"line_start":427,"line_end":427,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18258,"byte_end":18261,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18266,"byte_end":18334,"line_start":429,"line_end":429,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18339,"byte_end":18389,"line_start":430,"line_end":430,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18394,"byte_end":18403,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18893,"byte_end":18897,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18596,"byte_end":18665,"line_start":441,"line_end":441,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18670,"byte_end":18673,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18678,"byte_end":18754,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18759,"byte_end":18835,"line_start":444,"line_end":444,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18840,"byte_end":18867,"line_start":445,"line_end":445,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18872,"byte_end":18881,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":142},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20443,"byte_end":20459,"line_start":497,"line_end":497,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20007,"byte_end":20082,"line_start":489,"line_end":489,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20083,"byte_end":20118,"line_start":490,"line_end":490,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20119,"byte_end":20122,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20123,"byte_end":20202,"line_start":492,"line_end":492,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20203,"byte_end":20278,"line_start":493,"line_end":493,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20279,"byte_end":20359,"line_start":494,"line_end":494,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20360,"byte_end":20371,"line_start":495,"line_end":495,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20372,"byte_end":20431,"line_start":496,"line_end":496,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21287,"byte_end":21290,"line_start":522,"line_end":522,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20869,"byte_end":20939,"line_start":513,"line_end":513,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20944,"byte_end":20947,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20952,"byte_end":21015,"line_start":515,"line_end":515,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21020,"byte_end":21052,"line_start":516,"line_end":516,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21057,"byte_end":21060,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21065,"byte_end":21116,"line_start":518,"line_end":518,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21121,"byte_end":21203,"line_start":519,"line_end":519,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21208,"byte_end":21261,"line_start":520,"line_end":520,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21266,"byte_end":21275,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22113,"byte_end":22120,"line_start":546,"line_end":546,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21615,"byte_end":21684,"line_start":536,"line_end":536,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21689,"byte_end":21765,"line_start":537,"line_end":537,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21770,"byte_end":21773,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21778,"byte_end":21841,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21846,"byte_end":21878,"line_start":540,"line_end":540,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21883,"byte_end":21886,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21891,"byte_end":21942,"line_start":542,"line_end":542,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21947,"byte_end":22029,"line_start":543,"line_end":543,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22034,"byte_end":22087,"line_start":544,"line_end":544,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22092,"byte_end":22101,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23415,"byte_end":23426,"line_start":578,"line_end":578,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22634,"byte_end":22685,"line_start":565,"line_end":565,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22690,"byte_end":22693,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22698,"byte_end":22772,"line_start":567,"line_end":567,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22777,"byte_end":22849,"line_start":568,"line_end":568,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22854,"byte_end":22928,"line_start":569,"line_end":569,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22933,"byte_end":23008,"line_start":570,"line_end":570,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23013,"byte_end":23084,"line_start":571,"line_end":571,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23089,"byte_end":23146,"line_start":572,"line_end":572,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23151,"byte_end":23154,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23159,"byte_end":23235,"line_start":574,"line_end":574,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23240,"byte_end":23316,"line_start":575,"line_end":575,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23321,"byte_end":23389,"line_start":576,"line_end":576,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23394,"byte_end":23403,"line_start":577,"line_end":577,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":215},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25705,"byte_end":25716,"line_start":33,"line_end":33,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25304,"byte_end":25356,"line_start":23,"line_end":23,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25357,"byte_end":25360,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25361,"byte_end":25435,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25436,"byte_end":25462,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25463,"byte_end":25466,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25467,"byte_end":25479,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25480,"byte_end":25483,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25484,"byte_end":25562,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25563,"byte_end":25636,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25637,"byte_end":25687,"line_start":32,"line_end":32,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":216},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25752,"byte_end":25756,"line_start":35,"line_end":35,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25723,"byte_end":25741,"line_start":34,"line_end":34,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25867,"byte_end":25884,"line_start":39,"line_end":39,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> usize","parent":{"krate":0,"index":215},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25769,"byte_end":25840,"line_start":37,"line_end":37,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25845,"byte_end":25859,"line_start":38,"line_end":38,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":247},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28730,"byte_end":28744,"line_start":141,"line_end":141,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28255,"byte_end":28318,"line_start":130,"line_end":130,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28319,"byte_end":28322,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28323,"byte_end":28393,"line_start":132,"line_end":132,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28394,"byte_end":28397,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28398,"byte_end":28478,"line_start":134,"line_end":134,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28479,"byte_end":28497,"line_start":135,"line_end":135,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28498,"byte_end":28578,"line_start":136,"line_end":136,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28579,"byte_end":28618,"line_start":137,"line_end":137,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28619,"byte_end":28622,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28623,"byte_end":28703,"line_start":139,"line_end":139,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28704,"byte_end":28718,"line_start":140,"line_end":140,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30451,"byte_end":30454,"line_start":205,"line_end":205,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30319,"byte_end":30388,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30393,"byte_end":30425,"line_start":203,"line_end":203,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30430,"byte_end":30439,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30897,"byte_end":30907,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30788,"byte_end":30843,"line_start":217,"line_end":217,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30848,"byte_end":30857,"line_start":218,"line_end":218,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30862,"byte_end":30885,"line_start":219,"line_end":219,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31866,"byte_end":31870,"line_start":245,"line_end":245,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31227,"byte_end":31303,"line_start":234,"line_end":234,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31308,"byte_end":31321,"line_start":235,"line_end":235,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31326,"byte_end":31329,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31334,"byte_end":31410,"line_start":237,"line_end":237,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31415,"byte_end":31491,"line_start":238,"line_end":238,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31496,"byte_end":31572,"line_start":239,"line_end":239,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31577,"byte_end":31641,"line_start":240,"line_end":240,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31646,"byte_end":31717,"line_start":241,"line_end":241,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31722,"byte_end":31797,"line_start":242,"line_end":242,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31802,"byte_end":31840,"line_start":243,"line_end":243,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31845,"byte_end":31854,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32275,"byte_end":32283,"line_start":258,"line_end":258,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31973,"byte_end":32007,"line_start":250,"line_end":250,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32012,"byte_end":32015,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32020,"byte_end":32096,"line_start":252,"line_end":252,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32101,"byte_end":32177,"line_start":253,"line_end":253,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32182,"byte_end":32203,"line_start":254,"line_end":254,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32208,"byte_end":32211,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32216,"byte_end":32249,"line_start":256,"line_end":256,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32254,"byte_end":32263,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32712,"byte_end":32719,"line_start":271,"line_end":271,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32456,"byte_end":32511,"line_start":266,"line_end":266,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32516,"byte_end":32519,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32524,"byte_end":32608,"line_start":268,"line_end":268,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32613,"byte_end":32686,"line_start":269,"line_end":269,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32691,"byte_end":32700,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33321,"byte_end":33333,"line_start":287,"line_end":287,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32795,"byte_end":32826,"line_start":275,"line_end":275,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32831,"byte_end":32834,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32839,"byte_end":32913,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32918,"byte_end":32997,"line_start":278,"line_end":278,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33002,"byte_end":33023,"line_start":279,"line_end":279,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33028,"byte_end":33031,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33036,"byte_end":33048,"line_start":281,"line_end":281,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33053,"byte_end":33056,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33061,"byte_end":33135,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33140,"byte_end":33218,"line_start":284,"line_end":284,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33223,"byte_end":33288,"line_start":285,"line_end":285,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33293,"byte_end":33302,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33779,"byte_end":33782,"line_start":301,"line_end":301,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33381,"byte_end":33425,"line_start":291,"line_end":291,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33430,"byte_end":33433,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33438,"byte_end":33513,"line_start":293,"line_end":293,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33518,"byte_end":33579,"line_start":294,"line_end":294,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33584,"byte_end":33587,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33592,"byte_end":33604,"line_start":296,"line_end":296,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33609,"byte_end":33612,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33617,"byte_end":33684,"line_start":298,"line_end":298,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33689,"byte_end":33746,"line_start":299,"line_end":299,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33751,"byte_end":33760,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34465,"byte_end":34482,"line_start":319,"line_end":319,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33910,"byte_end":33970,"line_start":307,"line_end":307,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33975,"byte_end":33978,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33983,"byte_end":34057,"line_start":309,"line_end":309,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34062,"byte_end":34141,"line_start":310,"line_end":310,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34146,"byte_end":34167,"line_start":311,"line_end":311,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34172,"byte_end":34175,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34180,"byte_end":34192,"line_start":313,"line_end":313,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34197,"byte_end":34200,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34205,"byte_end":34279,"line_start":315,"line_end":315,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34284,"byte_end":34362,"line_start":316,"line_end":316,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34367,"byte_end":34432,"line_start":317,"line_end":317,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34437,"byte_end":34446,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34910,"byte_end":34922,"line_start":331,"line_end":331,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34613,"byte_end":34674,"line_start":325,"line_end":325,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34679,"byte_end":34682,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34687,"byte_end":34757,"line_start":327,"line_end":327,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34762,"byte_end":34837,"line_start":328,"line_end":328,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34842,"byte_end":34884,"line_start":329,"line_end":329,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34889,"byte_end":34898,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35425,"byte_end":35439,"line_start":345,"line_end":345,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35128,"byte_end":35189,"line_start":339,"line_end":339,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35194,"byte_end":35197,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35202,"byte_end":35272,"line_start":341,"line_end":341,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35277,"byte_end":35352,"line_start":342,"line_end":342,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35357,"byte_end":35399,"line_start":343,"line_end":343,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35404,"byte_end":35413,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":307},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37167,"byte_end":37186,"line_start":397,"line_end":397,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36824,"byte_end":36911,"line_start":391,"line_end":391,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36912,"byte_end":36975,"line_start":392,"line_end":392,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36976,"byte_end":36979,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36980,"byte_end":37058,"line_start":394,"line_end":394,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37059,"byte_end":37086,"line_start":395,"line_end":395,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37087,"byte_end":37155,"line_start":396,"line_end":396,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37647,"byte_end":37654,"line_start":409,"line_end":409,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37571,"byte_end":37635,"line_start":408,"line_end":408,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38160,"byte_end":38163,"line_start":422,"line_end":422,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37727,"byte_end":37806,"line_start":413,"line_end":413,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37811,"byte_end":37814,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37819,"byte_end":37885,"line_start":415,"line_end":415,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37890,"byte_end":37922,"line_start":416,"line_end":416,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37927,"byte_end":37930,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37935,"byte_end":37986,"line_start":418,"line_end":418,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37991,"byte_end":38076,"line_start":419,"line_end":419,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38081,"byte_end":38134,"line_start":420,"line_end":420,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38139,"byte_end":38148,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39033,"byte_end":39040,"line_start":446,"line_end":446,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38520,"byte_end":38598,"line_start":436,"line_end":436,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38603,"byte_end":38679,"line_start":437,"line_end":437,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38684,"byte_end":38687,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38692,"byte_end":38758,"line_start":439,"line_end":439,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38763,"byte_end":38795,"line_start":440,"line_end":440,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38800,"byte_end":38803,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38808,"byte_end":38859,"line_start":442,"line_end":442,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38864,"byte_end":38949,"line_start":443,"line_end":443,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38954,"byte_end":39007,"line_start":444,"line_end":444,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39012,"byte_end":39021,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39769,"byte_end":39777,"line_start":471,"line_end":471,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39543,"byte_end":39607,"line_start":466,"line_end":466,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39612,"byte_end":39615,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39620,"byte_end":39688,"line_start":468,"line_end":468,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39693,"byte_end":39743,"line_start":469,"line_end":469,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39748,"byte_end":39757,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40843,"byte_end":40854,"line_start":497,"line_end":497,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40053,"byte_end":40104,"line_start":484,"line_end":484,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40109,"byte_end":40112,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40117,"byte_end":40191,"line_start":486,"line_end":486,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40196,"byte_end":40268,"line_start":487,"line_end":487,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40273,"byte_end":40347,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40352,"byte_end":40427,"line_start":489,"line_end":489,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40432,"byte_end":40503,"line_start":490,"line_end":490,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40508,"byte_end":40565,"line_start":491,"line_end":491,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40570,"byte_end":40573,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40578,"byte_end":40654,"line_start":493,"line_end":493,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40659,"byte_end":40735,"line_start":494,"line_end":494,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40740,"byte_end":40817,"line_start":495,"line_end":495,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40822,"byte_end":40831,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41226,"byte_end":41239,"line_start":509,"line_end":509,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40938,"byte_end":41002,"line_start":502,"line_end":502,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41007,"byte_end":41010,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41015,"byte_end":41064,"line_start":504,"line_end":504,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41069,"byte_end":41072,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41077,"byte_end":41145,"line_start":506,"line_end":506,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41150,"byte_end":41200,"line_start":507,"line_end":507,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41205,"byte_end":41214,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41708,"byte_end":41712,"line_start":524,"line_end":524,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41411,"byte_end":41480,"line_start":518,"line_end":518,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41485,"byte_end":41488,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41493,"byte_end":41569,"line_start":520,"line_end":520,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41574,"byte_end":41650,"line_start":521,"line_end":521,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41655,"byte_end":41682,"line_start":522,"line_end":522,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41687,"byte_end":41696,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":369},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43297,"byte_end":43322,"line_start":578,"line_end":578,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42825,"byte_end":42909,"line_start":570,"line_end":570,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42910,"byte_end":42945,"line_start":571,"line_end":571,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42946,"byte_end":42949,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42950,"byte_end":43047,"line_start":573,"line_end":573,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43048,"byte_end":43123,"line_start":574,"line_end":574,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43124,"byte_end":43204,"line_start":575,"line_end":575,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43205,"byte_end":43216,"line_start":576,"line_end":576,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43217,"byte_end":43285,"line_start":577,"line_end":577,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44169,"byte_end":44172,"line_start":601,"line_end":601,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43724,"byte_end":43803,"line_start":592,"line_end":592,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43808,"byte_end":43811,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43816,"byte_end":43888,"line_start":594,"line_end":594,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43893,"byte_end":43925,"line_start":595,"line_end":595,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43930,"byte_end":43933,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43938,"byte_end":43989,"line_start":597,"line_end":597,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43994,"byte_end":44085,"line_start":598,"line_end":598,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44090,"byte_end":44143,"line_start":599,"line_end":599,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44148,"byte_end":44157,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45031,"byte_end":45038,"line_start":625,"line_end":625,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44506,"byte_end":44584,"line_start":615,"line_end":615,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44589,"byte_end":44665,"line_start":616,"line_end":616,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44670,"byte_end":44673,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44678,"byte_end":44750,"line_start":618,"line_end":618,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44755,"byte_end":44787,"line_start":619,"line_end":619,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44792,"byte_end":44795,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44800,"byte_end":44851,"line_start":621,"line_end":621,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44856,"byte_end":44947,"line_start":622,"line_end":622,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44952,"byte_end":45005,"line_start":623,"line_end":623,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45010,"byte_end":45019,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46411,"byte_end":46422,"line_start":662,"line_end":662,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45621,"byte_end":45672,"line_start":649,"line_end":649,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45677,"byte_end":45680,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45685,"byte_end":45759,"line_start":651,"line_end":651,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45764,"byte_end":45836,"line_start":652,"line_end":652,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45841,"byte_end":45915,"line_start":653,"line_end":653,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45920,"byte_end":45995,"line_start":654,"line_end":654,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46000,"byte_end":46071,"line_start":655,"line_end":655,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46076,"byte_end":46133,"line_start":656,"line_end":656,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46138,"byte_end":46141,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46146,"byte_end":46222,"line_start":658,"line_end":658,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46227,"byte_end":46303,"line_start":659,"line_end":659,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46308,"byte_end":46385,"line_start":660,"line_end":660,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46390,"byte_end":46399,"line_start":661,"line_end":661,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":433},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48618,"byte_end":48627,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48171,"byte_end":48217,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48218,"byte_end":48221,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48222,"byte_end":48298,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48299,"byte_end":48335,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48336,"byte_end":48339,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48340,"byte_end":48352,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48353,"byte_end":48356,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48357,"byte_end":48432,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48433,"byte_end":48512,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48513,"byte_end":48588,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48589,"byte_end":48600,"line_start":30,"line_end":30,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":434},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48688,"byte_end":48692,"line_start":33,"line_end":33,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48634,"byte_end":48677,"line_start":32,"line_end":32,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":435},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48857,"byte_end":48868,"line_start":37,"line_end":37,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48705,"byte_end":48780,"line_start":35,"line_end":35,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48785,"byte_end":48847,"line_start":36,"line_end":36,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48965,"byte_end":48976,"line_start":40,"line_end":40,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48875,"byte_end":48957,"line_start":39,"line_end":39,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49053,"byte_end":49068,"line_start":43,"line_end":43,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48990,"byte_end":49045,"line_start":42,"line_end":42,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49125,"byte_end":49138,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub fn unlock_shared(&Self)","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49090,"byte_end":49117,"line_start":45,"line_end":45,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49246,"byte_end":49260,"line_start":49,"line_end":49,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49152,"byte_end":49238,"line_start":48,"line_end":48,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49341,"byte_end":49359,"line_start":52,"line_end":52,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49274,"byte_end":49333,"line_start":51,"line_end":51,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49420,"byte_end":49436,"line_start":55,"line_end":55,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub fn unlock_exclusive(&Self)","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49381,"byte_end":49412,"line_start":54,"line_end":54,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":442},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49828,"byte_end":49841,"line_start":64,"line_end":64,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49448,"byte_end":49512,"line_start":58,"line_end":58,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49513,"byte_end":49516,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49517,"byte_end":49597,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49598,"byte_end":49673,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49674,"byte_end":49748,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49749,"byte_end":49810,"line_start":63,"line_end":63,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49923,"byte_end":49941,"line_start":66,"line_end":66,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49859,"byte_end":49915,"line_start":65,"line_end":65,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50023,"byte_end":50044,"line_start":69,"line_end":69,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49955,"byte_end":50015,"line_start":68,"line_end":68,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50355,"byte_end":50366,"line_start":76,"line_end":76,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub fn bump_shared(&Self)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50058,"byte_end":50131,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50136,"byte_end":50139,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50144,"byte_end":50227,"line_start":73,"line_end":73,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50232,"byte_end":50315,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50320,"byte_end":50347,"line_start":75,"line_end":75,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50757,"byte_end":50771,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub fn bump_exclusive(&Self)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50450,"byte_end":50527,"line_start":81,"line_end":81,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50532,"byte_end":50535,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50540,"byte_end":50626,"line_start":83,"line_end":83,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50631,"byte_end":50717,"line_start":84,"line_end":84,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50722,"byte_end":50749,"line_start":85,"line_end":85,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":447},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50988,"byte_end":51006,"line_start":94,"line_end":94,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":448}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50859,"byte_end":50933,"line_start":92,"line_end":92,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50934,"byte_end":50970,"line_start":93,"line_end":93,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51173,"byte_end":51182,"line_start":97,"line_end":97,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub fn downgrade(&Self)","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51024,"byte_end":51094,"line_start":95,"line_end":95,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51099,"byte_end":51165,"line_start":96,"line_end":96,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":449},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51424,"byte_end":51438,"line_start":104,"line_end":104,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51194,"byte_end":51265,"line_start":100,"line_end":100,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51266,"byte_end":51269,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51270,"byte_end":51350,"line_start":102,"line_end":102,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51351,"byte_end":51406,"line_start":103,"line_end":103,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":450},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51508,"byte_end":51516,"line_start":106,"line_end":106,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51456,"byte_end":51498,"line_start":105,"line_end":105,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":451},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51576,"byte_end":51583,"line_start":109,"line_end":109,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51523,"byte_end":51566,"line_start":108,"line_end":108,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51663,"byte_end":51682,"line_start":112,"line_end":112,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51590,"byte_end":51655,"line_start":111,"line_end":111,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51802,"byte_end":51823,"line_start":115,"line_end":115,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51729,"byte_end":51794,"line_start":114,"line_end":114,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51946,"byte_end":51968,"line_start":118,"line_end":118,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51869,"byte_end":51938,"line_start":117,"line_end":117,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52092,"byte_end":52116,"line_start":121,"line_end":121,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52015,"byte_end":52084,"line_start":120,"line_end":120,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":456},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52549,"byte_end":52567,"line_start":131,"line_end":131,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52160,"byte_end":52230,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52231,"byte_end":52234,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52235,"byte_end":52290,"line_start":126,"line_end":126,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52291,"byte_end":52366,"line_start":127,"line_end":127,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52367,"byte_end":52438,"line_start":128,"line_end":128,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52439,"byte_end":52513,"line_start":129,"line_end":129,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52514,"byte_end":52531,"line_start":130,"line_end":130,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52668,"byte_end":52689,"line_start":133,"line_end":133,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52585,"byte_end":52660,"line_start":132,"line_end":132,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52797,"byte_end":52822,"line_start":136,"line_end":136,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52703,"byte_end":52789,"line_start":135,"line_end":135,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":459},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52943,"byte_end":52966,"line_start":140,"line_end":140,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52842,"byte_end":52925,"line_start":139,"line_end":139,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53140,"byte_end":53169,"line_start":143,"line_end":143,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53010,"byte_end":53083,"line_start":141,"line_end":141,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53088,"byte_end":53132,"line_start":142,"line_end":142,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53346,"byte_end":53377,"line_start":147,"line_end":147,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53216,"byte_end":53289,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53294,"byte_end":53338,"line_start":146,"line_end":146,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":462},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53753,"byte_end":53769,"line_start":156,"line_end":156,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53421,"byte_end":53499,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53500,"byte_end":53530,"line_start":151,"line_end":151,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53531,"byte_end":53534,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53535,"byte_end":53608,"line_start":153,"line_end":153,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53609,"byte_end":53683,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53684,"byte_end":53735,"line_start":155,"line_end":155,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53882,"byte_end":53897,"line_start":158,"line_end":158,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53787,"byte_end":53874,"line_start":157,"line_end":157,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53979,"byte_end":53998,"line_start":161,"line_end":161,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53911,"byte_end":53971,"line_start":160,"line_end":160,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54060,"byte_end":54077,"line_start":164,"line_end":164,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub fn unlock_upgradable(&Self)","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54020,"byte_end":54052,"line_start":163,"line_end":163,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54152,"byte_end":54159,"line_start":167,"line_end":167,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub fn upgrade(&Self)","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54091,"byte_end":54144,"line_start":166,"line_end":166,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54270,"byte_end":54281,"line_start":171,"line_end":171,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54173,"byte_end":54244,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54249,"byte_end":54262,"line_start":170,"line_end":170,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54408,"byte_end":54428,"line_start":176,"line_end":176,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54301,"byte_end":54375,"line_start":174,"line_end":174,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54376,"byte_end":54390,"line_start":175,"line_end":175,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54538,"byte_end":54560,"line_start":178,"line_end":178,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54469,"byte_end":54530,"line_start":177,"line_end":177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54884,"byte_end":54899,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub fn bump_upgradable(&Self)","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54574,"byte_end":54652,"line_start":180,"line_end":180,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54657,"byte_end":54660,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54665,"byte_end":54752,"line_start":182,"line_end":182,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54757,"byte_end":54844,"line_start":183,"line_end":183,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54849,"byte_end":54876,"line_start":184,"line_end":184,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55098,"byte_end":55123,"line_start":193,"line_end":193,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54989,"byte_end":55063,"line_start":191,"line_end":191,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55064,"byte_end":55080,"line_start":192,"line_end":192,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55228,"byte_end":55248,"line_start":195,"line_end":195,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55169,"byte_end":55220,"line_start":194,"line_end":194,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55325,"byte_end":55348,"line_start":198,"line_end":198,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55262,"byte_end":55317,"line_start":197,"line_end":197,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":474},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55474,"byte_end":55495,"line_start":203,"line_end":203,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55360,"byte_end":55437,"line_start":201,"line_end":201,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55438,"byte_end":55456,"line_start":202,"line_end":202,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55615,"byte_end":55638,"line_start":205,"line_end":205,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55537,"byte_end":55607,"line_start":204,"line_end":204,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55763,"byte_end":55788,"line_start":208,"line_end":208,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55685,"byte_end":55755,"line_start":207,"line_end":207,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55941,"byte_end":55956,"line_start":212,"line_end":212,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55834,"byte_end":55905,"line_start":210,"line_end":210,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55910,"byte_end":55933,"line_start":211,"line_end":211,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56110,"byte_end":56127,"line_start":216,"line_end":216,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56003,"byte_end":56074,"line_start":214,"line_end":214,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56079,"byte_end":56102,"line_start":215,"line_end":215,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":479},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56879,"byte_end":56885,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56171,"byte_end":56195,"line_start":219,"line_end":219,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56196,"byte_end":56199,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56200,"byte_end":56277,"line_start":221,"line_end":221,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56278,"byte_end":56357,"line_start":222,"line_end":222,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56358,"byte_end":56437,"line_start":223,"line_end":223,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56438,"byte_end":56496,"line_start":224,"line_end":224,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56497,"byte_end":56500,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56501,"byte_end":56578,"line_start":226,"line_end":226,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56579,"byte_end":56659,"line_start":227,"line_end":227,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56660,"byte_end":56738,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56739,"byte_end":56817,"line_start":229,"line_end":229,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56818,"byte_end":56867,"line_start":230,"line_end":230,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58171,"byte_end":58174,"line_start":282,"line_end":282,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58045,"byte_end":58108,"line_start":279,"line_end":279,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58113,"byte_end":58145,"line_start":280,"line_end":280,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58150,"byte_end":58159,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58417,"byte_end":58427,"line_start":292,"line_end":292,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58305,"byte_end":58363,"line_start":289,"line_end":289,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58368,"byte_end":58377,"line_start":290,"line_end":290,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58382,"byte_end":58405,"line_start":291,"line_end":291,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59496,"byte_end":59500,"line_start":327,"line_end":327,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58888,"byte_end":58964,"line_start":314,"line_end":314,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58969,"byte_end":58998,"line_start":315,"line_end":315,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59003,"byte_end":59006,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59011,"byte_end":59087,"line_start":317,"line_end":317,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59092,"byte_end":59168,"line_start":318,"line_end":318,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59173,"byte_end":59197,"line_start":319,"line_end":319,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59202,"byte_end":59205,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59210,"byte_end":59286,"line_start":321,"line_end":321,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59291,"byte_end":59357,"line_start":322,"line_end":322,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59362,"byte_end":59365,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59370,"byte_end":59442,"line_start":324,"line_end":324,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59447,"byte_end":59470,"line_start":325,"line_end":325,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59475,"byte_end":59484,"line_start":326,"line_end":326,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59942,"byte_end":59950,"line_start":340,"line_end":340,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59608,"byte_end":59670,"line_start":332,"line_end":332,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59675,"byte_end":59678,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59683,"byte_end":59760,"line_start":334,"line_end":334,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59765,"byte_end":59842,"line_start":335,"line_end":335,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59847,"byte_end":59870,"line_start":336,"line_end":336,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59875,"byte_end":59878,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59883,"byte_end":59916,"line_start":338,"line_end":338,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59921,"byte_end":59930,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60504,"byte_end":60509,"line_start":357,"line_end":357,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60128,"byte_end":60201,"line_start":348,"line_end":348,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60206,"byte_end":60242,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60247,"byte_end":60250,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60255,"byte_end":60325,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60330,"byte_end":60368,"line_start":352,"line_end":352,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60373,"byte_end":60376,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60381,"byte_end":60456,"line_start":354,"line_end":354,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60461,"byte_end":60478,"line_start":355,"line_end":355,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60483,"byte_end":60492,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60947,"byte_end":60956,"line_start":370,"line_end":370,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60622,"byte_end":60685,"line_start":362,"line_end":362,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60690,"byte_end":60693,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60698,"byte_end":60774,"line_start":364,"line_end":364,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60779,"byte_end":60852,"line_start":365,"line_end":365,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60857,"byte_end":60875,"line_start":366,"line_end":366,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60880,"byte_end":60883,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60888,"byte_end":60921,"line_start":368,"line_end":368,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60926,"byte_end":60935,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61387,"byte_end":61394,"line_start":383,"line_end":383,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61139,"byte_end":61194,"line_start":378,"line_end":378,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61199,"byte_end":61202,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61207,"byte_end":61283,"line_start":380,"line_end":380,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61288,"byte_end":61361,"line_start":381,"line_end":381,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61366,"byte_end":61375,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62001,"byte_end":62018,"line_start":399,"line_end":399,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61470,"byte_end":61503,"line_start":387,"line_end":387,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61508,"byte_end":61511,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61516,"byte_end":61590,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61595,"byte_end":61670,"line_start":390,"line_end":390,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61675,"byte_end":61696,"line_start":391,"line_end":391,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61701,"byte_end":61704,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61709,"byte_end":61721,"line_start":393,"line_end":393,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61726,"byte_end":61729,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61734,"byte_end":61808,"line_start":395,"line_end":395,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61813,"byte_end":61887,"line_start":396,"line_end":396,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61892,"byte_end":61968,"line_start":397,"line_end":397,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61973,"byte_end":61982,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62609,"byte_end":62627,"line_start":415,"line_end":415,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62073,"byte_end":62107,"line_start":403,"line_end":403,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62112,"byte_end":62115,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62120,"byte_end":62194,"line_start":405,"line_end":405,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62199,"byte_end":62275,"line_start":406,"line_end":406,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62280,"byte_end":62301,"line_start":407,"line_end":407,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62306,"byte_end":62309,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62314,"byte_end":62326,"line_start":409,"line_end":409,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62331,"byte_end":62334,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62339,"byte_end":62413,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62418,"byte_end":62493,"line_start":412,"line_end":412,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62498,"byte_end":62576,"line_start":413,"line_end":413,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62581,"byte_end":62590,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63093,"byte_end":63096,"line_start":429,"line_end":429,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62685,"byte_end":62742,"line_start":419,"line_end":419,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62747,"byte_end":62750,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62755,"byte_end":62831,"line_start":421,"line_end":421,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62836,"byte_end":62890,"line_start":422,"line_end":422,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62895,"byte_end":62918,"line_start":423,"line_end":423,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62923,"byte_end":62926,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62931,"byte_end":62943,"line_start":425,"line_end":425,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62948,"byte_end":62951,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62956,"byte_end":63023,"line_start":427,"line_end":427,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63028,"byte_end":63074,"line_start":428,"line_end":428,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63752,"byte_end":63774,"line_start":447,"line_end":447,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63192,"byte_end":63254,"line_start":435,"line_end":435,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63259,"byte_end":63262,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63267,"byte_end":63341,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63346,"byte_end":63421,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63426,"byte_end":63447,"line_start":439,"line_end":439,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63452,"byte_end":63455,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63460,"byte_end":63472,"line_start":441,"line_end":441,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63477,"byte_end":63480,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63485,"byte_end":63559,"line_start":443,"line_end":443,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63564,"byte_end":63638,"line_start":444,"line_end":444,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63643,"byte_end":63719,"line_start":445,"line_end":445,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63724,"byte_end":63733,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64399,"byte_end":64422,"line_start":463,"line_end":463,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63834,"byte_end":63897,"line_start":451,"line_end":451,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63902,"byte_end":63905,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63910,"byte_end":63984,"line_start":453,"line_end":453,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63989,"byte_end":64065,"line_start":454,"line_end":454,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64070,"byte_end":64091,"line_start":455,"line_end":455,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64096,"byte_end":64099,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64104,"byte_end":64116,"line_start":457,"line_end":457,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64121,"byte_end":64124,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64129,"byte_end":64203,"line_start":459,"line_end":459,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64208,"byte_end":64283,"line_start":460,"line_end":460,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64288,"byte_end":64366,"line_start":461,"line_end":461,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64371,"byte_end":64380,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64874,"byte_end":64886,"line_start":476,"line_end":476,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64537,"byte_end":64614,"line_start":469,"line_end":469,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64619,"byte_end":64634,"line_start":470,"line_end":470,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64639,"byte_end":64642,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64647,"byte_end":64718,"line_start":472,"line_end":472,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64723,"byte_end":64794,"line_start":473,"line_end":473,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64799,"byte_end":64848,"line_start":474,"line_end":474,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64853,"byte_end":64862,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65434,"byte_end":65448,"line_start":491,"line_end":491,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65097,"byte_end":65174,"line_start":484,"line_end":484,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65179,"byte_end":65194,"line_start":485,"line_end":485,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65199,"byte_end":65202,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65207,"byte_end":65278,"line_start":487,"line_end":487,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65283,"byte_end":65354,"line_start":488,"line_end":488,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65359,"byte_end":65408,"line_start":489,"line_end":489,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65413,"byte_end":65422,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66004,"byte_end":66017,"line_start":506,"line_end":506,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65660,"byte_end":65733,"line_start":499,"line_end":499,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65738,"byte_end":65761,"line_start":500,"line_end":500,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65766,"byte_end":65769,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65774,"byte_end":65845,"line_start":502,"line_end":502,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65850,"byte_end":65921,"line_start":503,"line_end":503,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65926,"byte_end":65978,"line_start":504,"line_end":504,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65983,"byte_end":65992,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66577,"byte_end":66592,"line_start":521,"line_end":521,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66233,"byte_end":66306,"line_start":514,"line_end":514,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66311,"byte_end":66334,"line_start":515,"line_end":515,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66339,"byte_end":66342,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66347,"byte_end":66418,"line_start":517,"line_end":517,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66423,"byte_end":66494,"line_start":518,"line_end":518,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66499,"byte_end":66551,"line_start":519,"line_end":519,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66556,"byte_end":66565,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67658,"byte_end":67672,"line_start":547,"line_end":547,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66865,"byte_end":66941,"line_start":531,"line_end":531,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66946,"byte_end":66975,"line_start":532,"line_end":532,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66980,"byte_end":66983,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66988,"byte_end":67064,"line_start":534,"line_end":534,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67069,"byte_end":67145,"line_start":535,"line_end":535,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67150,"byte_end":67174,"line_start":536,"line_end":536,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67179,"byte_end":67182,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67187,"byte_end":67262,"line_start":538,"line_end":538,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67267,"byte_end":67342,"line_start":539,"line_end":539,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67347,"byte_end":67418,"line_start":540,"line_end":540,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67423,"byte_end":67497,"line_start":541,"line_end":541,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67502,"byte_end":67519,"line_start":542,"line_end":542,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67524,"byte_end":67527,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67532,"byte_end":67604,"line_start":544,"line_end":544,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67609,"byte_end":67632,"line_start":545,"line_end":545,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67637,"byte_end":67646,"line_start":546,"line_end":546,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68295,"byte_end":68313,"line_start":563,"line_end":563,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67790,"byte_end":67852,"line_start":552,"line_end":552,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67857,"byte_end":67860,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67865,"byte_end":67942,"line_start":554,"line_end":554,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67947,"byte_end":68024,"line_start":555,"line_end":555,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68029,"byte_end":68052,"line_start":556,"line_end":556,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68057,"byte_end":68060,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68065,"byte_end":68141,"line_start":558,"line_end":558,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68146,"byte_end":68223,"line_start":559,"line_end":559,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68228,"byte_end":68231,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68236,"byte_end":68269,"line_start":561,"line_end":561,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68274,"byte_end":68283,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69095,"byte_end":69117,"line_start":584,"line_end":584,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68562,"byte_end":68639,"line_start":573,"line_end":573,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68644,"byte_end":68659,"line_start":574,"line_end":574,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68664,"byte_end":68667,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68672,"byte_end":68743,"line_start":576,"line_end":576,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68748,"byte_end":68819,"line_start":577,"line_end":577,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68824,"byte_end":68873,"line_start":578,"line_end":578,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68878,"byte_end":68881,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68886,"byte_end":68959,"line_start":580,"line_end":580,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68964,"byte_end":69031,"line_start":581,"line_end":581,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69036,"byte_end":69069,"line_start":582,"line_end":582,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69074,"byte_end":69083,"line_start":583,"line_end":583,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69698,"byte_end":69722,"line_start":602,"line_end":602,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69361,"byte_end":69438,"line_start":595,"line_end":595,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69443,"byte_end":69458,"line_start":596,"line_end":596,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69463,"byte_end":69466,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69471,"byte_end":69542,"line_start":598,"line_end":598,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69547,"byte_end":69618,"line_start":599,"line_end":599,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69623,"byte_end":69672,"line_start":600,"line_end":600,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69677,"byte_end":69686,"line_start":601,"line_end":601,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70697,"byte_end":70712,"line_start":633,"line_end":633,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70219,"byte_end":70299,"line_start":623,"line_end":623,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70304,"byte_end":70333,"line_start":624,"line_end":624,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70338,"byte_end":70341,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70346,"byte_end":70425,"line_start":626,"line_end":626,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70430,"byte_end":70508,"line_start":627,"line_end":627,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70513,"byte_end":70558,"line_start":628,"line_end":628,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70563,"byte_end":70566,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70571,"byte_end":70643,"line_start":630,"line_end":630,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70648,"byte_end":70671,"line_start":631,"line_end":631,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70676,"byte_end":70685,"line_start":632,"line_end":632,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71178,"byte_end":71197,"line_start":646,"line_end":646,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70840,"byte_end":70906,"line_start":638,"line_end":638,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70911,"byte_end":70914,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70919,"byte_end":70996,"line_start":640,"line_end":640,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71001,"byte_end":71078,"line_start":641,"line_end":641,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71083,"byte_end":71106,"line_start":642,"line_end":642,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71111,"byte_end":71114,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71119,"byte_end":71152,"line_start":644,"line_end":644,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71157,"byte_end":71166,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71795,"byte_end":71818,"line_start":663,"line_end":663,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71454,"byte_end":71535,"line_start":656,"line_end":656,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71540,"byte_end":71555,"line_start":657,"line_end":657,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71560,"byte_end":71563,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71568,"byte_end":71639,"line_start":659,"line_end":659,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71644,"byte_end":71715,"line_start":660,"line_end":660,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71720,"byte_end":71769,"line_start":661,"line_end":661,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71774,"byte_end":71783,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72413,"byte_end":72438,"line_start":681,"line_end":681,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72072,"byte_end":72153,"line_start":674,"line_end":674,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72158,"byte_end":72173,"line_start":675,"line_end":675,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72178,"byte_end":72181,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72186,"byte_end":72257,"line_start":677,"line_end":677,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72262,"byte_end":72333,"line_start":678,"line_end":678,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72338,"byte_end":72387,"line_start":679,"line_end":679,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72392,"byte_end":72401,"line_start":680,"line_end":680,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":557},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73846,"byte_end":73861,"line_start":730,"line_end":730,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73688,"byte_end":73760,"line_start":727,"line_end":727,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73761,"byte_end":73773,"line_start":728,"line_end":728,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73774,"byte_end":73834,"line_start":729,"line_end":729,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74227,"byte_end":74233,"line_start":739,"line_end":739,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74149,"byte_end":74215,"line_start":738,"line_end":738,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74713,"byte_end":74716,"line_start":752,"line_end":752,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74294,"byte_end":74368,"line_start":743,"line_end":743,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74373,"byte_end":74376,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74381,"byte_end":74443,"line_start":745,"line_end":745,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74448,"byte_end":74479,"line_start":746,"line_end":746,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74484,"byte_end":74487,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74492,"byte_end":74543,"line_start":748,"line_end":748,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74548,"byte_end":74629,"line_start":749,"line_end":749,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74634,"byte_end":74687,"line_start":750,"line_end":750,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74692,"byte_end":74701,"line_start":751,"line_end":751,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75560,"byte_end":75567,"line_start":776,"line_end":776,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75060,"byte_end":75134,"line_start":766,"line_end":766,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75139,"byte_end":75215,"line_start":767,"line_end":767,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75220,"byte_end":75223,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75228,"byte_end":75290,"line_start":769,"line_end":769,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75295,"byte_end":75326,"line_start":770,"line_end":770,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75331,"byte_end":75334,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75339,"byte_end":75390,"line_start":772,"line_end":772,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75395,"byte_end":75476,"line_start":773,"line_end":773,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75481,"byte_end":75534,"line_start":774,"line_end":774,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75539,"byte_end":75548,"line_start":775,"line_end":775,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76319,"byte_end":76327,"line_start":800,"line_end":800,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76022,"byte_end":76089,"line_start":793,"line_end":793,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76094,"byte_end":76097,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76102,"byte_end":76154,"line_start":795,"line_end":795,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76159,"byte_end":76162,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76167,"byte_end":76235,"line_start":797,"line_end":797,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76240,"byte_end":76293,"line_start":798,"line_end":798,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76298,"byte_end":76307,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77385,"byte_end":77396,"line_start":824,"line_end":824,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76584,"byte_end":76638,"line_start":811,"line_end":811,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76643,"byte_end":76646,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76651,"byte_end":76725,"line_start":813,"line_end":813,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76730,"byte_end":76805,"line_start":814,"line_end":814,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76810,"byte_end":76883,"line_start":815,"line_end":815,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76888,"byte_end":76957,"line_start":816,"line_end":816,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76962,"byte_end":77039,"line_start":817,"line_end":817,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77044,"byte_end":77111,"line_start":818,"line_end":818,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77116,"byte_end":77119,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77124,"byte_end":77200,"line_start":820,"line_end":820,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77205,"byte_end":77281,"line_start":821,"line_end":821,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77286,"byte_end":77359,"line_start":822,"line_end":822,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77364,"byte_end":77373,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77783,"byte_end":77796,"line_start":836,"line_end":836,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77486,"byte_end":77553,"line_start":829,"line_end":829,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77558,"byte_end":77561,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77566,"byte_end":77618,"line_start":831,"line_end":831,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77623,"byte_end":77626,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77631,"byte_end":77699,"line_start":833,"line_end":833,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77704,"byte_end":77757,"line_start":834,"line_end":834,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77762,"byte_end":77771,"line_start":835,"line_end":835,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78280,"byte_end":78284,"line_start":851,"line_end":851,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77980,"byte_end":78052,"line_start":845,"line_end":845,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78057,"byte_end":78060,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78065,"byte_end":78141,"line_start":847,"line_end":847,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78146,"byte_end":78222,"line_start":848,"line_end":848,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78227,"byte_end":78254,"line_start":849,"line_end":849,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78259,"byte_end":78268,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":611},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79418,"byte_end":79434,"line_start":891,"line_end":891,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79256,"byte_end":79332,"line_start":888,"line_end":888,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79333,"byte_end":79345,"line_start":889,"line_end":889,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79346,"byte_end":79406,"line_start":890,"line_end":890,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79806,"byte_end":79812,"line_start":900,"line_end":900,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79728,"byte_end":79794,"line_start":899,"line_end":899,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80295,"byte_end":80298,"line_start":913,"line_end":913,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79873,"byte_end":79948,"line_start":904,"line_end":904,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79953,"byte_end":79956,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79961,"byte_end":80024,"line_start":906,"line_end":906,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80029,"byte_end":80060,"line_start":907,"line_end":907,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80065,"byte_end":80068,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80073,"byte_end":80124,"line_start":909,"line_end":909,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80129,"byte_end":80211,"line_start":910,"line_end":910,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80216,"byte_end":80269,"line_start":911,"line_end":911,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80274,"byte_end":80283,"line_start":912,"line_end":912,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81159,"byte_end":81166,"line_start":937,"line_end":937,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80656,"byte_end":80731,"line_start":927,"line_end":927,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80736,"byte_end":80812,"line_start":928,"line_end":928,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80817,"byte_end":80820,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80825,"byte_end":80888,"line_start":930,"line_end":930,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80893,"byte_end":80924,"line_start":931,"line_end":931,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80929,"byte_end":80932,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80937,"byte_end":80988,"line_start":933,"line_end":933,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80993,"byte_end":81075,"line_start":934,"line_end":934,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81080,"byte_end":81133,"line_start":935,"line_end":935,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81138,"byte_end":81147,"line_start":936,"line_end":936,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81867,"byte_end":81875,"line_start":959,"line_end":959,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81635,"byte_end":81702,"line_start":954,"line_end":954,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81707,"byte_end":81710,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81715,"byte_end":81783,"line_start":956,"line_end":956,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81788,"byte_end":81841,"line_start":957,"line_end":957,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81846,"byte_end":81855,"line_start":958,"line_end":958,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82486,"byte_end":82495,"line_start":976,"line_end":976,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82144,"byte_end":82220,"line_start":970,"line_end":970,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82225,"byte_end":82290,"line_start":971,"line_end":971,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82295,"byte_end":82298,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82303,"byte_end":82376,"line_start":973,"line_end":973,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82381,"byte_end":82454,"line_start":974,"line_end":974,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82459,"byte_end":82474,"line_start":975,"line_end":975,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83170,"byte_end":83193,"line_start":994,"line_end":994,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82816,"byte_end":82904,"line_start":988,"line_end":988,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82909,"byte_end":82974,"line_start":989,"line_end":989,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82979,"byte_end":82982,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82987,"byte_end":83060,"line_start":991,"line_end":991,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83065,"byte_end":83138,"line_start":992,"line_end":992,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83143,"byte_end":83158,"line_start":993,"line_end":993,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84338,"byte_end":84349,"line_start":1019,"line_end":1019,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83536,"byte_end":83590,"line_start":1006,"line_end":1006,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83595,"byte_end":83598,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83603,"byte_end":83677,"line_start":1008,"line_end":1008,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83682,"byte_end":83757,"line_start":1009,"line_end":1009,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83762,"byte_end":83835,"line_start":1010,"line_end":1010,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83840,"byte_end":83909,"line_start":1011,"line_end":1011,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83914,"byte_end":83991,"line_start":1012,"line_end":1012,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83996,"byte_end":84063,"line_start":1013,"line_end":1013,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84068,"byte_end":84071,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84076,"byte_end":84152,"line_start":1015,"line_end":1015,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84157,"byte_end":84233,"line_start":1016,"line_end":1016,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84238,"byte_end":84312,"line_start":1017,"line_end":1017,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84317,"byte_end":84326,"line_start":1018,"line_end":1018,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84739,"byte_end":84752,"line_start":1031,"line_end":1031,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84442,"byte_end":84509,"line_start":1024,"line_end":1024,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84514,"byte_end":84517,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84522,"byte_end":84574,"line_start":1026,"line_end":1026,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84579,"byte_end":84582,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84587,"byte_end":84655,"line_start":1028,"line_end":1028,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84660,"byte_end":84713,"line_start":1029,"line_end":1029,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84718,"byte_end":84727,"line_start":1030,"line_end":1030,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85243,"byte_end":85247,"line_start":1046,"line_end":1046,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84942,"byte_end":85014,"line_start":1040,"line_end":1040,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85019,"byte_end":85022,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85027,"byte_end":85103,"line_start":1042,"line_end":1042,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85108,"byte_end":85185,"line_start":1043,"line_end":1043,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85190,"byte_end":85217,"line_start":1044,"line_end":1044,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85222,"byte_end":85231,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":680},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86589,"byte_end":86614,"line_start":1093,"line_end":1093,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86427,"byte_end":86503,"line_start":1090,"line_end":1090,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86504,"byte_end":86516,"line_start":1091,"line_end":1091,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86517,"byte_end":86577,"line_start":1092,"line_end":1092,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87026,"byte_end":87032,"line_start":1105,"line_end":1105,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86948,"byte_end":87014,"line_start":1104,"line_end":1104,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87325,"byte_end":87333,"line_start":1114,"line_end":1114,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87093,"byte_end":87160,"line_start":1109,"line_end":1109,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87165,"byte_end":87168,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87173,"byte_end":87241,"line_start":1111,"line_end":1111,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87246,"byte_end":87299,"line_start":1112,"line_end":1112,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87304,"byte_end":87313,"line_start":1113,"line_end":1113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87675,"byte_end":87682,"line_start":1125,"line_end":1125,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87520,"byte_end":87601,"line_start":1123,"line_end":1123,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87606,"byte_end":87663,"line_start":1124,"line_end":1124,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88109,"byte_end":88120,"line_start":1138,"line_end":1138,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87912,"byte_end":87996,"line_start":1135,"line_end":1135,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88001,"byte_end":88004,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88009,"byte_end":88097,"line_start":1137,"line_end":1137,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89352,"byte_end":89363,"line_start":1166,"line_end":1166,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88541,"byte_end":88595,"line_start":1153,"line_end":1153,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88600,"byte_end":88603,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88608,"byte_end":88682,"line_start":1155,"line_end":1155,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88687,"byte_end":88762,"line_start":1156,"line_end":1156,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88767,"byte_end":88840,"line_start":1157,"line_end":1157,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88845,"byte_end":88914,"line_start":1158,"line_end":1158,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88919,"byte_end":88996,"line_start":1159,"line_end":1159,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89001,"byte_end":89068,"line_start":1160,"line_end":1160,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89073,"byte_end":89076,"line_start":1161,"line_end":1161,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89081,"byte_end":89157,"line_start":1162,"line_end":1162,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89162,"byte_end":89238,"line_start":1163,"line_end":1163,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89243,"byte_end":89326,"line_start":1164,"line_end":1164,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89331,"byte_end":89340,"line_start":1165,"line_end":1165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89754,"byte_end":89767,"line_start":1178,"line_end":1178,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89457,"byte_end":89524,"line_start":1171,"line_end":1171,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89529,"byte_end":89532,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89537,"byte_end":89589,"line_start":1173,"line_end":1173,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89594,"byte_end":89597,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89602,"byte_end":89670,"line_start":1175,"line_end":1175,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89675,"byte_end":89728,"line_start":1176,"line_end":1176,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89733,"byte_end":89742,"line_start":1177,"line_end":1177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90270,"byte_end":90274,"line_start":1193,"line_end":1193,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89959,"byte_end":90031,"line_start":1187,"line_end":1187,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90036,"byte_end":90039,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90044,"byte_end":90120,"line_start":1189,"line_end":1189,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90125,"byte_end":90212,"line_start":1190,"line_end":1190,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90217,"byte_end":90244,"line_start":1191,"line_end":1191,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90249,"byte_end":90258,"line_start":1192,"line_end":1192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90815,"byte_end":90824,"line_start":1206,"line_end":1206,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90442,"byte_end":90520,"line_start":1199,"line_end":1199,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90525,"byte_end":90601,"line_start":1200,"line_end":1200,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90606,"byte_end":90619,"line_start":1201,"line_end":1201,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90624,"byte_end":90627,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90632,"byte_end":90705,"line_start":1203,"line_end":1203,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90710,"byte_end":90783,"line_start":1204,"line_end":1204,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90788,"byte_end":90803,"line_start":1205,"line_end":1205,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91416,"byte_end":91431,"line_start":1223,"line_end":1223,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91161,"byte_end":91233,"line_start":1218,"line_end":1218,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91238,"byte_end":91281,"line_start":1219,"line_end":1219,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91286,"byte_end":91289,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91294,"byte_end":91365,"line_start":1221,"line_end":1221,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91370,"byte_end":91404,"line_start":1222,"line_end":1222,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92082,"byte_end":92099,"line_start":1245,"line_end":1245,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91813,"byte_end":91885,"line_start":1239,"line_end":1239,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91890,"byte_end":91933,"line_start":1240,"line_end":1240,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91938,"byte_end":91941,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91946,"byte_end":92017,"line_start":1242,"line_end":1242,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92022,"byte_end":92056,"line_start":1243,"line_end":1243,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92061,"byte_end":92070,"line_start":1244,"line_end":1244,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93944,"byte_end":93965,"line_start":1307,"line_end":1307,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93488,"byte_end":93572,"line_start":1299,"line_end":1299,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93573,"byte_end":93608,"line_start":1300,"line_end":1300,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93609,"byte_end":93612,"line_start":1301,"line_end":1301,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93613,"byte_end":93702,"line_start":1302,"line_end":1302,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93703,"byte_end":93778,"line_start":1303,"line_end":1303,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93779,"byte_end":93859,"line_start":1304,"line_end":1304,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93860,"byte_end":93871,"line_start":1305,"line_end":1305,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93872,"byte_end":93932,"line_start":1306,"line_end":1306,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94811,"byte_end":94814,"line_start":1329,"line_end":1329,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94380,"byte_end":94454,"line_start":1320,"line_end":1320,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94459,"byte_end":94462,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94467,"byte_end":94535,"line_start":1322,"line_end":1322,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94540,"byte_end":94571,"line_start":1323,"line_end":1323,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94576,"byte_end":94579,"line_start":1324,"line_end":1324,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94584,"byte_end":94635,"line_start":1325,"line_end":1325,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94640,"byte_end":94727,"line_start":1326,"line_end":1326,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94732,"byte_end":94785,"line_start":1327,"line_end":1327,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94790,"byte_end":94799,"line_start":1328,"line_end":1328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95649,"byte_end":95656,"line_start":1353,"line_end":1353,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95137,"byte_end":95211,"line_start":1343,"line_end":1343,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95216,"byte_end":95292,"line_start":1344,"line_end":1344,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95297,"byte_end":95300,"line_start":1345,"line_end":1345,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95305,"byte_end":95373,"line_start":1346,"line_end":1346,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95378,"byte_end":95409,"line_start":1347,"line_end":1347,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95414,"byte_end":95417,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95422,"byte_end":95473,"line_start":1349,"line_end":1349,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95478,"byte_end":95565,"line_start":1350,"line_end":1350,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95570,"byte_end":95623,"line_start":1351,"line_end":1351,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95628,"byte_end":95637,"line_start":1352,"line_end":1352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96981,"byte_end":96992,"line_start":1385,"line_end":1385,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96174,"byte_end":96228,"line_start":1372,"line_end":1372,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96233,"byte_end":96236,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96241,"byte_end":96315,"line_start":1374,"line_end":1374,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96320,"byte_end":96395,"line_start":1375,"line_end":1375,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96400,"byte_end":96473,"line_start":1376,"line_end":1376,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96478,"byte_end":96547,"line_start":1377,"line_end":1377,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96552,"byte_end":96629,"line_start":1378,"line_end":1378,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96634,"byte_end":96701,"line_start":1379,"line_end":1379,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96706,"byte_end":96709,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96714,"byte_end":96790,"line_start":1381,"line_end":1381,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96795,"byte_end":96871,"line_start":1382,"line_end":1382,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96876,"byte_end":96955,"line_start":1383,"line_end":1383,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96960,"byte_end":96969,"line_start":1384,"line_end":1384,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":792},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98462,"byte_end":98484,"line_start":1436,"line_end":1436,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98002,"byte_end":98088,"line_start":1428,"line_end":1428,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98089,"byte_end":98124,"line_start":1429,"line_end":1429,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98125,"byte_end":98128,"line_start":1430,"line_end":1430,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98129,"byte_end":98220,"line_start":1431,"line_end":1431,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98221,"byte_end":98296,"line_start":1432,"line_end":1432,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98297,"byte_end":98377,"line_start":1433,"line_end":1433,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98378,"byte_end":98389,"line_start":1434,"line_end":1434,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98390,"byte_end":98450,"line_start":1435,"line_end":1435,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99343,"byte_end":99346,"line_start":1461,"line_end":1461,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98909,"byte_end":98984,"line_start":1452,"line_end":1452,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98989,"byte_end":98992,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98997,"byte_end":99066,"line_start":1454,"line_end":1454,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99071,"byte_end":99102,"line_start":1455,"line_end":1455,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99107,"byte_end":99110,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99115,"byte_end":99166,"line_start":1457,"line_end":1457,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99171,"byte_end":99259,"line_start":1458,"line_end":1458,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99264,"byte_end":99317,"line_start":1459,"line_end":1459,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99322,"byte_end":99331,"line_start":1460,"line_end":1460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100198,"byte_end":100205,"line_start":1485,"line_end":1485,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99683,"byte_end":99758,"line_start":1475,"line_end":1475,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99763,"byte_end":99839,"line_start":1476,"line_end":1476,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99844,"byte_end":99847,"line_start":1477,"line_end":1477,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99852,"byte_end":99921,"line_start":1478,"line_end":1478,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99926,"byte_end":99957,"line_start":1479,"line_end":1479,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99962,"byte_end":99965,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99970,"byte_end":100021,"line_start":1481,"line_end":1481,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100026,"byte_end":100114,"line_start":1482,"line_end":1482,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100119,"byte_end":100172,"line_start":1483,"line_end":1483,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100177,"byte_end":100186,"line_start":1484,"line_end":1484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101085,"byte_end":101094,"line_start":1510,"line_end":1510,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> MappedRwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100743,"byte_end":100819,"line_start":1504,"line_end":1504,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100824,"byte_end":100889,"line_start":1505,"line_end":1505,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100894,"byte_end":100897,"line_start":1506,"line_end":1506,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100902,"byte_end":100975,"line_start":1507,"line_end":1507,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100980,"byte_end":101053,"line_start":1508,"line_end":1508,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101058,"byte_end":101073,"line_start":1509,"line_end":1509,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102258,"byte_end":102269,"line_start":1537,"line_end":1537,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101450,"byte_end":101504,"line_start":1524,"line_end":1524,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101509,"byte_end":101512,"line_start":1525,"line_end":1525,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101517,"byte_end":101591,"line_start":1526,"line_end":1526,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101596,"byte_end":101671,"line_start":1527,"line_end":1527,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101676,"byte_end":101749,"line_start":1528,"line_end":1528,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101754,"byte_end":101823,"line_start":1529,"line_end":1529,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101828,"byte_end":101905,"line_start":1530,"line_end":1530,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101910,"byte_end":101977,"line_start":1531,"line_end":1531,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101982,"byte_end":101985,"line_start":1532,"line_end":1532,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101990,"byte_end":102066,"line_start":1533,"line_end":1533,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102071,"byte_end":102147,"line_start":1534,"line_end":1534,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102152,"byte_end":102232,"line_start":1535,"line_end":1535,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102237,"byte_end":102246,"line_start":1536,"line_end":1536,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8156,"byte_end":8161,"line_start":128,"line_end":128,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8230,"byte_end":8235,"line_start":129,"line_end":129,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8267,"byte_end":8272,"line_start":131,"line_end":131,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9007,"byte_end":9012,"line_start":160,"line_end":160,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11651,"byte_end":11656,"line_start":240,"line_end":240,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12308,"byte_end":12313,"line_start":258,"line_end":258,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13384,"byte_end":13389,"line_start":288,"line_end":288,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13527,"byte_end":13532,"line_start":295,"line_end":295,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13678,"byte_end":13683,"line_start":302,"line_end":302,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13972,"byte_end":13989,"line_start":308,"line_end":308,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14857,"byte_end":14867,"line_start":333,"line_end":333,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14925,"byte_end":14935,"line_start":335,"line_end":335,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17226,"byte_end":17236,"line_start":406,"line_end":406,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19004,"byte_end":19014,"line_start":452,"line_end":452,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19198,"byte_end":19208,"line_start":460,"line_end":460,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19383,"byte_end":19393,"line_start":467,"line_end":467,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19558,"byte_end":19568,"line_start":474,"line_end":474,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19764,"byte_end":19774,"line_start":480,"line_end":480,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20640,"byte_end":20656,"line_start":504,"line_end":504,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20730,"byte_end":20746,"line_start":507,"line_end":507,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20836,"byte_end":20852,"line_start":512,"line_end":512,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22601,"byte_end":22617,"line_start":564,"line_end":564,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23553,"byte_end":23569,"line_start":584,"line_end":584,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23741,"byte_end":23757,"line_start":592,"line_end":592,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23920,"byte_end":23936,"line_start":599,"line_end":599,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":24095,"byte_end":24111,"line_start":606,"line_end":606,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":24311,"byte_end":24327,"line_start":613,"line_end":613,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":26087,"byte_end":26104,"line_start":49,"line_end":49,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":27292,"byte_end":27309,"line_start":95,"line_end":95,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":27936,"byte_end":27953,"line_start":118,"line_end":118,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29639,"byte_end":29653,"line_start":178,"line_end":178,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29753,"byte_end":29767,"line_start":182,"line_end":182,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29819,"byte_end":29833,"line_start":186,"line_end":186,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31017,"byte_end":31031,"line_start":225,"line_end":225,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33880,"byte_end":33894,"line_start":306,"line_end":306,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34583,"byte_end":34597,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35711,"byte_end":35725,"line_start":354,"line_end":354,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35903,"byte_end":35917,"line_start":361,"line_end":361,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36103,"byte_end":36117,"line_start":368,"line_end":368,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36469,"byte_end":36486,"line_start":377,"line_end":377,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37430,"byte_end":37449,"line_start":403,"line_end":403,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37532,"byte_end":37551,"line_start":407,"line_end":407,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40014,"byte_end":40033,"line_start":482,"line_end":482,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41846,"byte_end":41865,"line_start":530,"line_end":530,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42075,"byte_end":42094,"line_start":540,"line_end":540,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42289,"byte_end":42308,"line_start":549,"line_end":549,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42532,"byte_end":42551,"line_start":557,"line_end":557,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43567,"byte_end":43592,"line_start":585,"line_end":585,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43679,"byte_end":43704,"line_start":590,"line_end":590,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45576,"byte_end":45601,"line_start":647,"line_end":647,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46574,"byte_end":46599,"line_start":669,"line_end":669,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46795,"byte_end":46820,"line_start":679,"line_end":679,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":47007,"byte_end":47032,"line_start":688,"line_end":688,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":47256,"byte_end":47281,"line_start":696,"line_end":696,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57643,"byte_end":57649,"line_start":265,"line_end":265,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57726,"byte_end":57732,"line_start":266,"line_end":266,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57765,"byte_end":57771,"line_start":268,"line_end":268,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58522,"byte_end":58528,"line_start":297,"line_end":297,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63173,"byte_end":63179,"line_start":434,"line_end":434,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64518,"byte_end":64524,"line_start":468,"line_end":468,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66846,"byte_end":66852,"line_start":530,"line_end":530,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68543,"byte_end":68549,"line_start":572,"line_end":572,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70002,"byte_end":70008,"line_start":614,"line_end":614,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71435,"byte_end":71441,"line_start":655,"line_end":655,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72743,"byte_end":72749,"line_start":693,"line_end":693,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72890,"byte_end":72896,"line_start":700,"line_end":700,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73045,"byte_end":73051,"line_start":707,"line_end":707,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73341,"byte_end":73358,"line_start":713,"line_end":713,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74043,"byte_end":74058,"line_start":735,"line_end":735,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74117,"byte_end":74132,"line_start":737,"line_end":737,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76552,"byte_end":76567,"line_start":810,"line_end":810,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78400,"byte_end":78415,"line_start":856,"line_end":856,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78597,"byte_end":78612,"line_start":864,"line_end":864,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78786,"byte_end":78801,"line_start":871,"line_end":871,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79002,"byte_end":79017,"line_start":878,"line_end":878,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79620,"byte_end":79636,"line_start":896,"line_end":896,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79695,"byte_end":79711,"line_start":898,"line_end":898,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82111,"byte_end":82127,"line_start":969,"line_end":969,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82783,"byte_end":82799,"line_start":987,"line_end":987,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83503,"byte_end":83519,"line_start":1005,"line_end":1005,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85366,"byte_end":85382,"line_start":1051,"line_end":1051,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85568,"byte_end":85584,"line_start":1059,"line_end":1059,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85761,"byte_end":85777,"line_start":1066,"line_end":1066,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85954,"byte_end":85970,"line_start":1073,"line_end":1073,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86171,"byte_end":86187,"line_start":1080,"line_end":1080,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86814,"byte_end":86839,"line_start":1099,"line_end":1099,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86906,"byte_end":86931,"line_start":1103,"line_end":1103,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":698},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88499,"byte_end":88524,"line_start":1152,"line_end":1152,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90400,"byte_end":90425,"line_start":1198,"line_end":1198,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91119,"byte_end":91144,"line_start":1217,"line_end":1217,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92541,"byte_end":92566,"line_start":1262,"line_end":1262,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92755,"byte_end":92780,"line_start":1270,"line_end":1270,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92969,"byte_end":92994,"line_start":1278,"line_end":1278,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93202,"byte_end":93227,"line_start":1286,"line_end":1286,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94135,"byte_end":94156,"line_start":1313,"line_end":1313,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94230,"byte_end":94251,"line_start":1314,"line_end":1314,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94342,"byte_end":94363,"line_start":1319,"line_end":1319,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96136,"byte_end":96157,"line_start":1371,"line_end":1371,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97127,"byte_end":97148,"line_start":1391,"line_end":1391,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97317,"byte_end":97338,"line_start":1399,"line_end":1399,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97509,"byte_end":97530,"line_start":1407,"line_end":1407,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97731,"byte_end":97752,"line_start":1415,"line_end":1415,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98660,"byte_end":98682,"line_start":1443,"line_end":1443,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98757,"byte_end":98779,"line_start":1446,"line_end":1446,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98870,"byte_end":98892,"line_start":1451,"line_end":1451,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100704,"byte_end":100726,"line_start":1503,"line_end":1503,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101411,"byte_end":101433,"line_start":1523,"line_end":1523,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102407,"byte_end":102429,"line_start":1543,"line_end":1543,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102602,"byte_end":102624,"line_start":1551,"line_end":1551,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102788,"byte_end":102810,"line_start":1558,"line_end":1558,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102984,"byte_end":103006,"line_start":1566,"line_end":1566,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":103207,"byte_end":103229,"line_start":1574,"line_end":1574,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5790,"byte_end":5798,"line_start":53,"line_end":53,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6486,"byte_end":6494,"line_start":72,"line_end":72,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8156,"byte_end":8161,"line_start":128,"line_end":128,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8230,"byte_end":8235,"line_start":129,"line_end":129,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8267,"byte_end":8272,"line_start":131,"line_end":131,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9007,"byte_end":9012,"line_start":160,"line_end":160,"column_start":30,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11651,"byte_end":11656,"line_start":240,"line_end":240,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12308,"byte_end":12313,"line_start":258,"line_end":258,"column_start":35,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13384,"byte_end":13389,"line_start":288,"line_end":288,"column_start":52,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13527,"byte_end":13532,"line_start":295,"line_end":295,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13678,"byte_end":13683,"line_start":302,"line_end":302,"column_start":58,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":33},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13972,"byte_end":13989,"line_start":308,"line_end":308,"column_start":37,"column_end":54},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14857,"byte_end":14867,"line_start":333,"line_end":333,"column_start":74,"column_end":84},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14925,"byte_end":14935,"line_start":335,"line_end":335,"column_start":44,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17226,"byte_end":17236,"line_start":406,"line_end":406,"column_start":48,"column_end":58},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19004,"byte_end":19014,"line_start":452,"line_end":452,"column_start":54,"column_end":64},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19198,"byte_end":19208,"line_start":460,"line_end":460,"column_start":57,"column_end":67},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19383,"byte_end":19393,"line_start":467,"line_end":467,"column_start":53,"column_end":63},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19558,"byte_end":19568,"line_start":474,"line_end":474,"column_start":72,"column_end":82},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19764,"byte_end":19774,"line_start":480,"line_end":480,"column_start":76,"column_end":86},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20640,"byte_end":20656,"line_start":504,"line_end":504,"column_start":9,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20730,"byte_end":20746,"line_start":507,"line_end":507,"column_start":60,"column_end":76},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20836,"byte_end":20852,"line_start":512,"line_end":512,"column_start":44,"column_end":60},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22601,"byte_end":22617,"line_start":564,"line_end":564,"column_start":48,"column_end":64},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23553,"byte_end":23569,"line_start":584,"line_end":584,"column_start":54,"column_end":70},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23741,"byte_end":23757,"line_start":592,"line_end":592,"column_start":57,"column_end":73},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23920,"byte_end":23936,"line_start":599,"line_end":599,"column_start":53,"column_end":69},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":24095,"byte_end":24111,"line_start":606,"line_end":606,"column_start":72,"column_end":88},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":24311,"byte_end":24327,"line_start":613,"line_end":613,"column_start":9,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":26087,"byte_end":26104,"line_start":49,"line_end":49,"column_start":35,"column_end":52},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":27292,"byte_end":27309,"line_start":95,"line_end":95,"column_start":39,"column_end":56},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":27936,"byte_end":27953,"line_start":118,"line_end":118,"column_start":40,"column_end":57},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29639,"byte_end":29653,"line_start":178,"line_end":178,"column_start":9,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29753,"byte_end":29767,"line_start":182,"line_end":182,"column_start":9,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29819,"byte_end":29833,"line_start":186,"line_end":186,"column_start":38,"column_end":52},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31017,"byte_end":31031,"line_start":225,"line_end":225,"column_start":46,"column_end":60},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33880,"byte_end":33894,"line_start":306,"line_end":306,"column_start":50,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34583,"byte_end":34597,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35711,"byte_end":35725,"line_start":354,"line_end":354,"column_start":68,"column_end":82},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35903,"byte_end":35917,"line_start":361,"line_end":361,"column_start":50,"column_end":64},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36103,"byte_end":36117,"line_start":368,"line_end":368,"column_start":74,"column_end":88},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36469,"byte_end":36486,"line_start":377,"line_end":377,"column_start":37,"column_end":54},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":303},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37430,"byte_end":37449,"line_start":403,"line_end":403,"column_start":9,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":307},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37532,"byte_end":37551,"line_start":407,"line_end":407,"column_start":65,"column_end":84},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40014,"byte_end":40033,"line_start":482,"line_end":482,"column_start":5,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41846,"byte_end":41865,"line_start":530,"line_end":530,"column_start":9,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":307},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42075,"byte_end":42094,"line_start":540,"line_end":540,"column_start":9,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":307},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42289,"byte_end":42308,"line_start":549,"line_end":549,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":307},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42532,"byte_end":42551,"line_start":557,"line_end":557,"column_start":9,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":307},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43567,"byte_end":43592,"line_start":585,"line_end":585,"column_start":9,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43679,"byte_end":43704,"line_start":590,"line_end":590,"column_start":5,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45576,"byte_end":45601,"line_start":647,"line_end":647,"column_start":5,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46574,"byte_end":46599,"line_start":669,"line_end":669,"column_start":9,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46795,"byte_end":46820,"line_start":679,"line_end":679,"column_start":9,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":47007,"byte_end":47032,"line_start":688,"line_end":688,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":47256,"byte_end":47281,"line_start":696,"line_end":696,"column_start":9,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49843,"byte_end":49852,"line_start":64,"line_end":64,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":433},"to":{"krate":0,"index":442}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51008,"byte_end":51017,"line_start":94,"line_end":94,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":433},"to":{"krate":0,"index":447}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51440,"byte_end":51449,"line_start":104,"line_end":104,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":433},"to":{"krate":0,"index":449}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52569,"byte_end":52578,"line_start":131,"line_end":131,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":433},"to":{"krate":0,"index":456}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52968,"byte_end":52986,"line_start":140,"line_end":140,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":456},"to":{"krate":0,"index":459}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52989,"byte_end":53003,"line_start":140,"line_end":140,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":449},"to":{"krate":0,"index":459}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53771,"byte_end":53780,"line_start":156,"line_end":156,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":433},"to":{"krate":0,"index":462}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54430,"byte_end":54446,"line_start":176,"line_end":176,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":462},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54449,"byte_end":54462,"line_start":176,"line_end":176,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55125,"byte_end":55141,"line_start":193,"line_end":193,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":462},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55144,"byte_end":55162,"line_start":193,"line_end":193,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":447},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55497,"byte_end":55513,"line_start":203,"line_end":203,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":462},"to":{"krate":0,"index":474}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55516,"byte_end":55530,"line_start":203,"line_end":203,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":449},"to":{"krate":0,"index":474}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57643,"byte_end":57649,"line_start":265,"line_end":265,"column_start":61,"column_end":67},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":479},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57726,"byte_end":57732,"line_start":266,"line_end":266,"column_start":68,"column_end":74},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":479},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57765,"byte_end":57771,"line_start":268,"line_end":268,"column_start":23,"column_end":29},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58522,"byte_end":58528,"line_start":297,"line_end":297,"column_start":31,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63173,"byte_end":63179,"line_start":434,"line_end":434,"column_start":35,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64518,"byte_end":64524,"line_start":468,"line_end":468,"column_start":36,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66846,"byte_end":66852,"line_start":530,"line_end":530,"column_start":40,"column_end":46},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68543,"byte_end":68549,"line_start":572,"line_end":572,"column_start":45,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70002,"byte_end":70008,"line_start":614,"line_end":614,"column_start":38,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71435,"byte_end":71441,"line_start":655,"line_end":655,"column_start":43,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72743,"byte_end":72749,"line_start":693,"line_end":693,"column_start":53,"column_end":59},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":479},"to":{"krate":1,"index":2033}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72890,"byte_end":72896,"line_start":700,"line_end":700,"column_start":35,"column_end":41},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":479},"to":{"krate":1,"index":1963}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73045,"byte_end":73051,"line_start":707,"line_end":707,"column_start":59,"column_end":65},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":479},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73341,"byte_end":73358,"line_start":713,"line_end":713,"column_start":37,"column_end":54},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":553},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74043,"byte_end":74058,"line_start":735,"line_end":735,"column_start":68,"column_end":83},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74117,"byte_end":74132,"line_start":737,"line_end":737,"column_start":45,"column_end":60},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76552,"byte_end":76567,"line_start":810,"line_end":810,"column_start":49,"column_end":64},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78400,"byte_end":78415,"line_start":856,"line_end":856,"column_start":55,"column_end":70},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78597,"byte_end":78612,"line_start":864,"line_end":864,"column_start":54,"column_end":69},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78786,"byte_end":78801,"line_start":871,"line_end":871,"column_start":73,"column_end":88},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79002,"byte_end":79017,"line_start":878,"line_end":878,"column_start":9,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79620,"byte_end":79636,"line_start":896,"line_end":896,"column_start":68,"column_end":84},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":611},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79695,"byte_end":79711,"line_start":898,"line_end":898,"column_start":45,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82111,"byte_end":82127,"line_start":969,"line_end":969,"column_start":54,"column_end":70},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82783,"byte_end":82799,"line_start":987,"line_end":987,"column_start":61,"column_end":77},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83503,"byte_end":83519,"line_start":1005,"line_end":1005,"column_start":49,"column_end":65},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85366,"byte_end":85382,"line_start":1051,"line_end":1051,"column_start":55,"column_end":71},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":611},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85568,"byte_end":85584,"line_start":1059,"line_end":1059,"column_start":58,"column_end":74},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":611},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85761,"byte_end":85777,"line_start":1066,"line_end":1066,"column_start":54,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":611},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85954,"byte_end":85970,"line_start":1073,"line_end":1073,"column_start":73,"column_end":89},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":611},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86171,"byte_end":86187,"line_start":1080,"line_end":1080,"column_start":9,"column_end":25},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":611},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86814,"byte_end":86839,"line_start":1099,"line_end":1099,"column_start":9,"column_end":34},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":680},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86906,"byte_end":86931,"line_start":1103,"line_end":1103,"column_start":52,"column_end":77},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88499,"byte_end":88524,"line_start":1152,"line_end":1152,"column_start":56,"column_end":81},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90400,"byte_end":90425,"line_start":1198,"line_end":1198,"column_start":61,"column_end":86},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91119,"byte_end":91144,"line_start":1217,"line_end":1217,"column_start":57,"column_end":82},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92541,"byte_end":92566,"line_start":1262,"line_end":1262,"column_start":62,"column_end":87},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":680},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92755,"byte_end":92780,"line_start":1270,"line_end":1270,"column_start":61,"column_end":86},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":680},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92969,"byte_end":92994,"line_start":1278,"line_end":1278,"column_start":9,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":680},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93202,"byte_end":93227,"line_start":1286,"line_end":1286,"column_start":9,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":680},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94135,"byte_end":94156,"line_start":1313,"line_end":1313,"column_start":68,"column_end":89},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94230,"byte_end":94251,"line_start":1314,"line_end":1314,"column_start":61,"column_end":82},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94342,"byte_end":94363,"line_start":1319,"line_end":1319,"column_start":45,"column_end":66},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96136,"byte_end":96157,"line_start":1371,"line_end":1371,"column_start":49,"column_end":70},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97127,"byte_end":97148,"line_start":1391,"line_end":1391,"column_start":55,"column_end":76},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97317,"byte_end":97338,"line_start":1399,"line_end":1399,"column_start":54,"column_end":75},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97509,"byte_end":97530,"line_start":1407,"line_end":1407,"column_start":9,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97731,"byte_end":97752,"line_start":1415,"line_end":1415,"column_start":9,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":6604}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98660,"byte_end":98682,"line_start":1443,"line_end":1443,"column_start":9,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":2057}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98757,"byte_end":98779,"line_start":1446,"line_end":1446,"column_start":61,"column_end":83},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98870,"byte_end":98892,"line_start":1451,"line_end":1451,"column_start":45,"column_end":67},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100704,"byte_end":100726,"line_start":1503,"line_end":1503,"column_start":54,"column_end":76},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101411,"byte_end":101433,"line_start":1523,"line_end":1523,"column_start":49,"column_end":71},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102407,"byte_end":102429,"line_start":1543,"line_end":1543,"column_start":55,"column_end":77},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":2242}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102602,"byte_end":102624,"line_start":1551,"line_end":1551,"column_start":58,"column_end":80},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":2255}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102788,"byte_end":102810,"line_start":1558,"line_end":1558,"column_start":54,"column_end":76},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":2266}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102984,"byte_end":103006,"line_start":1566,"line_end":1566,"column_start":9,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":6599}},{"span":{"file_name":"/home/thainguyen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":103207,"byte_end":103229,"line_start":1574,"line_end":1574,"column_start":9,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":6604}}]}