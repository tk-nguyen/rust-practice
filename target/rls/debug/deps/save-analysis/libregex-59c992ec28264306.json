{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6","program":"C:\\Users\\Thai Nguyen\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","regex","C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=59c992ec28264306","-C","extra-filename=-59c992ec28264306","--out-dir","c:\\Cygwin\\home\\Thai Nguyen\\rust\\rust-practice\\target\\rls\\debug\\deps","-L","dependency=c:\\Cygwin\\home\\Thai Nguyen\\rust\\rust-practice\\target\\rls\\debug\\deps","--extern","aho_corasick=c:\\Cygwin\\home\\Thai Nguyen\\rust\\rust-practice\\target\\rls\\debug\\deps\\libaho_corasick-526fcf7e532d1fab.rmeta","--extern","memchr=c:\\Cygwin\\home\\Thai Nguyen\\rust\\rust-practice\\target\\rls\\debug\\deps\\libmemchr-66cb03cd22d02f18.rmeta","--extern","regex_syntax=c:\\Cygwin\\home\\Thai Nguyen\\rust\\rust-practice\\target\\rls\\debug\\deps\\libregex_syntax-47d24a23ec2ca5ab.rmeta","--extern","thread_local=c:\\Cygwin\\home\\Thai Nguyen\\rust\\rust-practice\\target\\rls\\debug\\deps\\libthread_local-701f36acdea8ce04.rmeta","--extern","utf8_ranges=c:\\Cygwin\\home\\Thai Nguyen\\rust\\rust-practice\\target\\rls\\debug\\deps\\libutf8_ranges-55b696629f7ab3ba.rmeta","--cap-lints","allow","--cfg","regex_runtime_teddy_ssse3","--cfg","regex_runtime_teddy_avx2","--error-format=json","--sysroot","C:\\Users\\Thai Nguyen\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Cygwin\\home\\Thai Nguyen\\rust\\rust-practice\\target\\rls\\debug\\deps\\libregex-59c992ec28264306.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[950687170195861729,12891578103955992745]},"crate_root":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src","external_crates":[{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":13,"id":{"name":"aho_corasick","disambiguator":[11575776679634564624,12298896345507352024]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":14,"id":{"name":"memchr","disambiguator":[16478882294682851753,10096232480443865784]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":15,"id":{"name":"thread_local","disambiguator":[15915563341312461338,14697067960727442262]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":16,"id":{"name":"lazy_static","disambiguator":[10902275379685587202,6281516145621361565]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":17,"id":{"name":"regex_syntax","disambiguator":[2784672866910879160,3785268721466905014]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":18,"id":{"name":"ucd_util","disambiguator":[16340863040376351326,8010532472576285946]}},{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","num":19,"id":{"name":"utf8_ranges","disambiguator":[16641226046973396450,5394018787365826135]}}],"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1730},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18630,"byte_end":18635,"line_start":537,"line_end":537,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18758,"byte_end":18759,"line_start":541,"line_end":541,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18814,"byte_end":18815,"line_start":543,"line_end":543,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2541},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18899,"byte_end":18904,"line_start":547,"line_end":547,"column_start":5,"column_end":10},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2517},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18906,"byte_end":18911,"line_start":547,"line_end":547,"column_start":12,"column_end":17},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18913,"byte_end":18921,"line_start":547,"line_end":547,"column_start":19,"column_end":27},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18927,"byte_end":18939,"line_start":548,"line_end":548,"column_start":5,"column_end":17},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18941,"byte_end":18948,"line_start":548,"line_end":548,"column_start":19,"column_end":26},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18950,"byte_end":18964,"line_start":548,"line_end":548,"column_start":28,"column_end":42},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18966,"byte_end":18983,"line_start":548,"line_end":548,"column_start":44,"column_end":61},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2546},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18989,"byte_end":19005,"line_start":549,"line_end":549,"column_start":5,"column_end":21},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19007,"byte_end":19016,"line_start":549,"line_end":549,"column_start":23,"column_end":32},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19022,"byte_end":19030,"line_start":550,"line_end":550,"column_start":5,"column_end":13},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2553},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19032,"byte_end":19043,"line_start":550,"line_end":550,"column_start":15,"column_end":26},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1384},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19045,"byte_end":19053,"line_start":550,"line_end":550,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1385},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19045,"byte_end":19053,"line_start":550,"line_end":550,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19055,"byte_end":19060,"line_start":550,"line_end":550,"column_start":38,"column_end":43},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1273},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19062,"byte_end":19068,"line_start":550,"line_end":550,"column_start":45,"column_end":51},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19074,"byte_end":19080,"line_start":551,"line_end":551,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":22546,"byte_end":22547,"line_start":643,"line_end":643,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":22584,"byte_end":22585,"line_start":644,"line_end":644,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":22609,"byte_end":22610,"line_start":645,"line_end":645,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":22639,"byte_end":22640,"line_start":646,"line_end":646,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23230,"byte_end":23238,"line_start":678,"line_end":678,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23259,"byte_end":23263,"line_start":679,"line_end":679,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23265,"byte_end":23276,"line_start":679,"line_end":679,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23299,"byte_end":23303,"line_start":680,"line_end":680,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23305,"byte_end":23310,"line_start":680,"line_end":680,"column_start":27,"column_end":32},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":1877},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23312,"byte_end":23321,"line_start":680,"line_end":680,"column_start":34,"column_end":43},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23323,"byte_end":23330,"line_start":680,"line_end":680,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":1995},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23354,"byte_end":23369,"line_start":681,"line_end":681,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":2096},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23390,"byte_end":23397,"line_start":682,"line_end":682,"column_start":20,"column_end":27},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23399,"byte_end":23403,"line_start":682,"line_end":682,"column_start":29,"column_end":33},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":2161},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23405,"byte_end":23414,"line_start":682,"line_end":682,"column_start":35,"column_end":44},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1466}},{"kind":"Use","ref_id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23416,"byte_end":23426,"line_start":682,"line_end":682,"column_start":46,"column_end":56},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1466}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":2623},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":62},{"krate":0,"index":75},{"krate":0,"index":195},{"krate":0,"index":328},{"krate":0,"index":338},{"krate":0,"index":488},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":614},{"krate":0,"index":802},{"krate":0,"index":830},{"krate":0,"index":874},{"krate":0,"index":879},{"krate":0,"index":1105},{"krate":0,"index":1107},{"krate":0,"index":1165},{"krate":0,"index":1392},{"krate":0,"index":1411},{"krate":0,"index":1466}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"*\nThis crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.\n\nThis crate's documentation provides some simple examples, describes\n[Unicode support](#unicode) and exhaustively lists the\n[supported syntax](#syntax).\n\nFor more specific details on the API for regular expressions, please see the\ndocumentation for the [`Regex`](struct.Regex.html) type.\n\n# Usage\n\nThis crate is [on crates.io](https://crates.io/crates/regex) and can be\nused by adding `regex` to your dependencies in your project's `Cargo.toml`.\n\n```toml\n[dependencies]\nregex = \"1\"\n```\n\nand this to your crate root:\n\n```rust\nextern crate regex;\n```\n\n# Example: find a date\n\nGeneral use of regular expressions in this package involves compiling an\nexpression and then using it to search, split or replace text. For example,\nto confirm that some text resembles a date:\n\n```rust\nuse regex::Regex;\nlet re = Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\nassert!(re.is_match(\"2014-01-01\"));\n```\n\nNotice the use of the `^` and `$` anchors. In this crate, every expression\nis executed with an implicit `.*?` at the beginning and end, which allows\nit to match anywhere in the text. Anchors can be used to ensure that the\nfull text matches an expression.\n\nThis example also demonstrates the utility of\n[raw strings](https://doc.rust-lang.org/stable/reference/tokens.html#raw-string-literals)\nin Rust, which\nare just like regular strings except they are prefixed with an `r` and do\nnot process any escape sequences. For example, `\"\\\\d\"` is the same\nexpression as `r\"\\d\"`.\n\n# Example: Avoid compiling the same regex in a loop\n\nIt is an anti-pattern to compile the same regular expression in a loop\nsince compilation is typically expensive. (It takes anywhere from a few\nmicroseconds to a few **milliseconds** depending on the size of the\nregex.) Not only is compilation itself expensive, but this also prevents\noptimizations that reuse allocations internally to the matching engines.\n\nIn Rust, it can sometimes be a pain to pass regular expressions around if\nthey're used from inside a helper function. Instead, we recommend using the\n[`lazy_static`](https://crates.io/crates/lazy_static) crate to ensure that\nregular expressions are compiled exactly once.\n\nFor example:\n\n```rust\n#[macro_use] extern crate lazy_static;\nextern crate regex;\n\nuse regex::Regex;\n\nfn some_helper_function(text: &str) -> bool {\n    lazy_static! {\n        static ref RE: Regex = Regex::new(\"...\").unwrap();\n    }\n    RE.is_match(text)\n}\n\nfn main() {}\n```\n\nSpecifically, in this example, the regex will be compiled when it is used for\nthe first time. On subsequent uses, it will reuse the previous compilation.\n\n# Example: iterating over capture groups\n\nThis crate provides convenient iterators for matching an expression\nrepeatedly against a search string to find successive non-overlapping\nmatches. For example, to find all dates in a string and be able to access\nthem by their component pieces:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(\\d{4})-(\\d{2})-(\\d{2})\").unwrap();\nlet text = \"2012-03-14, 2013-01-01 and 2014-07-05\";\nfor cap in re.captures_iter(text) {\n    println!(\"Month: {} Day: {} Year: {}\", &cap[2], &cap[3], &cap[1]);\n}\n// Output:\n// Month: 03 Day: 14 Year: 2012\n// Month: 01 Day: 01 Year: 2013\n// Month: 07 Day: 05 Year: 2014\n# }\n```\n\nNotice that the year is in the capture group indexed at `1`. This is\nbecause the *entire match* is stored in the capture group at index `0`.\n\n# Example: replacement with named capture groups\n\nBuilding on the previous example, perhaps we'd like to rearrange the date\nformats. This can be done with text replacement. But to make the code\nclearer, we can *name*  our capture groups and use those names as variables\nin our replacement text:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?P<y>\\d{4})-(?P<m>\\d{2})-(?P<d>\\d{2})\").unwrap();\nlet before = \"2012-03-14, 2013-01-01 and 2014-07-05\";\nlet after = re.replace_all(before, \"$m/$d/$y\");\nassert_eq!(after, \"03/14/2012, 01/01/2013 and 07/05/2014\");\n# }\n```\n\nThe `replace` methods are actually polymorphic in the replacement, which\nprovides more flexibility than is seen here. (See the documentation for\n`Regex::replace` for more details.)\n\nNote that if your regex gets complicated, you can use the `x` flag to\nenable insignificant whitespace mode, which also lets you write comments:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?x)\n  (?P<y>\\d{4}) # the year\n  -\n  (?P<m>\\d{2}) # the month\n  -\n  (?P<d>\\d{2}) # the day\n\").unwrap();\nlet before = \"2012-03-14, 2013-01-01 and 2014-07-05\";\nlet after = re.replace_all(before, \"$m/$d/$y\");\nassert_eq!(after, \"03/14/2012, 01/01/2013 and 07/05/2014\");\n# }\n```\n\nIf you wish to match against whitespace in this mode, you can still use `\\s`,\n`\\n`, `\\t`, etc. For escaping a single space character, you can use its hex\ncharacter code `\\x20` or temporarily disable the `x` flag, e.g., `(?-x: )`.\n\n# Example: match multiple regular expressions simultaneously\n\nThis demonstrates how to use a `RegexSet` to match multiple (possibly\noverlapping) regular expressions in a single scan of the search text:\n\n```rust\nuse regex::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"\\w+\",\n    r\"\\d+\",\n    r\"\\pL+\",\n    r\"foo\",\n    r\"bar\",\n    r\"barfoo\",\n    r\"foobar\",\n]).unwrap();\n\n// Iterate over and collect all of the matches.\nlet matches: Vec<_> = set.matches(\"foobar\").into_iter().collect();\nassert_eq!(matches, vec![0, 2, 3, 4, 6]);\n\n// You can also test whether a particular regex matched:\nlet matches = set.matches(\"foobar\");\nassert!(!matches.matched(5));\nassert!(matches.matched(6));\n```\n\n# Pay for what you use\n\nWith respect to searching text with a regular expression, there are three\nquestions that can be asked:\n\n1. Does the text match this expression?\n2. If so, where does it match?\n3. Where did the capturing groups match?\n\nGenerally speaking, this crate could provide a function to answer only #3,\nwhich would subsume #1 and #2 automatically. However, it can be significantly\nmore expensive to compute the location of capturing group matches, so it's best\nnot to do it if you don't need to.\n\nTherefore, only use what you need. For example, don't use `find` if you\nonly need to test if an expression matches a string. (Use `is_match`\ninstead.)\n\n# Unicode\n\nThis implementation executes regular expressions **only** on valid UTF-8\nwhile exposing match locations as byte indices into the search string.\n\nOnly simple case folding is supported. Namely, when matching\ncase-insensitively, the characters are first mapped using the \"simple\" case\nfolding rules defined by Unicode.\n\nRegular expressions themselves are **only** interpreted as a sequence of\nUnicode scalar values. This means you can use Unicode characters directly\nin your expression:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?i)Δ+\").unwrap();\nlet mat = re.find(\"ΔδΔ\").unwrap();\nassert_eq!((mat.start(), mat.end()), (0, 6));\n# }\n```\n\nMost features of the regular expressions in this crate are Unicode aware. Here\nare some examples:\n\n* `.` will match any valid UTF-8 encoded Unicode scalar value except for `\\n`.\n  (To also match `\\n`, enable the `s` flag, e.g., `(?s:.)`.)\n* `\\w`, `\\d` and `\\s` are Unicode aware. For example, `\\s` will match all forms\n  of whitespace categorized by Unicode.\n* `\\b` matches a Unicode word boundary.\n* Negated character classes like `[^a]` match all Unicode scalar values except\n  for `a`.\n* `^` and `$` are **not** Unicode aware in multi-line mode. Namely, they only\n  recognize `\\n` and not any of the other forms of line terminators defined\n  by Unicode.\n\nUnicode general categories, scripts, script extensions, ages and a smattering\nof boolean properties are available as character classes. For example, you can\nmatch a sequence of numerals, Greek or Cherokee letters:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"[\\pN\\p{Greek}\\p{Cherokee}]+\").unwrap();\nlet mat = re.find(\"abcΔᎠβⅠᏴγδⅡxyz\").unwrap();\nassert_eq!((mat.start(), mat.end()), (3, 23));\n# }\n```\n\nFor a more detailed breakdown of Unicode support with respect to\n[UTS#18](http://unicode.org/reports/tr18/),\nplease see the\n[UNICODE](https://github.com/rust-lang/regex/blob/master/UNICODE.md)\ndocument in the root of the regex repository.\n\n# Opt out of Unicode support\n\nThe `bytes` sub-module provides a `Regex` type that can be used to match\non `&[u8]`. By default, text is interpreted as UTF-8 just like it is with\nthe main `Regex` type. However, this behavior can be disabled by turning\noff the `u` flag, even if doing so could result in matching invalid UTF-8.\nFor example, when the `u` flag is disabled, `.` will match any byte instead\nof any Unicode scalar value.\n\nDisabling the `u` flag is also possible with the standard `&str`-based `Regex`\ntype, but it is only allowed where the UTF-8 invariant is maintained. For\nexample, `(?-u:\\w)` is an ASCII-only `\\w` character class and is legal in an\n`&str`-based `Regex`, but `(?-u:\\xFF)` will attempt to match the raw byte\n`\\xFF`, which is invalid UTF-8 and therefore is illegal in `&str`-based\nregexes.\n\n# Syntax\n\nThe syntax supported in this crate is documented below.\n\nNote that the regular expression parser and abstract syntax are exposed in\na separate crate, [`regex-syntax`](https://docs.rs/regex-syntax).\n\n## Matching one character\n\n<pre class=\"rust\">\n.             any character except new line (includes new line with s flag)\n\\d            digit (\\p{Nd})\n\\D            not digit\n\\pN           One-letter name Unicode character class\n\\p{Greek}     Unicode character class (general category or script)\n\\PN           Negated one-letter name Unicode character class\n\\P{Greek}     negated Unicode character class (general category or script)\n</pre>\n\n### Character classes\n\n<pre class=\"rust\">\n[xyz]         A character class matching either x, y or z (union).\n[^xyz]        A character class matching any character except x, y and z.\n[a-z]         A character class matching any character in range a-z.\n[[:alpha:]]   ASCII character class ([A-Za-z])\n[[:^alpha:]]  Negated ASCII character class ([^A-Za-z])\n[x[^xyz]]     Nested/grouping character class (matching any character except y and z)\n[a-y&&xyz]    Intersection (matching x or y)\n[0-9&&[^4]]   Subtraction using intersection and negation (matching 0-9 except 4)\n[0-9--4]      Direct subtraction (matching 0-9 except 4)\n[a-g~~b-h]    Symmetric difference (matching `a` and `h` only)\n[\\[\\]]        Escaping in character classes (matching [ or ])\n</pre>\n\nAny named character class may appear inside a bracketed `[...]` character\nclass. For example, `[\\p{Greek}[:digit:]]` matches any Greek or ASCII\ndigit. `[\\p{Greek}&&\\pL]` matches Greek letters.\n\nPrecedence in character classes, from most binding to least:\n\n1. Ranges: `a-cd` == `[a-c]d`\n2. Union: `ab&&bc` == `[ab]&&[bc]`\n3. Intersection: `^a-z&&b` == `^[a-z&&b]`\n4. Negation\n\n## Composites\n\n<pre class=\"rust\">\nxy    concatenation (x followed by y)\nx|y   alternation (x or y, prefer x)\n</pre>\n\n## Repetitions\n\n<pre class=\"rust\">\nx*        zero or more of x (greedy)\nx+        one or more of x (greedy)\nx?        zero or one of x (greedy)\nx*?       zero or more of x (ungreedy/lazy)\nx+?       one or more of x (ungreedy/lazy)\nx??       zero or one of x (ungreedy/lazy)\nx{n,m}    at least n x and at most m x (greedy)\nx{n,}     at least n x (greedy)\nx{n}      exactly n x\nx{n,m}?   at least n x and at most m x (ungreedy/lazy)\nx{n,}?    at least n x (ungreedy/lazy)\nx{n}?     exactly n x\n</pre>\n\n## Empty matches\n\n<pre class=\"rust\">\n^     the beginning of text (or start-of-line with multi-line mode)\n$     the end of text (or end-of-line with multi-line mode)\n\\A    only the beginning of text (even with multi-line mode enabled)\n\\z    only the end of text (even with multi-line mode enabled)\n\\b    a Unicode word boundary (\\w on one side and \\W, \\A, or \\z on other)\n\\B    not a Unicode word boundary\n</pre>\n\n## Grouping and flags\n\n<pre class=\"rust\">\n(exp)          numbered capture group (indexed by opening parenthesis)\n(?P&lt;name&gt;exp)  named (also numbered) capture group (allowed chars: [_0-9a-zA-Z])\n(?:exp)        non-capturing group\n(?flags)       set flags within current group\n(?flags:exp)   set flags for exp (non-capturing)\n</pre>\n\nFlags are each a single character. For example, `(?x)` sets the flag `x`\nand `(?-x)` clears the flag `x`. Multiple flags can be set or cleared at\nthe same time: `(?xy)` sets both the `x` and `y` flags and `(?x-y)` sets\nthe `x` flag and clears the `y` flag.\n\nAll flags are by default disabled unless stated otherwise. They are:\n\n<pre class=\"rust\">\ni     case-insensitive: letters match both upper and lower case\nm     multi-line mode: ^ and $ match begin/end of line\ns     allow . to match \\n\nU     swap the meaning of x* and x*?\nu     Unicode support (enabled by default)\nx     ignore whitespace and allow line comments (starting with `#`)\n</pre>\n\nFlags can be toggled within a pattern. Here's an example that matches\ncase-insensitively for the first part but case-sensitively for the second part:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?i)a+(?-i)b+\").unwrap();\nlet cap = re.captures(\"AaAaAbbBBBb\").unwrap();\nassert_eq!(&cap[0], \"AaAaAbb\");\n# }\n```\n\nNotice that the `a+` matches either `a` or `A`, but the `b+` only matches\n`b`.\n\nMulti-line mode means `^` and `$` no longer match just at the beginning/end of\nthe input, but at the beginning/end of lines:\n\n```\n# use regex::Regex;\nlet re = Regex::new(r\"(?m)^line \\d+\").unwrap();\nlet m = re.find(\"line one\\nline 2\\n\").unwrap();\nassert_eq!(m.as_str(), \"line 2\");\n```\n\nNote that `^` matches after new lines, even at the end of input:\n\n```\n# use regex::Regex;\nlet re = Regex::new(r\"(?m)^\").unwrap();\nlet m = re.find_iter(\"test\\n\").last().unwrap();\nassert_eq!((m.start(), m.end()), (5, 5));\n```\n\nHere is an example that uses an ASCII word boundary instead of a Unicode\nword boundary:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?-u:\\b).+(?-u:\\b)\").unwrap();\nlet cap = re.captures(\"$$abc$$\").unwrap();\nassert_eq!(&cap[0], \"abc\");\n# }\n```\n\n## Escape sequences\n\n<pre class=\"rust\">\n\\*          literal *, works for any punctuation character: \\.+*?()|[]{}^$\n\\a          bell (\\x07)\n\\f          form feed (\\x0C)\n\\t          horizontal tab\n\\n          new line\n\\r          carriage return\n\\v          vertical tab (\\x0B)\n\\123        octal character code (up to three digits) (when enabled)\n\\x7F        hex character code (exactly two digits)\n\\x{10FFFF}  any hex character code corresponding to a Unicode code point\n\\u007F      hex character code (exactly four digits)\n\\u{7F}      any hex character code corresponding to a Unicode code point\n\\U0000007F  hex character code (exactly eight digits)\n\\U{7F}      any hex character code corresponding to a Unicode code point\n</pre>\n\n## Perl character classes (Unicode friendly)\n\nThese classes are based on the definitions provided in\n[UTS#18](http://www.unicode.org/reports/tr18/#Compatibility_Properties):\n\n<pre class=\"rust\">\n\\d     digit (\\p{Nd})\n\\D     not digit\n\\s     whitespace (\\p{White_Space})\n\\S     not whitespace\n\\w     word character (\\p{Alphabetic} + \\p{M} + \\d + \\p{Pc} + \\p{Join_Control})\n\\W     not word character\n</pre>\n\n## ASCII character classes\n\n<pre class=\"rust\">\n[[:alnum:]]    alphanumeric ([0-9A-Za-z])\n[[:alpha:]]    alphabetic ([A-Za-z])\n[[:ascii:]]    ASCII ([\\x00-\\x7F])\n[[:blank:]]    blank ([\\t ])\n[[:cntrl:]]    control ([\\x00-\\x1F\\x7F])\n[[:digit:]]    digits ([0-9])\n[[:graph:]]    graphical ([!-~])\n[[:lower:]]    lower case ([a-z])\n[[:print:]]    printable ([ -~])\n[[:punct:]]    punctuation ([!-/:-@\\[-`{-~])\n[[:space:]]    whitespace ([\\t\\n\\v\\f\\r ])\n[[:upper:]]    upper case ([A-Z])\n[[:word:]]     word characters ([0-9A-Za-z_])\n[[:xdigit:]]   hex digit ([0-9A-Fa-f])\n</pre>\n\n# Untrusted input\n\nThis crate can handle both untrusted regular expressions and untrusted\nsearch text.\n\nUntrusted regular expressions are handled by capping the size of a compiled\nregular expression.\n(See [`RegexBuilder::size_limit`](struct.RegexBuilder.html#method.size_limit).)\nWithout this, it would be trivial for an attacker to exhaust your system's\nmemory with expressions like `a{100}{100}{100}`.\n\nUntrusted search text is allowed because the matching engine(s) in this\ncrate have time complexity `O(mn)` (with `m ~ regex` and `n ~ search\ntext`), which means there's no way to cause exponential blow-up like with\nsome other regular expression engines. (We pay for this by disallowing\nfeatures like arbitrary look-ahead and backreferences.)\n\nWhen a DFA is used, pathological cases with exponential state blow-up are\navoided by constructing the DFA lazily or in an \"online\" manner. Therefore,\nat most one new state can be created for each byte of input. This satisfies\nour time complexity guarantees, but can lead to memory growth\nproportional to the size of the input. As a stopgap, the DFA is only\nallowed to store a fixed number of states. When the limit is reached, its\nstates are wiped and continues on, possibly duplicating previous work. If\nthe limit is reached too frequently, it gives up and hands control off to\nanother matching engine with fixed memory requirements.\n(The DFA size limit can also be tweaked. See\n[`RegexBuilder::dfa_size_limit`](struct.RegexBuilder.html#method.dfa_size_limit).)\n*/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":472,"byte_end":18171,"line_start":11,"line_end":518,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":18173,"byte_end":18195,"line_start":520,"line_end":520,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":22507,"byte_end":22512,"line_start":642,"line_end":642,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"*\nMatch regular expressions on arbitrary bytes.\n\nThis module provides a nearly identical API to the one found in the\ntop-level of this crate. There are two important differences:\n\n1. Matching is done on `&[u8]` instead of `&str`. Additionally, `Vec<u8>`\nis used where `String` would have been used.\n2. Unicode support can be disabled even when disabling it would result in\nmatching invalid UTF-8 bytes.\n\n# Example: match null terminated string\n\nThis shows how to find all null-terminated strings in a slice of bytes:\n\n```rust\n# use regex::bytes::Regex;\nlet re = Regex::new(r\"(?-u)(?P<cstr>[^\\x00]+)\\x00\").unwrap();\nlet text = b\"foo\\x00bar\\x00baz\\x00\";\n\n// Extract all of the strings without the null terminator from each match.\n// The unwrap is OK here since a match requires the `cstr` capture to match.\nlet cstrs: Vec<&[u8]> =\n    re.captures_iter(text)\n      .map(|c| c.name(\"cstr\").unwrap().as_bytes())\n      .collect();\nassert_eq!(vec![&b\"foo\"[..], &b\"bar\"[..], &b\"baz\"[..]], cstrs);\n```\n\n# Example: selectively enable Unicode support\n\nThis shows how to match an arbitrary byte pattern followed by a UTF-8 encoded\nstring (e.g., to extract a title from a Matroska file):\n\n```rust\n# use std::str;\n# use regex::bytes::Regex;\nlet re = Regex::new(\n    r\"(?-u)\\x7b\\xa9(?:[\\x80-\\xfe]|[\\x40-\\xff].)(?u:(.*))\"\n).unwrap();\nlet text = b\"\\x12\\xd0\\x3b\\x5f\\x7b\\xa9\\x85\\xe2\\x98\\x83\\x80\\x98\\x54\\x76\\x68\\x65\";\nlet caps = re.captures(text).unwrap();\n\n// Notice that despite the `.*` at the end, it will only match valid UTF-8\n// because Unicode mode was enabled with the `u` flag. Without the `u` flag,\n// the `.*` would match the rest of the bytes.\nlet mat = caps.get(1).unwrap();\nassert_eq!((7, 10), (mat.start(), mat.end()));\n\n// If there was a match, Unicode mode guarantees that `title` is valid UTF-8.\nlet title = str::from_utf8(&caps[1]).unwrap();\nassert_eq!(\"☃\", title);\n```\n\nIn general, if the Unicode flag is enabled in a capture group and that capture\nis part of the overall match, then the capture is *guaranteed* to be valid\nUTF-8.\n\n# Syntax\n\nThe supported syntax is pretty much the same as the syntax for Unicode\nregular expressions with a few changes that make sense for matching arbitrary\nbytes:\n\n1. The `u` flag can be disabled even when disabling it might cause the regex to\nmatch invalid UTF-8. When the `u` flag is disabled, the regex is said to be in\n\"ASCII compatible\" mode.\n2. In ASCII compatible mode, neither Unicode scalar values nor Unicode\ncharacter classes are allowed.\n3. In ASCII compatible mode, Perl character classes (`\\w`, `\\d` and `\\s`)\nrevert to their typical ASCII definition. `\\w` maps to `[[:word:]]`, `\\d` maps\nto `[[:digit:]]` and `\\s` maps to `[[:space:]]`.\n4. In ASCII compatible mode, word boundaries use the ASCII compatible `\\w` to\ndetermine whether a byte is a word byte or not.\n5. Hexadecimal notation can be used to specify arbitrary bytes instead of\nUnicode codepoints. For example, in ASCII compatible mode, `\\xFF` matches the\nliteral byte `\\xFF`, while in Unicode mode, `\\xFF` is a Unicode codepoint that\nmatches its UTF-8 encoding of `\\xC3\\xBF`. Similarly for octal notation when\nenabled.\n6. `.` matches any *byte* except for `\\n` instead of any Unicode scalar value.\nWhen the `s` flag is enabled, `.` matches any byte.\n\n# Performance\n\nIn general, one should expect performance on `&[u8]` to be roughly similar to\nperformance on `&str`.\n*/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":19086,"byte_end":22470,"line_start":554,"line_end":640,"column_start":1,"column_end":3}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":22471,"byte_end":22498,"line_start":641,"line_end":641,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44324,"byte_end":44332,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[{"value":"/ A compiler translates a regular expression AST to a sequence of","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44179,"byte_end":44246,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ instructions. The sequence of instructions represents an NFA.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44247,"byte_end":44312,"line_start":36,"line_end":36,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44743,"byte_end":44746,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[{"value":"/ Create a new regular expression compiler.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44600,"byte_end":44645,"line_start":49,"line_end":49,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44650,"byte_end":44653,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Various options can be set before calling `compile` on an expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44658,"byte_end":44731,"line_start":51,"line_end":51,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45341,"byte_end":45351,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"pub fn size_limit(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[{"value":"/ The size of the resulting program is limited by size_limit. If","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45138,"byte_end":45204,"line_start":65,"line_end":65,"column_start":5,"column_end":71}},{"value":"/ the program approximately exceeds the given size (in bytes), then","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45209,"byte_end":45278,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ compilation will stop and return an error.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45283,"byte_end":45329,"line_start":67,"line_end":67,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46096,"byte_end":46101,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"pub fn bytes(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[{"value":"/ If bytes is true, then the program is compiled as a byte based","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45453,"byte_end":45519,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/ automaton, which incorporates UTF-8 decoding into the machine. If it's","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45524,"byte_end":45598,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ false, then the automaton is Unicode scalar value based, e.g., an","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45603,"byte_end":45672,"line_start":75,"line_end":75,"column_start":5,"column_end":74}},{"value":"/ engine utilizing such an automaton is responsible for UTF-8 decoding.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45677,"byte_end":45750,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45755,"byte_end":45758,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ The specific invariant is that when returning a byte based machine,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45763,"byte_end":45834,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ the neither the `Char` nor `Ranges` instructions are produced.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45839,"byte_end":45905,"line_start":79,"line_end":79,"column_start":5,"column_end":71}},{"value":"/ Conversely, when producing a Unicode scalar value machine, the `Bytes`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45910,"byte_end":45984,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/ instruction is never produced.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":45989,"byte_end":46023,"line_start":81,"line_end":81,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46028,"byte_end":46031,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Note that `dfa(true)` implies `bytes(true)`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46036,"byte_end":46084,"line_start":83,"line_end":83,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46384,"byte_end":46393,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"pub fn only_utf8(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[{"value":"/ When disabled, the program compiled may match arbitrary bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46195,"byte_end":46261,"line_start":89,"line_end":89,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46266,"byte_end":46269,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ When enabled (the default), all compiled programs exclusively match","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46274,"byte_end":46345,"line_start":91,"line_end":91,"column_start":5,"column_end":76}},{"value":"/ valid UTF-8 bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46350,"byte_end":46372,"line_start":92,"line_end":92,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46876,"byte_end":46879,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"pub fn dfa(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[{"value":"/ When set, the machine returned is suitable for use in the DFA matching","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46488,"byte_end":46562,"line_start":98,"line_end":98,"column_start":5,"column_end":79}},{"value":"/ engine.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46567,"byte_end":46578,"line_start":99,"line_end":99,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46583,"byte_end":46586,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ In particular, this ensures that if the regex is not anchored in the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46591,"byte_end":46663,"line_start":101,"line_end":101,"column_start":5,"column_end":77}},{"value":"/ beginning, then a preceding `.*?` is included in the program. (The NFA","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46668,"byte_end":46742,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/ based engines handle the preceding `.*?` explicitly, which is difficult","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46747,"byte_end":46822,"line_start":103,"line_end":103,"column_start":5,"column_end":80}},{"value":"/ or impossible in the DFA engine.)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46827,"byte_end":46864,"line_start":104,"line_end":104,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":47114,"byte_end":47121,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"pub fn reverse(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[{"value":"/ When set, the machine returned is suitable for matching text in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":46971,"byte_end":47038,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ reverse. In particular, all concatenations are flipped.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":47043,"byte_end":47102,"line_start":111,"line_end":111,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":47475,"byte_end":47482,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"pub fn compile(Self, &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[{"value":"/ Compile a regular expression given its AST.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":47217,"byte_end":47264,"line_start":117,"line_end":117,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":47269,"byte_end":47272,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ The compiler is guaranteed to succeed unless the program exceeds the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":47277,"byte_end":47349,"line_start":119,"line_end":119,"column_start":5,"column_end":77}},{"value":"/ specified size limit. If the size limit is exceeded, then compilation","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":47354,"byte_end":47427,"line_start":120,"line_end":120,"column_start":5,"column_end":78}},{"value":"/ stops and returns an error.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":47432,"byte_end":47463,"line_start":121,"line_end":121,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159496,"byte_end":159502,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[{"value":"/ A syntax error.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159472,"byte_end":159491,"line_start":17,"line_end":17,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1734},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159622,"byte_end":159636,"line_start":21,"line_end":21,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[{"value":"/ The compiled program exceeded the set size limit.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159516,"byte_end":159569,"line_start":19,"line_end":19,"column_start":5,"column_end":58}},{"value":"/ The argument is the size limit imposed.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159574,"byte_end":159617,"line_start":20,"line_end":20,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1737},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159923,"byte_end":159938,"line_start":28,"line_end":28,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159649,"byte_end":159703,"line_start":22,"line_end":22,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159708,"byte_end":159711,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159716,"byte_end":159786,"line_start":24,"line_end":24,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159791,"byte_end":159863,"line_start":25,"line_end":25,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159868,"byte_end":159899,"line_start":26,"line_end":26,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1730},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159460,"byte_end":159465,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error {\n\n    /// A syntax error.\n    Syntax(String),\n\n    /// The compiled program exceeded the set size limit.\n    /// The argument is the size limit imposed.\n    CompiledTooBig(usize),\n\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1731},{"krate":0,"index":1734},{"krate":0,"index":1737}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[{"value":"/ An error that occurred during parsing or compiling a regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159346,"byte_end":159422,"line_start":14,"line_end":14,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":162995,"byte_end":162999,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[{"value":"/ `Exec` manages the execution of a regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":162744,"byte_end":162801,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":162802,"byte_end":162805,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ In particular, this manages the various compiled forms of a single regular","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":162806,"byte_end":162884,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ expression and the choice of which matching engine to use to execute a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":162885,"byte_end":162959,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":162960,"byte_end":162983,"line_start":40,"line_end":40,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1745},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":163370,"byte_end":163380,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1747},{"krate":0,"index":1748}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[{"value":"/ `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":163154,"byte_end":163232,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/ means it is no longer Sync, but we can now avoid the overhead of","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":163233,"byte_end":163301,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ synchronization to fetch the cache.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":163302,"byte_end":163341,"line_start":50,"line_end":50,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":163619,"byte_end":163632,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[{"value":"/ `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":163528,"byte_end":163607,"line_start":59,"line_end":59,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":165869,"byte_end":165880,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[{"value":"/ Facilitates the construction of an executor by exposing various knobs","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":165690,"byte_end":165763,"line_start":104,"line_end":104,"column_start":1,"column_end":74}},{"value":"/ to control how a regex is executed and what kinds of resources it's","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":165764,"byte_end":165835,"line_start":105,"line_end":105,"column_start":1,"column_end":72}},{"value":"/ permitted to use.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":165836,"byte_end":165857,"line_start":106,"line_end":106,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166481,"byte_end":166484,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"pub fn new(&str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[{"value":"/ Create a regex execution builder.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166205,"byte_end":166242,"line_start":124,"line_end":124,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166247,"byte_end":166250,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This uses default settings for everything except the regex itself,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166255,"byte_end":166325,"line_start":126,"line_end":126,"column_start":5,"column_end":75}},{"value":"/ which must be provided. Further knobs can be set by calling methods,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166330,"byte_end":166402,"line_start":127,"line_end":127,"column_start":5,"column_end":77}},{"value":"/ and then finally, `build` to actually create the executor.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166407,"byte_end":166469,"line_start":128,"line_end":128,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166810,"byte_end":166818,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"pub fn new_many<I, S>(I) -> Self where S: AsRef<str>, I: IntoIterator<Item =\nS>","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[{"value":"/ Like new, but compiles the union of the given regular expressions.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166546,"byte_end":166616,"line_start":133,"line_end":133,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166621,"byte_end":166624,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Note that when compiling 2 or more regular expressions, capture groups","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166629,"byte_end":166703,"line_start":135,"line_end":135,"column_start":5,"column_end":79}},{"value":"/ are completely unsupported. (This means both `find` and `captures`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166708,"byte_end":166778,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ wont work.)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166783,"byte_end":166798,"line_start":137,"line_end":137,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167118,"byte_end":167129,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"pub fn new_options(RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[{"value":"/ Create a regex execution builder.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167069,"byte_end":167106,"line_start":145,"line_end":145,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167627,"byte_end":167636,"line_start":162,"line_end":162,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"pub fn automatic(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[{"value":"/ Set the matching engine to be automatically determined.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167315,"byte_end":167374,"line_start":155,"line_end":155,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167379,"byte_end":167382,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This is the default state and will apply whatever optimizations are","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167387,"byte_end":167458,"line_start":157,"line_end":157,"column_start":5,"column_end":76}},{"value":"/ possible, such as running a DFA.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167463,"byte_end":167499,"line_start":158,"line_end":158,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167504,"byte_end":167507,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This overrides whatever was previously set via the `nfa` or","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167512,"byte_end":167575,"line_start":160,"line_end":160,"column_start":5,"column_end":68}},{"value":"/ `bounded_backtracking` methods.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167580,"byte_end":167615,"line_start":161,"line_end":161,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167951,"byte_end":167954,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"pub fn nfa(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[{"value":"/ Sets the matching engine to use the NFA algorithm no matter what","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167713,"byte_end":167781,"line_start":167,"line_end":167,"column_start":5,"column_end":73}},{"value":"/ optimizations are possible.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167786,"byte_end":167817,"line_start":168,"line_end":168,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167822,"byte_end":167825,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ This overrides whatever was previously set via the `automatic` or","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167830,"byte_end":167899,"line_start":170,"line_end":170,"column_start":5,"column_end":74}},{"value":"/ `bounded_backtracking` methods.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":167904,"byte_end":167939,"line_start":171,"line_end":171,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168445,"byte_end":168465,"line_start":185,"line_end":185,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"pub fn bounded_backtracking(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[{"value":"/ Sets the matching engine to use a bounded backtracking engine no","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168069,"byte_end":168137,"line_start":177,"line_end":177,"column_start":5,"column_end":73}},{"value":"/ matter what optimizations are possible.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168142,"byte_end":168185,"line_start":178,"line_end":178,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168190,"byte_end":168193,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ One must use this with care, since the bounded backtracking engine","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168198,"byte_end":168268,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ uses memory proportion to `len(regex) * len(text)`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168273,"byte_end":168328,"line_start":181,"line_end":181,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168333,"byte_end":168336,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This overrides whatever was previously set via the `automatic` or","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168341,"byte_end":168410,"line_start":183,"line_end":183,"column_start":5,"column_end":74}},{"value":"/ `nfa` methods.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168415,"byte_end":168433,"line_start":184,"line_end":184,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169033,"byte_end":169038,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"pub fn bytes(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[{"value":"/ Compiles byte based programs for use with the NFA matching engines.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168583,"byte_end":168654,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168659,"byte_end":168662,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ By default, the NFA engines match on Unicode scalar values. They can","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168667,"byte_end":168739,"line_start":192,"line_end":192,"column_start":5,"column_end":77}},{"value":"/ be made to use byte based programs instead. In general, the byte based","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168744,"byte_end":168818,"line_start":193,"line_end":193,"column_start":5,"column_end":79}},{"value":"/ programs are slower because of a less efficient encoding of character","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168823,"byte_end":168896,"line_start":194,"line_end":194,"column_start":5,"column_end":78}},{"value":"/ classes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168901,"byte_end":168913,"line_start":195,"line_end":195,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168918,"byte_end":168921,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Note that this does not impact DFA matching engines, which always","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":168926,"byte_end":168995,"line_start":197,"line_end":197,"column_start":5,"column_end":74}},{"value":"/ execute on bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169000,"byte_end":169021,"line_start":198,"line_end":198,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169309,"byte_end":169318,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"pub fn only_utf8(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[{"value":"/ When disabled, the program compiled may match arbitrary bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169120,"byte_end":169186,"line_start":204,"line_end":204,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169191,"byte_end":169194,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ When enabled (the default), all compiled programs exclusively match","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169199,"byte_end":169270,"line_start":206,"line_end":206,"column_start":5,"column_end":76}},{"value":"/ valid UTF-8 bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169275,"byte_end":169297,"line_start":207,"line_end":207,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169441,"byte_end":169448,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"pub fn unicode(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[{"value":"/ Set the Unicode flag.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":169404,"byte_end":169429,"line_start":213,"line_end":213,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":172557,"byte_end":172562,"line_start":290,"line_end":290,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"pub fn build(Self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[{"value":"/ Build an executor that can run a regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":172489,"byte_end":172545,"line_start":289,"line_end":289,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":199023,"byte_end":199038,"line_start":1062,"line_end":1062,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"pub fn many_matches_at(&Self, &mut [bool], &[u8], usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[{"value":"/ Finds which regular expressions match the given text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":198747,"byte_end":198804,"line_start":1055,"line_end":1055,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":198809,"byte_end":198812,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ `matches` should have length equal to the number of regexes being","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":198817,"byte_end":198886,"line_start":1057,"line_end":1057,"column_start":5,"column_end":74}},{"value":"/ searched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":198891,"byte_end":198904,"line_start":1058,"line_end":1058,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":198909,"byte_end":198912,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ This is only useful when one wants to know which regexes in a set","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":198917,"byte_end":198986,"line_start":1060,"line_end":1060,"column_start":5,"column_end":74}},{"value":"/ match some text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":198991,"byte_end":199011,"line_start":1061,"line_end":1061,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":200887,"byte_end":200903,"line_start":1120,"line_end":1120,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"pub fn capture_name_idx(&Self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201032,"byte_end":201048,"line_start":1126,"line_end":1126,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"pub fn capture_name_idx(&Self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201247,"byte_end":201255,"line_start":1134,"line_end":1134,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"pub fn searcher(&Self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"/ Get a searcher that isn't Sync.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201149,"byte_end":201184,"line_start":1132,"line_end":1132,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201189,"byte_end":201206,"line_start":1133,"line_end":1133,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201670,"byte_end":201682,"line_start":1146,"line_end":1146,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"pub fn searcher_str(&Self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"/ Get a searcher that isn't Sync and can match on &str.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201550,"byte_end":201607,"line_start":1144,"line_end":1144,"column_start":5,"column_end":62}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201612,"byte_end":201629,"line_start":1145,"line_end":1145,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201808,"byte_end":201818,"line_start":1151,"line_end":1151,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"pub fn into_regex(Self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[{"value":"/ Build a Regex from this executor.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201759,"byte_end":201796,"line_start":1150,"line_end":1150,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201949,"byte_end":201963,"line_start":1156,"line_end":1156,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"pub fn into_regex_set(Self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[{"value":"/ Build a RegexSet from this executor.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201897,"byte_end":201937,"line_start":1155,"line_end":1155,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202138,"byte_end":202153,"line_start":1161,"line_end":1161,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"pub fn into_byte_regex(Self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[{"value":"/ Build a Regex from this executor that can match arbitrary bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202058,"byte_end":202126,"line_start":1160,"line_end":1160,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202311,"byte_end":202330,"line_start":1166,"line_end":1166,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"pub fn into_byte_regex_set(Self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[{"value":"/ Build a RegexSet from this executor that can match arbitrary bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202228,"byte_end":202299,"line_start":1165,"line_end":1165,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202517,"byte_end":202530,"line_start":1172,"line_end":1172,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"pub fn regex_strings(&Self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[{"value":"/ The original regular expressions given by the caller that were","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202421,"byte_end":202487,"line_start":1170,"line_end":1170,"column_start":5,"column_end":71}},{"value":"/ compiled.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202492,"byte_end":202505,"line_start":1171,"line_end":1171,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202687,"byte_end":202700,"line_start":1179,"line_end":1179,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"pub fn capture_names(&Self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[{"value":"/ Return a slice of capture names.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202585,"byte_end":202621,"line_start":1176,"line_end":1176,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202626,"byte_end":202629,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ Any capture that isn't named is None.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202634,"byte_end":202675,"line_start":1178,"line_end":1178,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202875,"byte_end":202891,"line_start":1185,"line_end":1185,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"pub fn capture_name_idx(&Self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[{"value":"/ Return a reference to named groups mapping (from group name to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202772,"byte_end":202838,"line_start":1183,"line_end":1183,"column_start":5,"column_end":71}},{"value":"/ group position).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202843,"byte_end":202863,"line_start":1184,"line_end":1184,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224347,"byte_end":224354,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[{"value":"/ Represents a location in the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224266,"byte_end":224305,"line_start":23,"line_end":23,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224526,"byte_end":224534,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"pub fn is_start(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[{"value":"/ Returns true iff this position is at the beginning of the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224446,"byte_end":224514,"line_start":33,"line_end":33,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224661,"byte_end":224667,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"pub fn is_end(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[{"value":"/ Returns true iff this position is past the end of the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224585,"byte_end":224649,"line_start":38,"line_end":38,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224913,"byte_end":224917,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"pub fn char(&Self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[{"value":"/ Returns the character at this position.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224744,"byte_end":224787,"line_start":43,"line_end":43,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224792,"byte_end":224795,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ If this position is just before or after the input, then an absent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224800,"byte_end":224870,"line_start":45,"line_end":45,"column_start":5,"column_end":75}},{"value":"/ character is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224875,"byte_end":224901,"line_start":46,"line_end":46,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225011,"byte_end":225015,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"pub fn byte(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[{"value":"/ Returns the byte at this position.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224961,"byte_end":224999,"line_start":51,"line_end":51,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225142,"byte_end":225145,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[{"value":"/ Returns the UTF-8 width of the character at this position.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225068,"byte_end":225130,"line_start":56,"line_end":56,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225290,"byte_end":225298,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[{"value":"/ Returns whether the UTF-8 width of the character at this position","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225192,"byte_end":225261,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/ is zero.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225266,"byte_end":225278,"line_start":62,"line_end":62,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225406,"byte_end":225409,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"pub fn pos(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[{"value":"/ Returns the byte offset of this position.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225349,"byte_end":225394,"line_start":67,"line_end":67,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225530,"byte_end":225538,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"pub fn next_pos(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[{"value":"/ Returns the byte offset of the next position in the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225456,"byte_end":225518,"line_start":72,"line_end":72,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225664,"byte_end":225669,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[{"value":"/ An abstraction over input used in the matching engines.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225594,"byte_end":225653,"line_start":78,"line_end":78,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225742,"byte_end":225744,"line_start":81,"line_end":81,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"pub fn at(&Self, usize) -> InputAt","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[{"value":"/ Return an encoding of the position at byte offset `i`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225676,"byte_end":225734,"line_start":80,"line_end":80,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225921,"byte_end":225930,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"pub fn next_char(&Self, InputAt) -> Char","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[{"value":"/ Return the Unicode character occurring next to `at`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225779,"byte_end":225835,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225840,"byte_end":225843,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ If no such character could be decoded, then `Char` is absent.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225848,"byte_end":225913,"line_start":85,"line_end":85,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226111,"byte_end":226124,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"pub fn previous_char(&Self, InputAt) -> Char","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[{"value":"/ Return the Unicode character occurring previous to `at`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":225965,"byte_end":226025,"line_start":88,"line_end":88,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226030,"byte_end":226033,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ If no such character could be decoded, then `Char` is absent.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226038,"byte_end":226103,"line_start":90,"line_end":90,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226264,"byte_end":226278,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"pub fn is_empty_match(&Self, InputAt, &InstEmptyLook) -> bool","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[{"value":"/ Return true if the given empty width instruction matches at the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226159,"byte_end":226226,"line_start":93,"line_end":93,"column_start":5,"column_end":72}},{"value":"/ input position given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226231,"byte_end":226256,"line_start":94,"line_end":94,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226385,"byte_end":226394,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"pub fn prefix_at(&Self, &LiteralSearcher, InputAt) -> Option<InputAt>","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[{"value":"/ Scan the input for a matching prefix.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226336,"byte_end":226377,"line_start":97,"line_end":97,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226544,"byte_end":226547,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[{"value":"/ The number of bytes in the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226499,"byte_end":226536,"line_start":104,"line_end":104,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226609,"byte_end":226617,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[{"value":"/ Whether the input is empty.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226570,"byte_end":226601,"line_start":107,"line_end":107,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226716,"byte_end":226724,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[{"value":"/ Return the given input as a sequence of bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":226658,"byte_end":226708,"line_start":110,"line_end":110,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1877},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227468,"byte_end":227477,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[{"value":"/ An input reader over characters.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227390,"byte_end":227426,"line_start":138,"line_end":138,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227596,"byte_end":227599,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"pub fn new(&'t [u8]) -> CharInput","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[{"value":"/ Return a new character input reader for the given string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227523,"byte_end":227584,"line_start":143,"line_end":143,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233541,"byte_end":233545,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[{"value":"/ An inline representation of `Option<char>`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233121,"byte_end":233168,"line_start":337,"line_end":337,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233169,"byte_end":233172,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ This eliminates the need to do case analysis on `Option<char>` to determine","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233173,"byte_end":233252,"line_start":339,"line_end":339,"column_start":1,"column_end":80}},{"value":"/ ordinality with other characters.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233253,"byte_end":233290,"line_start":340,"line_end":340,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233291,"byte_end":233294,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ (The `Option<char>` is not related to encoding. Instead, it is used in the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233295,"byte_end":233373,"line_start":342,"line_end":342,"column_start":1,"column_end":79}},{"value":"/ matching engines to represent the beginning and ending boundaries of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233374,"byte_end":233450,"line_start":343,"line_end":343,"column_start":1,"column_end":77}},{"value":"/ search text.)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233451,"byte_end":233468,"line_start":344,"line_end":344,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233869,"byte_end":233876,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"pub fn is_none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"/ Returns true iff the character is absent.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233798,"byte_end":233843,"line_start":358,"line_end":358,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233848,"byte_end":233857,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234068,"byte_end":234076,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"pub fn len_utf8(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"/ Returns the length of the character's UTF-8 encoding.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233919,"byte_end":233976,"line_start":362,"line_end":362,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233981,"byte_end":233984,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ If the character is absent, then `0` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233989,"byte_end":234042,"line_start":364,"line_end":364,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234047,"byte_end":234056,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234299,"byte_end":234311,"line_start":373,"line_end":373,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"pub fn is_word_char(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[{"value":"/ Returns true iff the character is a word character.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234164,"byte_end":234219,"line_start":370,"line_end":370,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234224,"byte_end":234227,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If the character is absent, then false is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234232,"byte_end":234287,"line_start":372,"line_end":372,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234531,"byte_end":234543,"line_start":380,"line_end":380,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"pub fn is_word_byte(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[{"value":"/ Returns true iff the byte is a word byte.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234411,"byte_end":234456,"line_start":377,"line_end":377,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234461,"byte_end":234464,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ If the byte is absent, then false is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234469,"byte_end":234519,"line_start":379,"line_end":379,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1995},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":236562,"byte_end":236577,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":1998},{"krate":0,"index":1999}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[{"value":"/ A prefix extracted from a compiled regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":236288,"byte_end":236346,"line_start":25,"line_end":25,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":236347,"byte_end":236350,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ A regex prefix is a set of literal strings that *must* be matched at the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":236351,"byte_end":236427,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ beginning of a regex in order for the entire regex to match. Similarly","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":236428,"byte_end":236502,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ for a regex suffix.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":236503,"byte_end":236526,"line_start":29,"line_end":29,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":237537,"byte_end":237542,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[{"value":"/ Returns a matcher that never matches and never advances the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":237455,"byte_end":237525,"line_start":59,"line_end":59,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":237693,"byte_end":237701,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"pub fn prefixes(Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[{"value":"/ Returns a matcher for literal prefixes from the given set.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":237619,"byte_end":237681,"line_start":64,"line_end":64,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":237894,"byte_end":237902,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"pub fn suffixes(Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[{"value":"/ Returns a matcher for literal suffixes from the given set.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":237820,"byte_end":237882,"line_start":70,"line_end":70,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238763,"byte_end":238771,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"pub fn complete(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[{"value":"/ Returns true if all matches comprise the entire regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238373,"byte_end":238444,"line_start":86,"line_end":86,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238449,"byte_end":238452,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This does not necessarily mean that a literal match implies a match","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238457,"byte_end":238528,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ of the regular expression. For example, the regular expresison `^a`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238533,"byte_end":238604,"line_start":89,"line_end":89,"column_start":5,"column_end":76}},{"value":"/ is comprised of a single complete literal `a`, but the regular","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238609,"byte_end":238675,"line_start":90,"line_end":90,"column_start":5,"column_end":71}},{"value":"/ expression demands that it only match at the beginning of a string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238680,"byte_end":238751,"line_start":91,"line_end":91,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238967,"byte_end":238971,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"pub fn find(&Self, &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"/ Find the position of a literal in `haystack` if it exists.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238842,"byte_end":238904,"line_start":96,"line_end":96,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":238909,"byte_end":238926,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":239698,"byte_end":239708,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"pub fn find_start(&Self, &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[{"value":"/ Like find, except matches must start at index `0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":239632,"byte_end":239686,"line_start":113,"line_end":113,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":240096,"byte_end":240104,"line_start":127,"line_end":127,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"pub fn find_end(&Self, &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[{"value":"/ Like find, except matches must end at index `haystack.len()`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":240019,"byte_end":240084,"line_start":126,"line_end":126,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":240529,"byte_end":240533,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"pub fn iter(&Self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all literals to be matched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":240461,"byte_end":240517,"line_start":139,"line_end":139,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":241255,"byte_end":241258,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"pub fn lcp(&Self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[{"value":"/ Returns a matcher for the longest common prefix of this matcher.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":241175,"byte_end":241243,"line_start":156,"line_end":156,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":241393,"byte_end":241396,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"pub fn lcs(&Self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[{"value":"/ Returns a matcher for the longest common suffix of this matcher.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":241313,"byte_end":241381,"line_start":161,"line_end":161,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":241505,"byte_end":241513,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[{"value":"/ Returns true iff this prefix is empty.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":241451,"byte_end":241493,"line_start":166,"line_end":166,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":241629,"byte_end":241632,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[{"value":"/ Returns the number of prefixes in this machine.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":241566,"byte_end":241617,"line_start":171,"line_end":171,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":242084,"byte_end":242100,"line_start":186,"line_end":186,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"pub fn approximate_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[{"value":"/ Return the approximate heap usage of literals in bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":242013,"byte_end":242072,"line_start":185,"line_end":185,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245498,"byte_end":245503,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245509,"byte_end":245514,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245530,"byte_end":245536,"line_start":274,"line_end":274,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245552,"byte_end":245554,"line_start":275,"line_end":275,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245575,"byte_end":245585,"line_start":276,"line_end":276,"column_start":5,"column_end":15},"name":"TeddySSSE3","qualname":"::literal::LiteralIter::TeddySSSE3","value":"LiteralIter::TeddySSSE3(&'a [Vec<u8>])","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245606,"byte_end":245615,"line_start":277,"line_end":277,"column_start":5,"column_end":14},"name":"TeddyAVX2","qualname":"::literal::LiteralIter::TeddyAVX2","value":"LiteralIter::TeddyAVX2(&'a [Vec<u8>])","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245476,"byte_end":245487,"line_start":271,"line_end":271,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::LiteralIter","value":"pub enum LiteralIter<'a> {\n    Empty,\n    Bytes(&'a [u8]),\n    Single(&'a [u8]),\n    AC(&'a [Literal]),\n    TeddySSSE3(&'a [Vec<u8>]),\n    TeddyAVX2(&'a [Vec<u8>]),\n}","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":758}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2038},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":250215,"byte_end":250226,"line_start":426,"line_end":426,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[{"value":"/ Provides an implementation of fast subtring search using frequency","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":249605,"byte_end":249675,"line_start":415,"line_end":415,"column_start":1,"column_end":71}},{"value":"/ analysis.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":249676,"byte_end":249689,"line_start":416,"line_end":416,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":249690,"byte_end":249693,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ memchr is so fast that we do everything we can to keep the loop in memchr","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":249694,"byte_end":249771,"line_start":418,"line_end":418,"column_start":1,"column_end":78}},{"value":"/ for as long as possible. The easiest way to do this is to intelligently","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":249772,"byte_end":249847,"line_start":419,"line_end":419,"column_start":1,"column_end":76}},{"value":"/ pick the byte to send to memchr. The best byte is the byte that occurs","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":249848,"byte_end":249922,"line_start":420,"line_end":420,"column_start":1,"column_end":75}},{"value":"/ least frequently in the haystack. Since doing frequency analysis on the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":249923,"byte_end":249998,"line_start":421,"line_end":421,"column_start":1,"column_end":76}},{"value":"/ haystack is far too expensive, we compute a set of fixed frequencies up","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":249999,"byte_end":250074,"line_start":422,"line_end":422,"column_start":1,"column_end":76}},{"value":"/ front and hard code them in src/freqs.rs. Frequency analysis is done via","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":250075,"byte_end":250151,"line_start":423,"line_end":423,"column_start":1,"column_end":77}},{"value":"/ scripts/frequencies.py.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":250152,"byte_end":250179,"line_start":424,"line_end":424,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":252669,"byte_end":252673,"line_start":502,"line_end":502,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"pub fn find(&Self, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":252611,"byte_end":252628,"line_start":501,"line_end":501,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":253501,"byte_end":253510,"line_start":528,"line_end":528,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"pub fn is_suffix(&Self, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":253443,"byte_end":253460,"line_start":527,"line_end":527,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":253685,"byte_end":253688,"line_start":535,"line_end":535,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":253748,"byte_end":253756,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"pub fn char_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2096},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338271,"byte_end":338278,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103},{"krate":0,"index":2104},{"krate":0,"index":2105},{"krate":0,"index":2106},{"krate":0,"index":2107},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2111}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[{"value":"/ Program is a sequence of instructions and various facts about thos","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338154,"byte_end":338224,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ instructions.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338225,"byte_end":338242,"line_start":16,"line_end":16,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2097},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338348,"byte_end":338353,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[{"value":"/ A sequence of instructions that represents an NFA.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338285,"byte_end":338339,"line_start":19,"line_end":19,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2098},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338518,"byte_end":338525,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[{"value":"/ Pointers to each Match instruction in the sequence.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338370,"byte_end":338425,"line_start":21,"line_end":21,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338430,"byte_end":338433,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ This is always length 1 unless this program represents a regex set.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338438,"byte_end":338509,"line_start":23,"line_end":23,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2099},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338659,"byte_end":338667,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[{"value":"/ The ordered sequence of all capture groups extracted from the AST.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338545,"byte_end":338615,"line_start":25,"line_end":25,"column_start":5,"column_end":75}},{"value":"/ Unnamed groups are `None`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338620,"byte_end":338650,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2100},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338760,"byte_end":338776,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[{"value":"/ Pointers to all named capture groups into `captures`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338694,"byte_end":338751,"line_start":28,"line_end":28,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":2101},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339133,"byte_end":339138,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[{"value":"/ A pointer to the start instruction. This can vary depending on how","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338811,"byte_end":338881,"line_start":30,"line_end":30,"column_start":5,"column_end":75}},{"value":"/ the program was compiled. For example, programs for use with the DFA","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338886,"byte_end":338958,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ engine have a `.*?` inserted at the beginning of unanchored regular","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":338963,"byte_end":339034,"line_start":32,"line_end":32,"column_start":5,"column_end":76}},{"value":"/ expressions. The actual starting point of the program is after the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339039,"byte_end":339109,"line_start":33,"line_end":33,"column_start":5,"column_end":75}},{"value":"/ `.*?`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339114,"byte_end":339124,"line_start":34,"line_end":34,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":2102},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339252,"byte_end":339264,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[{"value":"/ A set of equivalence classes for discriminating bytes in the compiled","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339153,"byte_end":339226,"line_start":36,"line_end":36,"column_start":5,"column_end":78}},{"value":"/ program.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339231,"byte_end":339243,"line_start":37,"line_end":37,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":2103},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339343,"byte_end":339352,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[{"value":"/ When true, this program can only match valid UTF-8.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339279,"byte_end":339334,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2104},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339476,"byte_end":339484,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[{"value":"/ When true, this program uses byte range instructions instead of Unicode","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339364,"byte_end":339439,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/ range instructions.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339444,"byte_end":339467,"line_start":42,"line_end":42,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2105},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339673,"byte_end":339679,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[{"value":"/ When true, the program is compiled for DFA matching. For example, this","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339496,"byte_end":339570,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/ implies `is_bytes` and also inserts a preceding `.*?` for unanchored","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339575,"byte_end":339647,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"/ regexes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339652,"byte_end":339664,"line_start":46,"line_end":46,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":2106},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339785,"byte_end":339795,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[{"value":"/ When true, the program matches text in reverse (for use only in the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339691,"byte_end":339762,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ DFA).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339767,"byte_end":339776,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":2107},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339877,"byte_end":339894,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[{"value":"/ Whether the regex must match from the start of the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339807,"byte_end":339868,"line_start":51,"line_end":51,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2108},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339972,"byte_end":339987,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[{"value":"/ Whether the regex must match at the end of the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339906,"byte_end":339963,"line_start":53,"line_end":53,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340078,"byte_end":340103,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[{"value":"/ Whether this program contains a Unicode word boundary instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":339999,"byte_end":340069,"line_start":55,"line_end":55,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2110},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340195,"byte_end":340203,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::LiteralSearcher","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[{"value":"/ A possibly empty machine for very quickly matching prefix literals.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340115,"byte_end":340186,"line_start":57,"line_end":57,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2111},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341030,"byte_end":341044,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2096},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[{"value":"/ A limit on the size of the cache that the DFA is allowed to use while","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340226,"byte_end":340299,"line_start":59,"line_end":59,"column_start":5,"column_end":78}},{"value":"/ matching.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340304,"byte_end":340317,"line_start":60,"line_end":60,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340322,"byte_end":340325,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ The cache limit specifies approximately how much space we're willing to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340330,"byte_end":340405,"line_start":62,"line_end":62,"column_start":5,"column_end":80}},{"value":"/ give to the state cache. Once the state cache exceeds the size, it is","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340410,"byte_end":340483,"line_start":63,"line_end":63,"column_start":5,"column_end":78}},{"value":"/ wiped and all states must be re-computed.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340488,"byte_end":340533,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340538,"byte_end":340541,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Note that this value does not impact correctness. It can be set to 0","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340546,"byte_end":340618,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ and the DFA will run just fine. (It will only ever store exactly one","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340623,"byte_end":340695,"line_start":67,"line_end":67,"column_start":5,"column_end":77}},{"value":"/ state in the cache, and will likely run very slowly, but it will work.)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340700,"byte_end":340775,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340780,"byte_end":340783,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Also note that this limit is *per thread of execution*. That is,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340788,"byte_end":340856,"line_start":70,"line_end":70,"column_start":5,"column_end":73}},{"value":"/ if the same regex is used to search text across multiple threads","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340861,"byte_end":340929,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ simultaneously, then the DFA cache is not shared. Instead, copies are","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":340934,"byte_end":341007,"line_start":72,"line_end":72,"column_start":5,"column_end":78}},{"value":"/ made.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341012,"byte_end":341021,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341170,"byte_end":341173,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[{"value":"/ Creates an empty instruction sequence. Fields are given default","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341075,"byte_end":341142,"line_start":78,"line_end":78,"column_start":5,"column_end":72}},{"value":"/ values.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341147,"byte_end":341158,"line_start":79,"line_end":79,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341888,"byte_end":341892,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"pub fn skip(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[{"value":"/ If pc is an index to a no-op instruction (like Save), then return the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341754,"byte_end":341827,"line_start":100,"line_end":100,"column_start":5,"column_end":78}},{"value":"/ next pc that is not a no-op instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341832,"byte_end":341876,"line_start":101,"line_end":101,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342206,"byte_end":342220,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"pub fn leads_to_match(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[{"value":"/ Return true if and only if an execution engine at instruction `pc` will","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342087,"byte_end":342162,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ always lead to a match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342167,"byte_end":342194,"line_start":112,"line_end":112,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342746,"byte_end":342759,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"pub fn needs_dotstar(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[{"value":"/ Returns true if the current configuration demands that an implicit","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342608,"byte_end":342678,"line_start":126,"line_end":126,"column_start":5,"column_end":75}},{"value":"/ `.*?` be prepended to the instruction sequence.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342683,"byte_end":342734,"line_start":127,"line_end":127,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342966,"byte_end":342976,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"pub fn uses_bytes(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[{"value":"/ Returns true if this program uses Byte instructions instead of","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342855,"byte_end":342921,"line_start":132,"line_end":132,"column_start":5,"column_end":71}},{"value":"/ Char/Range instructions.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":342926,"byte_end":342954,"line_start":133,"line_end":133,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":343211,"byte_end":343220,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"pub fn only_utf8(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[{"value":"/ Returns true if this program exclusively matches valid UTF-8 bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":343042,"byte_end":343113,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":343118,"byte_end":343121,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ That is, if an invalid UTF-8 byte is seen, then no match is possible.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":343126,"byte_end":343199,"line_start":140,"line_end":140,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":343368,"byte_end":343384,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"pub fn approximate_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[{"value":"/ Return the approximate heap usage of this instruction sequence in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":343272,"byte_end":343341,"line_start":145,"line_end":145,"column_start":5,"column_end":74}},{"value":"/ bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":343346,"byte_end":343356,"line_start":146,"line_end":146,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2115},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348086,"byte_end":348091,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[{"value":"/ Match indicates that the program has reached a match state.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347668,"byte_end":347731,"line_start":260,"line_end":260,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347736,"byte_end":347739,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The number in the match corresponds to the Nth logical regular","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347744,"byte_end":347810,"line_start":262,"line_end":262,"column_start":5,"column_end":71}},{"value":"/ expression in this program. This index is always 0 for normal regex","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347815,"byte_end":347886,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ programs. Values greater than 0 appear when compiling regex sets, and","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347891,"byte_end":347964,"line_start":264,"line_end":264,"column_start":5,"column_end":78}},{"value":"/ each match instruction gets its own unique value. The value corresponds","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347969,"byte_end":348044,"line_start":265,"line_end":265,"column_start":5,"column_end":80}},{"value":"/ to the Nth regex in the set.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348049,"byte_end":348081,"line_start":266,"line_end":266,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2118},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348221,"byte_end":348225,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[{"value":"/ Save causes the program to save the current location of the input in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348104,"byte_end":348176,"line_start":268,"line_end":268,"column_start":5,"column_end":77}},{"value":"/ the slot indicated by InstSave.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348181,"byte_end":348216,"line_start":269,"line_end":269,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2121},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348360,"byte_end":348365,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[{"value":"/ Split causes the program to diverge to one of two paths in the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348241,"byte_end":348307,"line_start":271,"line_end":271,"column_start":5,"column_end":71}},{"value":"/ program, preferring goto1 in InstSplit.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348312,"byte_end":348355,"line_start":272,"line_end":272,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2124},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348525,"byte_end":348534,"line_start":276,"line_end":276,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[{"value":"/ EmptyLook represents a zero-width assertion in a regex program. A","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348382,"byte_end":348451,"line_start":274,"line_end":274,"column_start":5,"column_end":74}},{"value":"/ zero-width assertion does not consume any of the input text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348456,"byte_end":348520,"line_start":275,"line_end":275,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2127},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348676,"byte_end":348680,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[{"value":"/ Char requires the regex program to match the character in InstChar at","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348555,"byte_end":348628,"line_start":277,"line_end":277,"column_start":5,"column_end":78}},{"value":"/ the current position in the input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348633,"byte_end":348671,"line_start":278,"line_end":278,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2130},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348854,"byte_end":348860,"line_start":282,"line_end":282,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[{"value":"/ Ranges requires the regex program to match the character at the current","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348696,"byte_end":348771,"line_start":280,"line_end":280,"column_start":5,"column_end":80}},{"value":"/ position in the input with one of the ranges specified in InstRanges.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348776,"byte_end":348849,"line_start":281,"line_end":281,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349058,"byte_end":349063,"line_start":286,"line_end":286,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[{"value":"/ Bytes is like Ranges, except it expresses a single byte range. It is","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348878,"byte_end":348950,"line_start":283,"line_end":283,"column_start":5,"column_end":77}},{"value":"/ used in conjunction with Split instructions to implement multi-byte","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":348955,"byte_end":349026,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/ character classes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349031,"byte_end":349053,"line_start":285,"line_end":285,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347657,"byte_end":347661,"line_start":259,"line_end":259,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"pub enum Inst {\n\n    /// Match indicates that the program has reached a match state.\n    ///\n    /// The number in the match corresponds to the Nth logical regular\n    /// expression in this program. This index is always 0 for normal regex\n    /// programs. Values greater than 0 appear when compiling regex sets, and\n    /// each match instruction gets its own unique value. The value corresponds\n    /// to the Nth regex in the set.\n    Match(usize),\n\n    /// Save causes the program to save the current location of the input in\n    /// the slot indicated by InstSave.\n    Save(InstSave),\n\n    /// Split causes the program to diverge to one of two paths in the\n    /// program, preferring goto1 in InstSplit.\n    Split(InstSplit),\n\n    /// EmptyLook represents a zero-width assertion in a regex program. A\n    /// zero-width assertion does not consume any of the input text.\n    EmptyLook(InstEmptyLook),\n\n    /// Char requires the regex program to match the character in InstChar at\n    /// the current position in the input.\n    Char(InstChar),\n\n    /// Ranges requires the regex program to match the character at the current\n    /// position in the input with one of the ranges specified in InstRanges.\n    Ranges(InstRanges),\n\n    /// Bytes is like Ranges, except it expresses a single byte range. It is\n    /// used in conjunction with Split instructions to implement multi-byte\n    /// character classes.\n    Bytes(InstBytes),\n}","parent":null,"children":[{"krate":0,"index":2115},{"krate":0,"index":2118},{"krate":0,"index":2121},{"krate":0,"index":2124},{"krate":0,"index":2127},{"krate":0,"index":2130},{"krate":0,"index":2133}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[{"value":"/ Inst is an instruction code in a Regex program.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":346672,"byte_end":346723,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":346724,"byte_end":346727,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ Regrettably, a regex program either contains Unicode codepoint","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":346728,"byte_end":346794,"line_start":243,"line_end":243,"column_start":1,"column_end":67}},{"value":"/ instructions (Char and Ranges) or it contains byte instructions (Bytes).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":346795,"byte_end":346871,"line_start":244,"line_end":244,"column_start":1,"column_end":77}},{"value":"/ A regex program can never contain both.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":346872,"byte_end":346915,"line_start":245,"line_end":245,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":346916,"byte_end":346919,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ It would be worth investigating splitting this into two distinct types and","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":346920,"byte_end":346998,"line_start":247,"line_end":247,"column_start":1,"column_end":79}},{"value":"/ then figuring out how to make the matching engines polymorphic over those","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":346999,"byte_end":347076,"line_start":248,"line_end":248,"column_start":1,"column_end":78}},{"value":"/ types without sacrificing performance.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347077,"byte_end":347119,"line_start":249,"line_end":249,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347120,"byte_end":347123,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ Other than the benefit of moving invariants into the type system, another","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347124,"byte_end":347201,"line_start":251,"line_end":251,"column_start":1,"column_end":78}},{"value":"/ benefit is the decreased size. If we remove the `Char` and `Ranges`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347202,"byte_end":347273,"line_start":252,"line_end":252,"column_start":1,"column_end":72}},{"value":"/ instructions from the `Inst` enum, then its size shrinks from 40 bytes to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347274,"byte_end":347351,"line_start":253,"line_end":253,"column_start":1,"column_end":78}},{"value":"/ 24 bytes. (This is because of the removal of a `Vec` in the `Ranges`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347352,"byte_end":347424,"line_start":254,"line_end":254,"column_start":1,"column_end":73}},{"value":"/ variant.) Given that byte based machines are typically much bigger than","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347425,"byte_end":347500,"line_start":255,"line_end":255,"column_start":1,"column_end":76}},{"value":"/ their Unicode analogues (because they can decode UTF-8 directly), this ends","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347501,"byte_end":347580,"line_start":256,"line_end":256,"column_start":1,"column_end":80}},{"value":"/ up being a pretty significant savings.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":347581,"byte_end":347623,"line_start":257,"line_end":257,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349167,"byte_end":349175,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"pub fn is_match(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this is a match instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349095,"byte_end":349155,"line_start":290,"line_end":290,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":2140},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349373,"byte_end":349381,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Save instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349294,"byte_end":349337,"line_start":299,"line_end":299,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2141},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349445,"byte_end":349449,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":2140},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349388,"byte_end":349436,"line_start":302,"line_end":302,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2142},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349604,"byte_end":349608,"line_start":306,"line_end":306,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":2140},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[{"value":"/ The capture slot (there are two slots for every capture in a regex,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349464,"byte_end":349535,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/ including the zeroth capture for the entire match).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349540,"byte_end":349595,"line_start":305,"line_end":305,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2147},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349700,"byte_end":349709,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":2148},{"krate":0,"index":2149}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Split instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349620,"byte_end":349664,"line_start":309,"line_end":309,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2148},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349865,"byte_end":349870,"line_start":314,"line_end":314,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":2147},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[{"value":"/ The first instruction to try. A match resulting from following goto1","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349716,"byte_end":349788,"line_start":312,"line_end":312,"column_start":5,"column_end":77}},{"value":"/ has precedence over a match resulting from following goto2.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349793,"byte_end":349856,"line_start":313,"line_end":313,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":2149},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350035,"byte_end":350040,"line_start":317,"line_end":317,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":2147},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[{"value":"/ The second instruction to try. A match resulting from following goto1","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349885,"byte_end":349958,"line_start":315,"line_end":315,"column_start":5,"column_end":78}},{"value":"/ has precedence over a match resulting from following goto2.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349963,"byte_end":350026,"line_start":316,"line_end":316,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2154},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350140,"byte_end":350153,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":2155},{"krate":0,"index":2156}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the `EmptyLook` instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350054,"byte_end":350104,"line_start":320,"line_end":320,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2155},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350254,"byte_end":350258,"line_start":325,"line_end":325,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program if this instruction","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350160,"byte_end":350227,"line_start":323,"line_end":323,"column_start":5,"column_end":72}},{"value":"/ succeeds.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350232,"byte_end":350245,"line_start":324,"line_end":324,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2156},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350328,"byte_end":350332,"line_start":327,"line_end":327,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[{"value":"/ The type of zero-width assertion to check.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350273,"byte_end":350319,"line_start":326,"line_end":326,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2162},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350496,"byte_end":350505,"line_start":334,"line_end":334,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[{"value":"/ Start of line or input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350464,"byte_end":350491,"line_start":333,"line_end":333,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2164},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350541,"byte_end":350548,"line_start":336,"line_end":336,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[{"value":"/ End of line or input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350511,"byte_end":350536,"line_start":335,"line_end":335,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2166},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350578,"byte_end":350587,"line_start":338,"line_end":338,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[{"value":"/ Start of input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350554,"byte_end":350573,"line_start":337,"line_end":337,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350615,"byte_end":350622,"line_start":340,"line_end":340,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[{"value":"/ End of input.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350593,"byte_end":350610,"line_start":339,"line_end":339,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2170},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350696,"byte_end":350708,"line_start":342,"line_end":342,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[{"value":"/ Word character on one side and non-word character on other.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350628,"byte_end":350691,"line_start":341,"line_end":341,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2172},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350788,"byte_end":350803,"line_start":344,"line_end":344,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[{"value":"/ Word character on both sides or non-word character on both sides.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350714,"byte_end":350783,"line_start":343,"line_end":343,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350838,"byte_end":350855,"line_start":346,"line_end":346,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[{"value":"/ ASCII word boundary.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350809,"byte_end":350833,"line_start":345,"line_end":345,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2176},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350894,"byte_end":350914,"line_start":348,"line_end":348,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[{"value":"/ Not ASCII word boundary.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350861,"byte_end":350889,"line_start":347,"line_end":347,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":2161},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350448,"byte_end":350457,"line_start":332,"line_end":332,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"pub enum EmptyLook {\n\n    /// Start of line or input.\n    StartLine,\n\n    /// End of line or input.\n    EndLine,\n\n    /// Start of input.\n    StartText,\n\n    /// End of input.\n    EndText,\n\n    /// Word character on one side and non-word character on other.\n    WordBoundary,\n\n    /// Word character on both sides or non-word character on both sides.\n    NotWordBoundary,\n\n    /// ASCII word boundary.\n    WordBoundaryAscii,\n\n    /// Not ASCII word boundary.\n    NotWordBoundaryAscii,\n}","parent":null,"children":[{"krate":0,"index":2162},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2170},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2176}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[{"value":"/ The set of zero-width match instructions.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350348,"byte_end":350393,"line_start":330,"line_end":330,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350998,"byte_end":351006,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2191}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Char instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":350919,"byte_end":350962,"line_start":351,"line_end":351,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2190},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351107,"byte_end":351111,"line_start":356,"line_end":356,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program if this instruction","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351013,"byte_end":351080,"line_start":354,"line_end":354,"column_start":5,"column_end":72}},{"value":"/ succeeds.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351085,"byte_end":351098,"line_start":355,"line_end":355,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2191},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351161,"byte_end":351162,"line_start":358,"line_end":358,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[{"value":"/ The character to test.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351126,"byte_end":351152,"line_start":357,"line_end":357,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351254,"byte_end":351264,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":2197},{"krate":0,"index":2198}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Ranges instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351173,"byte_end":351218,"line_start":361,"line_end":361,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2197},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351365,"byte_end":351369,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2196},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program if this instruction","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351271,"byte_end":351338,"line_start":364,"line_end":364,"column_start":5,"column_end":72}},{"value":"/ succeeds.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351343,"byte_end":351356,"line_start":365,"line_end":365,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2198},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351444,"byte_end":351450,"line_start":368,"line_end":368,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2196},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[{"value":"/ The set of Unicode scalar value ranges to test.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351384,"byte_end":351435,"line_start":367,"line_end":367,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351577,"byte_end":351584,"line_start":373,"line_end":373,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"pub fn matches(&Self, Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[{"value":"/ Tests whether the given input character matches this instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351496,"byte_end":351565,"line_start":372,"line_end":372,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352370,"byte_end":352379,"line_start":398,"line_end":398,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"pub fn num_chars(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[{"value":"/ Return the number of distinct characters represented by all of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352272,"byte_end":352342,"line_start":396,"line_end":396,"column_start":5,"column_end":75}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352347,"byte_end":352358,"line_start":397,"line_end":397,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2203},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352634,"byte_end":352643,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Bytes instruction.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352554,"byte_end":352598,"line_start":406,"line_end":406,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2204},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352744,"byte_end":352748,"line_start":411,"line_end":411,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program if this instruction","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352650,"byte_end":352717,"line_start":409,"line_end":409,"column_start":5,"column_end":72}},{"value":"/ succeeds.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352722,"byte_end":352735,"line_start":410,"line_end":410,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2205},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352817,"byte_end":352822,"line_start":413,"line_end":413,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[{"value":"/ The start (inclusive) of this byte range.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352763,"byte_end":352808,"line_start":412,"line_end":412,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2206},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352884,"byte_end":352887,"line_start":415,"line_end":415,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[{"value":"/ The end (inclusive) of this byte range.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352832,"byte_end":352875,"line_start":414,"line_end":414,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352993,"byte_end":353000,"line_start":420,"line_end":420,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"pub fn matches(&Self, u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if the given byte is in this range.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352917,"byte_end":352981,"line_start":419,"line_end":419,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":2211},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353691,"byte_end":353703,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"/ The set of user configurable options for compiling zero or more regexes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353556,"byte_end":353632,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353657,"byte_end":353679,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2212},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353714,"byte_end":353718,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2213},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353741,"byte_end":353751,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2214},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353768,"byte_end":353782,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2215},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353799,"byte_end":353809,"line_start":18,"line_end":18,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2216},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353824,"byte_end":353840,"line_start":19,"line_end":19,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2217},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353856,"byte_end":353866,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2218},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353882,"byte_end":353902,"line_start":21,"line_end":21,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2219},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353918,"byte_end":353928,"line_start":22,"line_end":22,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2220},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353944,"byte_end":353961,"line_start":23,"line_end":23,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2221},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":353977,"byte_end":353984,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2222},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":354000,"byte_end":354005,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2211},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369130,"byte_end":369135,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"/ Match represents a single match of a regex in a haystack.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":368932,"byte_end":368993,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":368994,"byte_end":368997,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'t` refers to the lifetime of the matched text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":368998,"byte_end":369073,"line_start":28,"line_end":28,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369316,"byte_end":369321,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"pub fn start(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"/ Returns the starting byte offset of the match in the haystack.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369224,"byte_end":369290,"line_start":37,"line_end":37,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369295,"byte_end":369304,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369460,"byte_end":369463,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"pub fn end(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"/ Returns the ending byte offset of the match in the haystack.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369370,"byte_end":369434,"line_start":43,"line_end":43,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369439,"byte_end":369448,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369565,"byte_end":369573,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"pub fn as_bytes(&Self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"/ Returns the matched text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369510,"byte_end":369539,"line_start":49,"line_end":49,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369544,"byte_end":369553,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2339},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370587,"byte_end":370592,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[{"value":"/ A compiled regular expression for matching arbitrary bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369910,"byte_end":369973,"line_start":66,"line_end":66,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369974,"byte_end":369977,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ It can be used to search, split or replace text. All searching is done with","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369978,"byte_end":370057,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/ an implicit `.*?` at the beginning and end of an expression. To force an","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370058,"byte_end":370134,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/ expression to match the whole string (or a prefix or a suffix), you must","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370135,"byte_end":370211,"line_start":70,"line_end":70,"column_start":1,"column_end":77}},{"value":"/ use an anchor like `^` or `$` (or `\\A` and `\\z`).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370212,"byte_end":370265,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370266,"byte_end":370269,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Like the `Regex` type in the parent module, matches with this regex return","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370270,"byte_end":370348,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/ byte offsets into the search text. **Unlike** the parent `Regex` type,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370349,"byte_end":370423,"line_start":74,"line_end":74,"column_start":1,"column_end":75}},{"value":"/ these byte offsets may not correspond to UTF-8 sequence boundaries since","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370424,"byte_end":370500,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ the regexes in this module can match arbitrary bytes.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370501,"byte_end":370558,"line_start":76,"line_end":76,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371651,"byte_end":371654,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"pub fn new(&str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[{"value":"/ Compiles a regular expression. Once compiled, it can be used repeatedly","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371432,"byte_end":371507,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ to search, split or replace text in a string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371512,"byte_end":371561,"line_start":116,"line_end":116,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371566,"byte_end":371569,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ If an invalid expression is given, then an error is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371574,"byte_end":371639,"line_start":118,"line_end":118,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372385,"byte_end":372393,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"pub fn is_match(&Self, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[{"value":"/ Returns true if and only if the regex matches the string given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371740,"byte_end":371807,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371812,"byte_end":371815,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ It is recommended to use this method if all you need to do is test","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371820,"byte_end":371890,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/ a match, since the underlying matching engine may be able to do less","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371895,"byte_end":371967,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ work.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371972,"byte_end":371981,"line_start":127,"line_end":127,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371986,"byte_end":371989,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371994,"byte_end":372007,"line_start":129,"line_end":129,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372012,"byte_end":372015,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ Test if some text contains at least one word with exactly 13 ASCII word","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372020,"byte_end":372095,"line_start":131,"line_end":131,"column_start":5,"column_end":80}},{"value":"/ bytes:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372100,"byte_end":372110,"line_start":132,"line_end":132,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372115,"byte_end":372118,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372123,"byte_end":372134,"line_start":134,"line_end":134,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372139,"byte_end":372189,"line_start":135,"line_end":135,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372194,"byte_end":372211,"line_start":136,"line_end":136,"column_start":5,"column_end":22}},{"value":"/ let text = b\"I categorically deny having triskaidekaphobia.\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372216,"byte_end":372281,"line_start":137,"line_end":137,"column_start":5,"column_end":70}},{"value":"/ assert!(Regex::new(r\"\\b\\w{13}\\b\").unwrap().is_match(text));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372286,"byte_end":372349,"line_start":138,"line_end":138,"column_start":5,"column_end":68}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372354,"byte_end":372361,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372366,"byte_end":372373,"line_start":140,"line_end":140,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373255,"byte_end":373259,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"pub fn find<'t>(&Self, &'t [u8]) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the start and end byte range of the leftmost-first match in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372469,"byte_end":372540,"line_start":145,"line_end":145,"column_start":5,"column_end":76}},{"value":"/ `text`. If no match exists, then `None` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372545,"byte_end":372601,"line_start":146,"line_end":146,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372606,"byte_end":372609,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Note that this should only be used if you want to discover the position","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372614,"byte_end":372689,"line_start":148,"line_end":148,"column_start":5,"column_end":80}},{"value":"/ of the match. Testing the existence of a match is faster if you use","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372694,"byte_end":372765,"line_start":149,"line_end":149,"column_start":5,"column_end":76}},{"value":"/ `is_match`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372770,"byte_end":372785,"line_start":150,"line_end":150,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372790,"byte_end":372793,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372798,"byte_end":372811,"line_start":152,"line_end":152,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372816,"byte_end":372819,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Find the start and end location of the first word with exactly 13","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372824,"byte_end":372893,"line_start":154,"line_end":154,"column_start":5,"column_end":74}},{"value":"/ ASCII word bytes:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372898,"byte_end":372919,"line_start":155,"line_end":155,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372924,"byte_end":372927,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372932,"byte_end":372943,"line_start":157,"line_end":157,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":372948,"byte_end":372998,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373003,"byte_end":373020,"line_start":159,"line_end":159,"column_start":5,"column_end":22}},{"value":"/ let text = b\"I categorically deny having triskaidekaphobia.\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373025,"byte_end":373090,"line_start":160,"line_end":160,"column_start":5,"column_end":70}},{"value":"/ let mat = Regex::new(r\"\\b\\w{13}\\b\").unwrap().find(text).unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373095,"byte_end":373164,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"/ assert_eq!((mat.start(), mat.end()), (2, 15));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373169,"byte_end":373219,"line_start":162,"line_end":162,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373224,"byte_end":373231,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373236,"byte_end":373243,"line_start":164,"line_end":164,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373975,"byte_end":373984,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"pub fn find_iter<'r, 't>(&'r Self, &'t [u8]) -> Matches","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[{"value":"/ Returns an iterator for each successive non-overlapping match in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373351,"byte_end":373419,"line_start":169,"line_end":169,"column_start":5,"column_end":73}},{"value":"/ `text`, returning the start and end byte indices with respect to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373424,"byte_end":373492,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"/ `text`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373497,"byte_end":373508,"line_start":171,"line_end":171,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373513,"byte_end":373516,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373521,"byte_end":373534,"line_start":173,"line_end":173,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373539,"byte_end":373542,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Find the start and end location of every word with exactly 13 ASCII","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373547,"byte_end":373618,"line_start":175,"line_end":175,"column_start":5,"column_end":76}},{"value":"/ word bytes:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373623,"byte_end":373638,"line_start":176,"line_end":176,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373643,"byte_end":373646,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373651,"byte_end":373662,"line_start":178,"line_end":178,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373667,"byte_end":373717,"line_start":179,"line_end":179,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373722,"byte_end":373739,"line_start":180,"line_end":180,"column_start":5,"column_end":22}},{"value":"/ let text = b\"Retroactively relinquishing remunerations is reprehensible.\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373744,"byte_end":373822,"line_start":181,"line_end":181,"column_start":5,"column_end":83}},{"value":"/ for mat in Regex::new(r\"\\b\\w{13}\\b\").unwrap().find_iter(text) {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373827,"byte_end":373894,"line_start":182,"line_end":182,"column_start":5,"column_end":72}},{"value":"/     println!(\"{:?}\", mat);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373899,"byte_end":373929,"line_start":183,"line_end":183,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373934,"byte_end":373939,"line_start":184,"line_end":184,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373944,"byte_end":373951,"line_start":185,"line_end":185,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":373956,"byte_end":373963,"line_start":186,"line_end":186,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377121,"byte_end":377129,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"pub fn captures<'t>(&Self, &'t [u8]) -> Option<Captures>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the capture groups corresponding to the leftmost-first","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374102,"byte_end":374168,"line_start":191,"line_end":191,"column_start":5,"column_end":71}},{"value":"/ match in `text`. Capture group `0` always corresponds to the entire","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374173,"byte_end":374244,"line_start":192,"line_end":192,"column_start":5,"column_end":76}},{"value":"/ match. If no match is found, then `None` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374249,"byte_end":374306,"line_start":193,"line_end":193,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374311,"byte_end":374314,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ You should only use `captures` if you need access to the location of","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374319,"byte_end":374391,"line_start":195,"line_end":195,"column_start":5,"column_end":77}},{"value":"/ capturing group matches. Otherwise, `find` is faster for discovering","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374396,"byte_end":374468,"line_start":196,"line_end":196,"column_start":5,"column_end":77}},{"value":"/ the location of the overall match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374473,"byte_end":374511,"line_start":197,"line_end":197,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374516,"byte_end":374519,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374524,"byte_end":374538,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374543,"byte_end":374546,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Say you have some text with movie names and their release years,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374551,"byte_end":374619,"line_start":201,"line_end":201,"column_start":5,"column_end":73}},{"value":"/ like \"'Citizen Kane' (1941)\". It'd be nice if we could search for text","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374624,"byte_end":374698,"line_start":202,"line_end":202,"column_start":5,"column_end":79}},{"value":"/ looking like that, while also extracting the movie name and its release","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374703,"byte_end":374778,"line_start":203,"line_end":203,"column_start":5,"column_end":80}},{"value":"/ year separately.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374783,"byte_end":374803,"line_start":204,"line_end":204,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374808,"byte_end":374811,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374816,"byte_end":374827,"line_start":206,"line_end":206,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374832,"byte_end":374882,"line_start":207,"line_end":207,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374887,"byte_end":374904,"line_start":208,"line_end":208,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374909,"byte_end":374970,"line_start":209,"line_end":209,"column_start":5,"column_end":66}},{"value":"/ let text = b\"Not my favorite movie: 'Citizen Kane' (1941).\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":374975,"byte_end":375039,"line_start":210,"line_end":210,"column_start":5,"column_end":69}},{"value":"/ let caps = re.captures(text).unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375044,"byte_end":375086,"line_start":211,"line_end":211,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(caps.get(1).unwrap().as_bytes(), &b\"Citizen Kane\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375091,"byte_end":375161,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(caps.get(2).unwrap().as_bytes(), &b\"1941\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375166,"byte_end":375228,"line_start":213,"line_end":213,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(caps.get(0).unwrap().as_bytes(), &b\"'Citizen Kane' (1941)\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375233,"byte_end":375312,"line_start":214,"line_end":214,"column_start":5,"column_end":84}},{"value":"/ // You can also access the groups by index using the Index notation.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375317,"byte_end":375389,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ // Note that this will panic on an invalid index.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375394,"byte_end":375447,"line_start":216,"line_end":216,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(&caps[1], b\"Citizen Kane\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375452,"byte_end":375494,"line_start":217,"line_end":217,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(&caps[2], b\"1941\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375499,"byte_end":375533,"line_start":218,"line_end":218,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(&caps[0], b\"'Citizen Kane' (1941)\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375538,"byte_end":375589,"line_start":219,"line_end":219,"column_start":5,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375594,"byte_end":375601,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375606,"byte_end":375613,"line_start":221,"line_end":221,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375618,"byte_end":375621,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Note that the full match is at capture group `0`. Each subsequent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375626,"byte_end":375695,"line_start":223,"line_end":223,"column_start":5,"column_end":74}},{"value":"/ capture group is indexed by the order of its opening `(`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375700,"byte_end":375761,"line_start":224,"line_end":224,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375766,"byte_end":375769,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ We can make this example a bit clearer by using *named* capture groups:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375774,"byte_end":375849,"line_start":226,"line_end":226,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375854,"byte_end":375857,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375862,"byte_end":375873,"line_start":228,"line_end":228,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375878,"byte_end":375928,"line_start":229,"line_end":229,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375933,"byte_end":375950,"line_start":230,"line_end":230,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":375955,"byte_end":376023,"line_start":231,"line_end":231,"column_start":5,"column_end":73}},{"value":"/                .unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376028,"byte_end":376057,"line_start":232,"line_end":232,"column_start":5,"column_end":34}},{"value":"/ let text = b\"Not my favorite movie: 'Citizen Kane' (1941).\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376062,"byte_end":376126,"line_start":233,"line_end":233,"column_start":5,"column_end":69}},{"value":"/ let caps = re.captures(text).unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376131,"byte_end":376173,"line_start":234,"line_end":234,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(caps.name(\"title\").unwrap().as_bytes(), b\"Citizen Kane\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376178,"byte_end":376250,"line_start":235,"line_end":235,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(caps.name(\"year\").unwrap().as_bytes(), b\"1941\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376255,"byte_end":376318,"line_start":236,"line_end":236,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(caps.get(0).unwrap().as_bytes(), &b\"'Citizen Kane' (1941)\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376323,"byte_end":376402,"line_start":237,"line_end":237,"column_start":5,"column_end":84}},{"value":"/ // You can also access the groups by name using the Index notation.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376407,"byte_end":376478,"line_start":238,"line_end":238,"column_start":5,"column_end":76}},{"value":"/ // Note that this will panic on an invalid group name.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376483,"byte_end":376541,"line_start":239,"line_end":239,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(&caps[\"title\"], b\"Citizen Kane\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376546,"byte_end":376594,"line_start":240,"line_end":240,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(&caps[\"year\"], b\"1941\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376599,"byte_end":376638,"line_start":241,"line_end":241,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(&caps[0], b\"'Citizen Kane' (1941)\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376643,"byte_end":376694,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376699,"byte_end":376702,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376707,"byte_end":376714,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376719,"byte_end":376726,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376731,"byte_end":376734,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Here we name the capture groups, which we can access with the `name`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376739,"byte_end":376811,"line_start":247,"line_end":247,"column_start":5,"column_end":77}},{"value":"/ method or the `Index` notation with a `&str`. Note that the named","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376816,"byte_end":376885,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/ capture groups are still accessible with `get` or the `Index` notation","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376890,"byte_end":376964,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ with a `usize`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376969,"byte_end":376988,"line_start":250,"line_end":250,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":376993,"byte_end":376996,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ The `0`th capture group is always unnamed, so it must always be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377001,"byte_end":377068,"line_start":252,"line_end":252,"column_start":5,"column_end":72}},{"value":"/ accessed with `get(0)` or `[0]`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377073,"byte_end":377109,"line_start":253,"line_end":253,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378574,"byte_end":378587,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"pub fn captures_iter<'r, 't>(&'r Self, &'t [u8]) -> CaptureMatches","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[{"value":"/ Returns an iterator over all the non-overlapping capture groups matched","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377439,"byte_end":377514,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/ in `text`. This is operationally the same as `find_iter`, except it","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377519,"byte_end":377590,"line_start":264,"line_end":264,"column_start":5,"column_end":76}},{"value":"/ yields information about capturing group matches.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377595,"byte_end":377648,"line_start":265,"line_end":265,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377653,"byte_end":377656,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377661,"byte_end":377674,"line_start":267,"line_end":267,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377679,"byte_end":377682,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ We can use this to find all movie titles and their release years in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377687,"byte_end":377758,"line_start":269,"line_end":269,"column_start":5,"column_end":76}},{"value":"/ some text, where the movie is formatted like \"'Title' (xxxx)\":","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377763,"byte_end":377829,"line_start":270,"line_end":270,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377834,"byte_end":377837,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377842,"byte_end":377853,"line_start":272,"line_end":272,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use std::str; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377858,"byte_end":377922,"line_start":273,"line_end":273,"column_start":5,"column_end":69}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377927,"byte_end":377944,"line_start":274,"line_end":274,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":377949,"byte_end":378017,"line_start":275,"line_end":275,"column_start":5,"column_end":73}},{"value":"/                .unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378022,"byte_end":378051,"line_start":276,"line_end":276,"column_start":5,"column_end":34}},{"value":"/ let text = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378056,"byte_end":378136,"line_start":277,"line_end":277,"column_start":5,"column_end":85}},{"value":"/ for caps in re.captures_iter(text) {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378141,"byte_end":378181,"line_start":278,"line_end":278,"column_start":5,"column_end":45}},{"value":"/     let title = str::from_utf8(&caps[\"title\"]).unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378186,"byte_end":378246,"line_start":279,"line_end":279,"column_start":5,"column_end":65}},{"value":"/     let year = str::from_utf8(&caps[\"year\"]).unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378251,"byte_end":378309,"line_start":280,"line_end":280,"column_start":5,"column_end":63}},{"value":"/     println!(\"Movie: {:?}, Released: {:?}\", title, year);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378314,"byte_end":378375,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/ }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378380,"byte_end":378385,"line_start":282,"line_end":282,"column_start":5,"column_end":10}},{"value":"/ // Output:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378390,"byte_end":378404,"line_start":283,"line_end":283,"column_start":5,"column_end":19}},{"value":"/ // Movie: Citizen Kane, Released: 1941","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378409,"byte_end":378451,"line_start":284,"line_end":284,"column_start":5,"column_end":47}},{"value":"/ // Movie: The Wizard of Oz, Released: 1939","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378456,"byte_end":378502,"line_start":285,"line_end":285,"column_start":5,"column_end":51}},{"value":"/ // Movie: M, Released: 1931","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378507,"byte_end":378538,"line_start":286,"line_end":286,"column_start":5,"column_end":36}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378543,"byte_end":378550,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378555,"byte_end":378562,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379505,"byte_end":379510,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"pub fn split<'r, 't>(&'r Self, &'t [u8]) -> Split","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[{"value":"/ Returns an iterator of substrings of `text` delimited by a match of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378746,"byte_end":378821,"line_start":296,"line_end":296,"column_start":5,"column_end":80}},{"value":"/ regular expression. Namely, each element of the iterator corresponds to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378826,"byte_end":378901,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ text that *isn't* matched by the regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378906,"byte_end":378962,"line_start":298,"line_end":298,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378967,"byte_end":378970,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This method will *not* copy the text given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":378975,"byte_end":379022,"line_start":300,"line_end":300,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379027,"byte_end":379030,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379035,"byte_end":379048,"line_start":302,"line_end":302,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379053,"byte_end":379056,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ To split a string delimited by arbitrary amounts of spaces or tabs:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379061,"byte_end":379132,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379137,"byte_end":379140,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379145,"byte_end":379156,"line_start":306,"line_end":306,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379161,"byte_end":379211,"line_start":307,"line_end":307,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379216,"byte_end":379233,"line_start":308,"line_end":308,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"[ \\t]+\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379238,"byte_end":379282,"line_start":309,"line_end":309,"column_start":5,"column_end":49}},{"value":"/ let fields: Vec<&[u8]> = re.split(b\"a b \\t  c\\td    e\").collect();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379287,"byte_end":379357,"line_start":310,"line_end":310,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(fields, vec![","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379362,"byte_end":379390,"line_start":311,"line_end":311,"column_start":5,"column_end":33}},{"value":"/     &b\"a\"[..], &b\"b\"[..], &b\"c\"[..], &b\"d\"[..], &b\"e\"[..],","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379395,"byte_end":379457,"line_start":312,"line_end":312,"column_start":5,"column_end":67}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379462,"byte_end":379469,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379474,"byte_end":379481,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379486,"byte_end":379493,"line_start":315,"line_end":315,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380526,"byte_end":380532,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"pub fn splitn<'r, 't>(&'r Self, &'t [u8], usize) -> SplitN","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of `text` delimited","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379664,"byte_end":379737,"line_start":323,"line_end":323,"column_start":5,"column_end":78}},{"value":"/ by a match of the regular expression. (A `limit` of `0` will return no","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379742,"byte_end":379816,"line_start":324,"line_end":324,"column_start":5,"column_end":79}},{"value":"/ substrings.) Namely, each element of the iterator corresponds to text","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379821,"byte_end":379894,"line_start":325,"line_end":325,"column_start":5,"column_end":78}},{"value":"/ that *isn't* matched by the regular expression. The remainder of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379899,"byte_end":379971,"line_start":326,"line_end":326,"column_start":5,"column_end":77}},{"value":"/ string that is not split will be the last element in the iterator.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":379976,"byte_end":380046,"line_start":327,"line_end":327,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380051,"byte_end":380054,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This method will *not* copy the text given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380059,"byte_end":380106,"line_start":329,"line_end":329,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380111,"byte_end":380114,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380119,"byte_end":380132,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380137,"byte_end":380140,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Get the first two words in some text:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380145,"byte_end":380186,"line_start":333,"line_end":333,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380191,"byte_end":380194,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380199,"byte_end":380210,"line_start":335,"line_end":335,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380215,"byte_end":380265,"line_start":336,"line_end":336,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380270,"byte_end":380287,"line_start":337,"line_end":337,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"\\W+\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380292,"byte_end":380333,"line_start":338,"line_end":338,"column_start":5,"column_end":46}},{"value":"/ let fields: Vec<&[u8]> = re.splitn(b\"Hey! How are you?\", 3).collect();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380338,"byte_end":380412,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(fields, vec![&b\"Hey\"[..], &b\"How\"[..], &b\"are you?\"[..]]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380417,"byte_end":380490,"line_start":340,"line_end":340,"column_start":5,"column_end":78}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380495,"byte_end":380502,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380507,"byte_end":380514,"line_start":342,"line_end":342,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385315,"byte_end":385322,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"pub fn replace<'t, R: Replacer>(&Self, &'t [u8], R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[{"value":"/ Replaces the leftmost-first match with the replacement provided. The","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380730,"byte_end":380802,"line_start":354,"line_end":354,"column_start":5,"column_end":77}},{"value":"/ replacement can be a regular byte string (where `$N` and `$name` are","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380807,"byte_end":380879,"line_start":355,"line_end":355,"column_start":5,"column_end":77}},{"value":"/ expanded to match capture groups) or a function that takes the matches'","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380884,"byte_end":380959,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ `Captures` and returns the replaced byte string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":380964,"byte_end":381016,"line_start":357,"line_end":357,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381021,"byte_end":381024,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ If no match is found, then a copy of the byte string is returned","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381029,"byte_end":381097,"line_start":359,"line_end":359,"column_start":5,"column_end":73}},{"value":"/ unchanged.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381102,"byte_end":381116,"line_start":360,"line_end":360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381121,"byte_end":381124,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Replacement string syntax","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381129,"byte_end":381160,"line_start":362,"line_end":362,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381165,"byte_end":381168,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ All instances of `$name` in the replacement text is replaced with the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381173,"byte_end":381246,"line_start":364,"line_end":364,"column_start":5,"column_end":78}},{"value":"/ corresponding capture group `name`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381251,"byte_end":381290,"line_start":365,"line_end":365,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381295,"byte_end":381298,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ `name` may be an integer corresponding to the index of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381303,"byte_end":381365,"line_start":367,"line_end":367,"column_start":5,"column_end":67}},{"value":"/ capture group (counted by order of opening parenthesis where `0` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381370,"byte_end":381445,"line_start":368,"line_end":368,"column_start":5,"column_end":80}},{"value":"/ entire match) or it can be a name (consisting of letters, digits or","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381450,"byte_end":381521,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ underscores) corresponding to a named capture group.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381526,"byte_end":381582,"line_start":370,"line_end":370,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381587,"byte_end":381590,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If `name` isn't a valid capture group (whether the name doesn't exist","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381595,"byte_end":381668,"line_start":372,"line_end":372,"column_start":5,"column_end":78}},{"value":"/ or isn't a valid index), then it is replaced with the empty string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381673,"byte_end":381744,"line_start":373,"line_end":373,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381749,"byte_end":381752,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ The longest possible name is used. e.g., `$1a` looks up the capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381757,"byte_end":381828,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ group named `1a` and not the capture group at index `1`. To exert more","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381833,"byte_end":381907,"line_start":376,"line_end":376,"column_start":5,"column_end":79}},{"value":"/ precise control over the name, use braces, e.g., `${1}a`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381912,"byte_end":381973,"line_start":377,"line_end":377,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381978,"byte_end":381981,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ To write a literal `$` use `$$`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":381986,"byte_end":382022,"line_start":379,"line_end":379,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382027,"byte_end":382030,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382035,"byte_end":382049,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382054,"byte_end":382057,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Note that this function is polymorphic with respect to the replacement.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382062,"byte_end":382137,"line_start":383,"line_end":383,"column_start":5,"column_end":80}},{"value":"/ In typical usage, this can just be a normal byte string:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382142,"byte_end":382202,"line_start":384,"line_end":384,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382207,"byte_end":382210,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382215,"byte_end":382226,"line_start":386,"line_end":386,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382231,"byte_end":382281,"line_start":387,"line_end":387,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382286,"byte_end":382303,"line_start":388,"line_end":388,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(\"[^01]+\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382308,"byte_end":382351,"line_start":389,"line_end":389,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(re.replace(b\"1078910\", &b\"\"[..]), &b\"1010\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382356,"byte_end":382419,"line_start":390,"line_end":390,"column_start":5,"column_end":68}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382424,"byte_end":382431,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382436,"byte_end":382443,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382448,"byte_end":382451,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ But anything satisfying the `Replacer` trait will work. For example, a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382456,"byte_end":382530,"line_start":394,"line_end":394,"column_start":5,"column_end":79}},{"value":"/ closure of type `|&Captures| -> Vec<u8>` provides direct access to the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382535,"byte_end":382609,"line_start":395,"line_end":395,"column_start":5,"column_end":79}},{"value":"/ captures corresponding to a match. This allows one to access capturing","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382614,"byte_end":382688,"line_start":396,"line_end":396,"column_start":5,"column_end":79}},{"value":"/ group matches easily:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382693,"byte_end":382718,"line_start":397,"line_end":397,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382723,"byte_end":382726,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382731,"byte_end":382742,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382747,"byte_end":382797,"line_start":400,"line_end":400,"column_start":5,"column_end":55}},{"value":"/ # use regex::bytes::Captures; fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382802,"byte_end":382847,"line_start":401,"line_end":401,"column_start":5,"column_end":50}},{"value":"/ let re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382852,"byte_end":382908,"line_start":402,"line_end":402,"column_start":5,"column_end":61}},{"value":"/ let result = re.replace(b\"Springsteen, Bruce\", |caps: &Captures| {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382913,"byte_end":382983,"line_start":403,"line_end":403,"column_start":5,"column_end":75}},{"value":"/     let mut replacement = caps[2].to_owned();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":382988,"byte_end":383037,"line_start":404,"line_end":404,"column_start":5,"column_end":54}},{"value":"/     replacement.push(b' ');","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383042,"byte_end":383073,"line_start":405,"line_end":405,"column_start":5,"column_end":36}},{"value":"/     replacement.extend(&caps[1]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383078,"byte_end":383115,"line_start":406,"line_end":406,"column_start":5,"column_end":42}},{"value":"/     replacement","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383120,"byte_end":383139,"line_start":407,"line_end":407,"column_start":5,"column_end":24}},{"value":"/ });","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383144,"byte_end":383151,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(result, &b\"Bruce Springsteen\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383156,"byte_end":383206,"line_start":409,"line_end":409,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383211,"byte_end":383218,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383223,"byte_end":383230,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383235,"byte_end":383238,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ But this is a bit cumbersome to use all the time. Instead, a simple","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383243,"byte_end":383314,"line_start":413,"line_end":413,"column_start":5,"column_end":76}},{"value":"/ syntax is supported that expands `$name` into the corresponding capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383319,"byte_end":383394,"line_start":414,"line_end":414,"column_start":5,"column_end":80}},{"value":"/ group. Here's the last example, but using this expansion technique","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383399,"byte_end":383469,"line_start":415,"line_end":415,"column_start":5,"column_end":75}},{"value":"/ with named capture groups:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383474,"byte_end":383504,"line_start":416,"line_end":416,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383509,"byte_end":383512,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383517,"byte_end":383528,"line_start":418,"line_end":418,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383533,"byte_end":383583,"line_start":419,"line_end":419,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383588,"byte_end":383605,"line_start":420,"line_end":420,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(?P<first>\\S+)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383610,"byte_end":383683,"line_start":421,"line_end":421,"column_start":5,"column_end":78}},{"value":"/ let result = re.replace(b\"Springsteen, Bruce\", &b\"$first $last\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383688,"byte_end":383761,"line_start":422,"line_end":422,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(result, &b\"Bruce Springsteen\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383766,"byte_end":383816,"line_start":423,"line_end":423,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383821,"byte_end":383828,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383833,"byte_end":383840,"line_start":425,"line_end":425,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383845,"byte_end":383848,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ Note that using `$2` instead of `$first` or `$1` instead of `$last`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383853,"byte_end":383924,"line_start":427,"line_end":427,"column_start":5,"column_end":76}},{"value":"/ would produce the same result. To write a literal `$` use `$$`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":383929,"byte_end":383996,"line_start":428,"line_end":428,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384001,"byte_end":384004,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Sometimes the replacement string requires use of curly braces to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384009,"byte_end":384077,"line_start":430,"line_end":430,"column_start":5,"column_end":73}},{"value":"/ delineate a capture group replacement and surrounding literal text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384082,"byte_end":384153,"line_start":431,"line_end":431,"column_start":5,"column_end":76}},{"value":"/ For example, if we wanted to join two words together with an","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384158,"byte_end":384222,"line_start":432,"line_end":432,"column_start":5,"column_end":69}},{"value":"/ underscore:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384227,"byte_end":384242,"line_start":433,"line_end":433,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384247,"byte_end":384250,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384255,"byte_end":384266,"line_start":435,"line_end":435,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384271,"byte_end":384321,"line_start":436,"line_end":436,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384326,"byte_end":384343,"line_start":437,"line_end":437,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"(?P<first>\\w+)\\s+(?P<second>\\w+)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384348,"byte_end":384418,"line_start":438,"line_end":438,"column_start":5,"column_end":75}},{"value":"/ let result = re.replace(b\"deep fried\", &b\"${first}_$second\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384423,"byte_end":384492,"line_start":439,"line_end":439,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(result, &b\"deep_fried\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384497,"byte_end":384540,"line_start":440,"line_end":440,"column_start":5,"column_end":48}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384545,"byte_end":384552,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384557,"byte_end":384564,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384569,"byte_end":384572,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Without the curly braces, the capture group name `first_` would be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384577,"byte_end":384647,"line_start":444,"line_end":444,"column_start":5,"column_end":75}},{"value":"/ used, and since it doesn't exist, it would be replaced with the empty","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384652,"byte_end":384725,"line_start":445,"line_end":445,"column_start":5,"column_end":78}},{"value":"/ string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384730,"byte_end":384741,"line_start":446,"line_end":446,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384746,"byte_end":384749,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Finally, sometimes you just want to replace a literal string with no","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384754,"byte_end":384826,"line_start":448,"line_end":448,"column_start":5,"column_end":77}},{"value":"/ regard for capturing group expansion. This can be done by wrapping a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384831,"byte_end":384903,"line_start":449,"line_end":449,"column_start":5,"column_end":77}},{"value":"/ byte string with `NoExpand`:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384908,"byte_end":384940,"line_start":450,"line_end":450,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384945,"byte_end":384948,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384953,"byte_end":384964,"line_start":452,"line_end":452,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":384969,"byte_end":385019,"line_start":453,"line_end":453,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385024,"byte_end":385041,"line_start":454,"line_end":454,"column_start":5,"column_end":22}},{"value":"/ use regex::bytes::NoExpand;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385046,"byte_end":385077,"line_start":455,"line_end":455,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385082,"byte_end":385085,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(\\S+)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385090,"byte_end":385154,"line_start":457,"line_end":457,"column_start":5,"column_end":69}},{"value":"/ let result = re.replace(b\"Springsteen, Bruce\", NoExpand(b\"$2 $last\"));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385159,"byte_end":385233,"line_start":458,"line_end":458,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(result, &b\"$2 $last\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385238,"byte_end":385279,"line_start":459,"line_end":459,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385284,"byte_end":385291,"line_start":460,"line_end":460,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385296,"byte_end":385303,"line_start":461,"line_end":461,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385779,"byte_end":385790,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"pub fn replace_all<'t, R: Replacer>(&Self, &'t [u8], R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[{"value":"/ Replaces all non-overlapping matches in `text` with the replacement","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385468,"byte_end":385539,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/ provided. This is the same as calling `replacen` with `limit` set to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385544,"byte_end":385616,"line_start":471,"line_end":471,"column_start":5,"column_end":77}},{"value":"/ `0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385621,"byte_end":385629,"line_start":472,"line_end":472,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385634,"byte_end":385637,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `replace` for details on how to access","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385642,"byte_end":385710,"line_start":474,"line_end":474,"column_start":5,"column_end":73}},{"value":"/ capturing group matches in the replacement text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385715,"byte_end":385767,"line_start":475,"line_end":475,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":386259,"byte_end":386267,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"pub fn replacen<'t, R: Replacer>(&Self, &'t [u8], usize, R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[{"value":"/ Replaces at most `limit` non-overlapping matches in `text` with the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":385936,"byte_end":386007,"line_start":484,"line_end":484,"column_start":5,"column_end":76}},{"value":"/ replacement provided. If `limit` is 0, then all non-overlapping matches","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":386012,"byte_end":386087,"line_start":485,"line_end":485,"column_start":5,"column_end":80}},{"value":"/ are replaced.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":386092,"byte_end":386109,"line_start":486,"line_end":486,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":386114,"byte_end":386117,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `replace` for details on how to access","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":386122,"byte_end":386190,"line_start":488,"line_end":488,"column_start":5,"column_end":73}},{"value":"/ capturing group matches in the replacement text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":386195,"byte_end":386247,"line_start":489,"line_end":489,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388742,"byte_end":388756,"line_start":561,"line_end":561,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"pub fn shortest_match(&Self, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[{"value":"/ Returns the end location of a match in the text given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":387953,"byte_end":388011,"line_start":540,"line_end":540,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388016,"byte_end":388019,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ This method may have the same performance characteristics as","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388024,"byte_end":388088,"line_start":542,"line_end":542,"column_start":5,"column_end":69}},{"value":"/ `is_match`, except it provides an end location for a match. In","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388093,"byte_end":388159,"line_start":543,"line_end":543,"column_start":5,"column_end":71}},{"value":"/ particular, the location returned *may be shorter* than the proper end","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388164,"byte_end":388238,"line_start":544,"line_end":544,"column_start":5,"column_end":79}},{"value":"/ of the leftmost-first match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388243,"byte_end":388275,"line_start":545,"line_end":545,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388280,"byte_end":388283,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388288,"byte_end":388301,"line_start":547,"line_end":547,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388306,"byte_end":388309,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ Typically, `a+` would match the entire first sequence of `a` in some","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388314,"byte_end":388386,"line_start":549,"line_end":549,"column_start":5,"column_end":77}},{"value":"/ text, but `shortest_match` can give up as soon as it sees the first","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388391,"byte_end":388462,"line_start":550,"line_end":550,"column_start":5,"column_end":76}},{"value":"/ `a`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388467,"byte_end":388475,"line_start":551,"line_end":551,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388480,"byte_end":388483,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388488,"byte_end":388499,"line_start":553,"line_end":553,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388504,"byte_end":388554,"line_start":554,"line_end":554,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388559,"byte_end":388576,"line_start":555,"line_end":555,"column_start":5,"column_end":22}},{"value":"/ let text = b\"aaaaa\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388581,"byte_end":388605,"line_start":556,"line_end":556,"column_start":5,"column_end":29}},{"value":"/ let pos = Regex::new(r\"a+\").unwrap().shortest_match(text);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388610,"byte_end":388672,"line_start":557,"line_end":557,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(pos, Some(1));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388677,"byte_end":388706,"line_start":558,"line_end":558,"column_start":5,"column_end":34}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388711,"byte_end":388718,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388723,"byte_end":388730,"line_start":560,"line_end":560,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389144,"byte_end":389161,"line_start":571,"line_end":571,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"pub fn shortest_match_at(&Self, &[u8], usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as shortest_match, but starts the search at the given","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388847,"byte_end":388921,"line_start":565,"line_end":565,"column_start":5,"column_end":79}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388926,"byte_end":388937,"line_start":566,"line_end":566,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388942,"byte_end":388945,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":388950,"byte_end":389025,"line_start":568,"line_end":568,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389030,"byte_end":389099,"line_start":569,"line_end":569,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389104,"byte_end":389132,"line_start":570,"line_end":570,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389605,"byte_end":389616,"line_start":585,"line_end":585,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"pub fn is_match_at(&Self, &[u8], usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as is_match, but starts the search at the given","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389314,"byte_end":389382,"line_start":579,"line_end":579,"column_start":5,"column_end":73}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389387,"byte_end":389398,"line_start":580,"line_end":580,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389403,"byte_end":389406,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389411,"byte_end":389486,"line_start":582,"line_end":582,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389491,"byte_end":389560,"line_start":583,"line_end":583,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389565,"byte_end":389593,"line_start":584,"line_end":584,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390013,"byte_end":390020,"line_start":595,"line_end":595,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"pub fn find_at<'t>(&Self, &'t [u8], usize) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as find, but starts the search at the given","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389726,"byte_end":389790,"line_start":589,"line_end":589,"column_start":5,"column_end":69}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389795,"byte_end":389806,"line_start":590,"line_end":590,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389811,"byte_end":389814,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389819,"byte_end":389894,"line_start":592,"line_end":592,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389899,"byte_end":389968,"line_start":593,"line_end":593,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":389973,"byte_end":390001,"line_start":594,"line_end":594,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390668,"byte_end":390681,"line_start":614,"line_end":614,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"pub fn captures_read<'t>(&Self, &mut CaptureLocations, &'t [u8])\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[{"value":"/ This is like `captures`, but uses","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390224,"byte_end":390261,"line_start":604,"line_end":604,"column_start":5,"column_end":42}},{"value":"/ [`CaptureLocations`](struct.CaptureLocations.html)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390266,"byte_end":390320,"line_start":605,"line_end":605,"column_start":5,"column_end":59}},{"value":"/ instead of","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390325,"byte_end":390339,"line_start":606,"line_end":606,"column_start":5,"column_end":19}},{"value":"/ [`Captures`](struct.Captures.html) in order to amortize allocations.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390344,"byte_end":390416,"line_start":607,"line_end":607,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390421,"byte_end":390424,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ To create a `CaptureLocations` value, use the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390429,"byte_end":390478,"line_start":609,"line_end":609,"column_start":5,"column_end":54}},{"value":"/ `Regex::capture_locations` method.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390483,"byte_end":390521,"line_start":610,"line_end":610,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390526,"byte_end":390529,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ This returns the overall match if this was successful, which is always","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390534,"byte_end":390608,"line_start":612,"line_end":612,"column_start":5,"column_end":79}},{"value":"/ equivalence to the `0`th capture group.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390613,"byte_end":390656,"line_start":613,"line_end":613,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391188,"byte_end":391204,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"pub fn captures_read_at<'t>(&Self, &mut CaptureLocations, &'t [u8], usize)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[{"value":"/ Returns the same as `captures_read`, but starts the search at the given","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390848,"byte_end":390923,"line_start":622,"line_end":622,"column_start":5,"column_end":80}},{"value":"/ offset and populates the capture locations given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390928,"byte_end":390981,"line_start":623,"line_end":623,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390986,"byte_end":390989,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":390994,"byte_end":391069,"line_start":625,"line_end":625,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391074,"byte_end":391143,"line_start":626,"line_end":626,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391148,"byte_end":391176,"line_start":627,"line_end":627,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391749,"byte_end":391765,"line_start":646,"line_end":646,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"pub fn read_captures_at<'t>(&Self, &mut CaptureLocations, &'t [u8], usize)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[{"value":"/ An undocumented alias for `captures_read_at`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391493,"byte_end":391542,"line_start":640,"line_end":640,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391547,"byte_end":391550,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ The `regex-capi` crate previously used this routine, so to avoid","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391555,"byte_end":391623,"line_start":642,"line_end":642,"column_start":5,"column_end":73}},{"value":"/ breaking that crate, we continue to provide the name as an undocumented","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391628,"byte_end":391703,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ alias.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391708,"byte_end":391718,"line_start":644,"line_end":644,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392054,"byte_end":392060,"line_start":659,"line_end":659,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[{"value":"/ Returns the original string of this regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391996,"byte_end":392042,"line_start":658,"line_end":658,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392183,"byte_end":392196,"line_start":664,"line_end":664,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"pub fn capture_names(&Self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the capture names.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392124,"byte_end":392171,"line_start":663,"line_end":663,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392332,"byte_end":392344,"line_start":669,"line_end":669,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"pub fn captures_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[{"value":"/ Returns the number of captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392285,"byte_end":392320,"line_start":668,"line_end":668,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392555,"byte_end":392572,"line_start":675,"line_end":675,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"pub fn capture_locations(&Self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[{"value":"/ Returns an empty set of capture locations that can be reused in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392411,"byte_end":392478,"line_start":673,"line_end":673,"column_start":5,"column_end":72}},{"value":"/ multiple calls to `captures_read` or `captures_read_at`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392483,"byte_end":392543,"line_start":674,"line_end":674,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392919,"byte_end":392928,"line_start":684,"line_end":684,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"pub fn locations(&Self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[{"value":"/ An alias for `capture_locations` to preserve backward compatibility.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392669,"byte_end":392741,"line_start":679,"line_end":679,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392746,"byte_end":392749,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The `regex-capi` crate uses this method, so to avoid breaking that","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392754,"byte_end":392824,"line_start":681,"line_end":681,"column_start":5,"column_end":75}},{"value":"/ crate, we continue to export it as an undocumented API.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":392829,"byte_end":392888,"line_start":682,"line_end":682,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393418,"byte_end":393425,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping matches for a particular string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393023,"byte_end":393096,"line_start":689,"line_end":689,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393097,"byte_end":393100,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ The iterator yields a tuple of integers corresponding to the start and end","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393101,"byte_end":393179,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ of the match. The indices are byte offsets. The iterator stops when no more","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393180,"byte_end":393259,"line_start":692,"line_end":692,"column_start":1,"column_end":80}},{"value":"/ matches can be found.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393260,"byte_end":393285,"line_start":693,"line_end":693,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393286,"byte_end":393289,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393290,"byte_end":393365,"line_start":695,"line_end":695,"column_start":1,"column_end":76}},{"value":"/ lifetime of the matched byte string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393366,"byte_end":393406,"line_start":696,"line_end":696,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":972},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393998,"byte_end":394012,"line_start":715,"line_end":715,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[{"value":"/ An iterator that yields all non-overlapping capture groups matching a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393695,"byte_end":393768,"line_start":708,"line_end":708,"column_start":1,"column_end":74}},{"value":"/ particular regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393769,"byte_end":393803,"line_start":709,"line_end":709,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393804,"byte_end":393807,"line_start":710,"line_end":710,"column_start":1,"column_end":4}},{"value":"/ The iterator stops when no more matches can be found.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393808,"byte_end":393865,"line_start":711,"line_end":711,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393866,"byte_end":393869,"line_start":712,"line_end":712,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393870,"byte_end":393945,"line_start":713,"line_end":713,"column_start":1,"column_end":76}},{"value":"/ lifetime of the matched byte string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393946,"byte_end":393986,"line_start":714,"line_end":714,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394593,"byte_end":394598,"line_start":733,"line_end":733,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":986},{"krate":0,"index":987}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[{"value":"/ Yields all substrings delimited by a regular expression match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394390,"byte_end":394456,"line_start":729,"line_end":729,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394457,"byte_end":394460,"line_start":730,"line_end":730,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394461,"byte_end":394536,"line_start":731,"line_end":731,"column_start":1,"column_end":76}},{"value":"/ lifetime of the byte string being split.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394537,"byte_end":394581,"line_start":732,"line_end":732,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395581,"byte_end":395587,"line_start":768,"line_end":768,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[{"value":"/ Yields at most `N` substrings delimited by a regular expression match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395301,"byte_end":395375,"line_start":762,"line_end":762,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395376,"byte_end":395379,"line_start":763,"line_end":763,"column_start":1,"column_end":4}},{"value":"/ The last substring will be whatever remains after splitting.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395380,"byte_end":395444,"line_start":764,"line_end":764,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395445,"byte_end":395448,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395449,"byte_end":395524,"line_start":766,"line_end":766,"column_start":1,"column_end":76}},{"value":"/ lifetime of the byte string being split.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395525,"byte_end":395569,"line_start":767,"line_end":767,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1003},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396282,"byte_end":396294,"line_start":796,"line_end":796,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[{"value":"/ An iterator over the names of all possible captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396025,"byte_end":396081,"line_start":790,"line_end":790,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396082,"byte_end":396085,"line_start":791,"line_end":791,"column_start":1,"column_end":4}},{"value":"/ `None` indicates an unnamed capture; the first element (capture 0, the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396086,"byte_end":396160,"line_start":792,"line_end":792,"column_start":1,"column_end":75}},{"value":"/ whole matched region) is always unnamed.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396161,"byte_end":396205,"line_start":793,"line_end":793,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396206,"byte_end":396209,"line_start":794,"line_end":794,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396210,"byte_end":396270,"line_start":795,"line_end":795,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2344},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397429,"byte_end":397445,"line_start":827,"line_end":827,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[{"value":"/ CaptureLocations is a low level representation of the raw offsets of each","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396659,"byte_end":396736,"line_start":811,"line_end":811,"column_start":1,"column_end":78}},{"value":"/ submatch.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396737,"byte_end":396750,"line_start":812,"line_end":812,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396751,"byte_end":396754,"line_start":813,"line_end":813,"column_start":1,"column_end":4}},{"value":"/ You can think of this as a lower level","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396755,"byte_end":396797,"line_start":814,"line_end":814,"column_start":1,"column_end":43}},{"value":"/ [`Captures`](struct.Captures.html), where this type does not support","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396798,"byte_end":396870,"line_start":815,"line_end":815,"column_start":1,"column_end":73}},{"value":"/ named capturing groups directly and it does not borrow the text that these","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396871,"byte_end":396949,"line_start":816,"line_end":816,"column_start":1,"column_end":79}},{"value":"/ offsets were matched on.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396950,"byte_end":396978,"line_start":817,"line_end":817,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396979,"byte_end":396982,"line_start":818,"line_end":818,"column_start":1,"column_end":4}},{"value":"/ Primarily, this type is useful when using the lower level `Regex` APIs","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396983,"byte_end":397057,"line_start":819,"line_end":819,"column_start":1,"column_end":75}},{"value":"/ such as `read_captures`, which permits amortizing the allocation in which","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397058,"byte_end":397135,"line_start":820,"line_end":820,"column_start":1,"column_end":78}},{"value":"/ capture match locations are stored.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397136,"byte_end":397175,"line_start":821,"line_end":821,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397176,"byte_end":397179,"line_start":822,"line_end":822,"column_start":1,"column_end":4}},{"value":"/ In order to build a value of this type, you'll need to call the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397180,"byte_end":397247,"line_start":823,"line_end":823,"column_start":1,"column_end":68}},{"value":"/ `capture_locations` method on the `Regex` being used to execute the search.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397248,"byte_end":397327,"line_start":824,"line_end":824,"column_start":1,"column_end":80}},{"value":"/ The value returned can then be reused in subsequent searches.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397328,"byte_end":397393,"line_start":825,"line_end":825,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397767,"byte_end":397776,"line_start":835,"line_end":835,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[{"value":"/ A type alias for `CaptureLocations` for backwards compatibility.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397469,"byte_end":397537,"line_start":829,"line_end":829,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397538,"byte_end":397541,"line_start":830,"line_end":830,"column_start":1,"column_end":4}},{"value":"/ Previously, we exported `CaptureLocations` as `Locations` in an","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397542,"byte_end":397609,"line_start":831,"line_end":831,"column_start":1,"column_end":68}},{"value":"/ undocumented API. To prevent breaking that code (e.g., in `regex-capi`),","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397610,"byte_end":397686,"line_start":832,"line_end":832,"column_start":1,"column_end":77}},{"value":"/ we continue re-exporting the same undocumented API.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397687,"byte_end":397742,"line_start":833,"line_end":833,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398134,"byte_end":398137,"line_start":843,"line_end":843,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"pub fn get(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"/ Returns the start and end positions of the Nth capture group. Returns","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397826,"byte_end":397899,"line_start":838,"line_end":838,"column_start":5,"column_end":78}},{"value":"/ `None` if `i` is not a valid capture group or if the capture group did","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397904,"byte_end":397978,"line_start":839,"line_end":839,"column_start":5,"column_end":79}},{"value":"/ not match anything. The positions returned are *always* byte indices","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397983,"byte_end":398055,"line_start":840,"line_end":840,"column_start":5,"column_end":77}},{"value":"/ with respect to the original string matched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398060,"byte_end":398108,"line_start":841,"line_end":841,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398113,"byte_end":398122,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398432,"byte_end":398435,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"/ Returns the total number of capturing groups.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398216,"byte_end":398265,"line_start":847,"line_end":847,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398270,"byte_end":398273,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1` since every regex has at least `1`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398278,"byte_end":398344,"line_start":849,"line_end":849,"column_start":5,"column_end":71}},{"value":"/ capturing group that corresponds to the entire match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398349,"byte_end":398406,"line_start":850,"line_end":850,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398411,"byte_end":398420,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398795,"byte_end":398798,"line_start":863,"line_end":863,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"pub fn pos(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"/ An alias for the `get` method for backwards compatibility.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398486,"byte_end":398548,"line_start":856,"line_end":856,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398553,"byte_end":398556,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ Previously, we exported `get` as `pos` in an undocumented API. To","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398561,"byte_end":398630,"line_start":858,"line_end":858,"column_start":5,"column_end":74}},{"value":"/ prevent breaking that code (e.g., in `regex-capi`), we continue","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398635,"byte_end":398702,"line_start":859,"line_end":859,"column_start":5,"column_end":72}},{"value":"/ re-exporting the same undocumented API.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398707,"byte_end":398750,"line_start":860,"line_end":860,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398774,"byte_end":398783,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1019},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399432,"byte_end":399440,"line_start":879,"line_end":879,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[{"value":"/ Captures represents a group of captured byte strings for a single match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398873,"byte_end":398949,"line_start":868,"line_end":868,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398950,"byte_end":398953,"line_start":869,"line_end":869,"column_start":1,"column_end":4}},{"value":"/ The 0th capture always corresponds to the entire match. Each subsequent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":398954,"byte_end":399029,"line_start":870,"line_end":870,"column_start":1,"column_end":76}},{"value":"/ index corresponds to the next capture group in the regex. If a capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399030,"byte_end":399104,"line_start":871,"line_end":871,"column_start":1,"column_end":75}},{"value":"/ group is named, then the matched byte string is *also* available via the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399105,"byte_end":399181,"line_start":872,"line_end":872,"column_start":1,"column_end":77}},{"value":"/ `name` method. (Note that the 0th capture is always unnamed and so must be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399182,"byte_end":399260,"line_start":873,"line_end":873,"column_start":1,"column_end":79}},{"value":"/ accessed with the `get` method.)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399261,"byte_end":399297,"line_start":874,"line_end":874,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399298,"byte_end":399301,"line_start":875,"line_end":875,"column_start":1,"column_end":4}},{"value":"/ Positions returned from a capture group are always byte indices.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399302,"byte_end":399370,"line_start":876,"line_end":876,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399371,"byte_end":399374,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ `'t` is the lifetime of the matched text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399375,"byte_end":399420,"line_start":878,"line_end":878,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400375,"byte_end":400378,"line_start":905,"line_end":905,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"pub fn get(&Self, usize) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the match associated with the capture group at index `i`. If","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399576,"byte_end":399648,"line_start":886,"line_end":886,"column_start":5,"column_end":77}},{"value":"/ `i` does not correspond to a capture group, or if the capture group","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399653,"byte_end":399724,"line_start":887,"line_end":887,"column_start":5,"column_end":76}},{"value":"/ did not participate in the match, then `None` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399729,"byte_end":399791,"line_start":888,"line_end":888,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399796,"byte_end":399799,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399804,"byte_end":399818,"line_start":890,"line_end":890,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399823,"byte_end":399826,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Get the text of the match with a default of an empty string if this","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399831,"byte_end":399902,"line_start":892,"line_end":892,"column_start":5,"column_end":76}},{"value":"/ group didn't participate in the match:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399907,"byte_end":399949,"line_start":893,"line_end":893,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399954,"byte_end":399957,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399962,"byte_end":399973,"line_start":895,"line_end":895,"column_start":5,"column_end":16}},{"value":"/ # use regex::bytes::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399978,"byte_end":400008,"line_start":896,"line_end":896,"column_start":5,"column_end":35}},{"value":"/ let re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400013,"byte_end":400078,"line_start":897,"line_end":897,"column_start":5,"column_end":70}},{"value":"/ let caps = re.captures(b\"abc123\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400083,"byte_end":400130,"line_start":898,"line_end":898,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400135,"byte_end":400138,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ let text1 = caps.get(1).map_or(&b\"\"[..], |m| m.as_bytes());","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400143,"byte_end":400206,"line_start":900,"line_end":900,"column_start":5,"column_end":68}},{"value":"/ let text2 = caps.get(2).map_or(&b\"\"[..], |m| m.as_bytes());","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400211,"byte_end":400274,"line_start":901,"line_end":901,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(text1, &b\"123\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400279,"byte_end":400314,"line_start":902,"line_end":902,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(text2, &b\"\"[..]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400319,"byte_end":400351,"line_start":903,"line_end":903,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400356,"byte_end":400363,"line_start":904,"line_end":904,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400663,"byte_end":400667,"line_start":911,"line_end":911,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"pub fn name(&Self, &str) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Returns the match for the capture group named `name`. If `name` isn't a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400497,"byte_end":400572,"line_start":909,"line_end":909,"column_start":5,"column_end":80}},{"value":"/ valid capture group or didn't match anything, then `None` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400577,"byte_end":400651,"line_start":910,"line_end":910,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401099,"byte_end":401103,"line_start":920,"line_end":920,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"pub fn iter<'c>(&'c Self) -> SubCaptureMatches","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[{"value":"/ An iterator that yields all capturing matches in the order in which","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400784,"byte_end":400855,"line_start":915,"line_end":915,"column_start":5,"column_end":76}},{"value":"/ they appear in the regex. If a particular capture group didn't","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400860,"byte_end":400926,"line_start":916,"line_end":916,"column_start":5,"column_end":71}},{"value":"/ participate in the match, then `None` is yielded for that capture.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":400931,"byte_end":401001,"line_start":917,"line_end":917,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401006,"byte_end":401009,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ The first match always corresponds to the overall match of the regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401014,"byte_end":401087,"line_start":919,"line_end":919,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402147,"byte_end":402153,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"pub fn expand(&Self, &[u8], &mut Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[{"value":"/ Expands all instances of `$name` in `replacement` to the corresponding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401256,"byte_end":401330,"line_start":927,"line_end":927,"column_start":5,"column_end":79}},{"value":"/ capture group `name`, and writes them to the `dst` buffer given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401335,"byte_end":401403,"line_start":928,"line_end":928,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401408,"byte_end":401411,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ `name` may be an integer corresponding to the index of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401416,"byte_end":401478,"line_start":930,"line_end":930,"column_start":5,"column_end":67}},{"value":"/ capture group (counted by order of opening parenthesis where `0` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401483,"byte_end":401558,"line_start":931,"line_end":931,"column_start":5,"column_end":80}},{"value":"/ entire match) or it can be a name (consisting of letters, digits or","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401563,"byte_end":401634,"line_start":932,"line_end":932,"column_start":5,"column_end":76}},{"value":"/ underscores) corresponding to a named capture group.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401639,"byte_end":401695,"line_start":933,"line_end":933,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401700,"byte_end":401703,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ If `name` isn't a valid capture group (whether the name doesn't exist","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401708,"byte_end":401781,"line_start":935,"line_end":935,"column_start":5,"column_end":78}},{"value":"/ or isn't a valid index), then it is replaced with the empty string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401786,"byte_end":401857,"line_start":936,"line_end":936,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401862,"byte_end":401865,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ The longest possible name is used. e.g., `$1a` looks up the capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401870,"byte_end":401941,"line_start":938,"line_end":938,"column_start":5,"column_end":76}},{"value":"/ group named `1a` and not the capture group at index `1`. To exert more","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":401946,"byte_end":402020,"line_start":939,"line_end":939,"column_start":5,"column_end":79}},{"value":"/ precise control over the name, use braces, e.g., `${1}a`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402025,"byte_end":402086,"line_start":940,"line_end":940,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402091,"byte_end":402094,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ To write a literal `$` use `$$`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402099,"byte_end":402135,"line_start":942,"line_end":942,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402464,"byte_end":402467,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"/ Returns the number of captured groups.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402258,"byte_end":402300,"line_start":947,"line_end":947,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402305,"byte_end":402308,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1`, since every regex has at least one capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402313,"byte_end":402388,"line_start":949,"line_end":949,"column_start":5,"column_end":80}},{"value":"/ group that corresponds to the full match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402393,"byte_end":402438,"line_start":950,"line_end":950,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402443,"byte_end":402452,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405597,"byte_end":405614,"line_start":1049,"line_end":1049,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1069}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[{"value":"/ An iterator that yields all capturing matches in the order in which they","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405145,"byte_end":405221,"line_start":1040,"line_end":1040,"column_start":1,"column_end":77}},{"value":"/ appear in the regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405222,"byte_end":405246,"line_start":1041,"line_end":1041,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405247,"byte_end":405250,"line_start":1042,"line_end":1042,"column_start":1,"column_end":4}},{"value":"/ If a particular capture group didn't participate in the match, then `None`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405251,"byte_end":405329,"line_start":1043,"line_end":1043,"column_start":1,"column_end":79}},{"value":"/ is yielded for that capture. The first match always corresponds to the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405330,"byte_end":405404,"line_start":1044,"line_end":1044,"column_start":1,"column_end":75}},{"value":"/ overall match of the regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405405,"byte_end":405436,"line_start":1045,"line_end":1045,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405437,"byte_end":405440,"line_start":1046,"line_end":1046,"column_start":1,"column_end":4}},{"value":"/ The lifetime `'c` corresponds to the lifetime of the `Captures` value, and","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405441,"byte_end":405519,"line_start":1047,"line_end":1047,"column_start":1,"column_end":79}},{"value":"/ the lifetime `'t` corresponds to the originally matched text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405520,"byte_end":405585,"line_start":1048,"line_end":1048,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406307,"byte_end":406315,"line_start":1070,"line_end":1070,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1081}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[{"value":"/ Replacer describes types that can be used to replace matches in a byte","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405943,"byte_end":406017,"line_start":1063,"line_end":1063,"column_start":1,"column_end":75}},{"value":"/ string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406018,"byte_end":406029,"line_start":1064,"line_end":1064,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406030,"byte_end":406033,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ In general, users of this crate shouldn't need to implement this trait,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406034,"byte_end":406109,"line_start":1066,"line_end":1066,"column_start":1,"column_end":76}},{"value":"/ since implementations are already provided for `&[u8]` and","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406110,"byte_end":406172,"line_start":1067,"line_end":1067,"column_start":1,"column_end":63}},{"value":"/ `FnMut(&Captures) -> Vec<u8>` (or any `FnMut(&Captures) -> T`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406173,"byte_end":406238,"line_start":1068,"line_end":1068,"column_start":1,"column_end":66}},{"value":"/ where `T: AsRef<[u8]>`), which covers most use cases.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406239,"byte_end":406296,"line_start":1069,"line_end":1069,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406601,"byte_end":406615,"line_start":1078,"line_end":1078,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"pub fn replace_append(&mut Self, &Captures, &mut Vec<u8>)","parent":{"krate":0,"index":1077},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[{"value":"/ Appends text to `dst` to replace the current match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406322,"byte_end":406377,"line_start":1071,"line_end":1071,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406382,"byte_end":406385,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ The current match is represented by `caps`, which is guaranteed to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406390,"byte_end":406460,"line_start":1073,"line_end":1073,"column_start":5,"column_end":75}},{"value":"/ have a match at capture group `0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406465,"byte_end":406503,"line_start":1074,"line_end":1074,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406508,"byte_end":406511,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ For example, a no-op replacement would be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406516,"byte_end":406561,"line_start":1076,"line_end":1076,"column_start":5,"column_end":50}},{"value":"/ `dst.extend(&caps[0])`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406566,"byte_end":406593,"line_start":1077,"line_end":1077,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407026,"byte_end":407038,"line_start":1087,"line_end":1087,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"pub fn no_expansion<'r>(&'r mut Self) -> Option<Cow>","parent":{"krate":0,"index":1077},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[{"value":"/ Return a fixed unchanging replacement byte string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406669,"byte_end":406723,"line_start":1080,"line_end":1080,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406728,"byte_end":406731,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ When doing replacements, if access to `Captures` is not needed (e.g.,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406736,"byte_end":406809,"line_start":1082,"line_end":1082,"column_start":5,"column_end":78}},{"value":"/ the replacement byte string does not need `$` expansion), then it can","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406814,"byte_end":406887,"line_start":1083,"line_end":1083,"column_start":5,"column_end":78}},{"value":"/ be beneficial to avoid finding sub-captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406892,"byte_end":406940,"line_start":1084,"line_end":1084,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406945,"byte_end":406948,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ In general, this is called once for every call to `replacen`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":406953,"byte_end":407018,"line_start":1086,"line_end":1086,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407769,"byte_end":407775,"line_start":1112,"line_end":1112,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"pub fn by_ref<'r>(&'r mut Self) -> ReplacerRef","parent":{"krate":0,"index":1077},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[{"value":"/ Return a `Replacer` that borrows and wraps this `Replacer`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407108,"byte_end":407171,"line_start":1091,"line_end":1091,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407176,"byte_end":407179,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ This is useful when you want to take a generic `Replacer` (which might","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407184,"byte_end":407258,"line_start":1093,"line_end":1093,"column_start":5,"column_end":79}},{"value":"/ not be cloneable) and use it without consuming it, so it can be used","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407263,"byte_end":407335,"line_start":1094,"line_end":1094,"column_start":5,"column_end":77}},{"value":"/ more than once.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407340,"byte_end":407359,"line_start":1095,"line_end":1095,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407364,"byte_end":407367,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407372,"byte_end":407385,"line_start":1097,"line_end":1097,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407390,"byte_end":407393,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407398,"byte_end":407405,"line_start":1099,"line_end":1099,"column_start":5,"column_end":12}},{"value":"/ use regex::bytes::{Regex, Replacer};","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407410,"byte_end":407450,"line_start":1100,"line_end":1100,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407455,"byte_end":407458,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ fn replace_all_twice<R: Replacer>(","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407463,"byte_end":407501,"line_start":1102,"line_end":1102,"column_start":5,"column_end":43}},{"value":"/     re: Regex,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407506,"byte_end":407524,"line_start":1103,"line_end":1103,"column_start":5,"column_end":23}},{"value":"/     src: &[u8],","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407529,"byte_end":407548,"line_start":1104,"line_end":1104,"column_start":5,"column_end":24}},{"value":"/     mut rep: R,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407553,"byte_end":407572,"line_start":1105,"line_end":1105,"column_start":5,"column_end":24}},{"value":"/ ) -> Vec<u8> {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407577,"byte_end":407595,"line_start":1106,"line_end":1106,"column_start":5,"column_end":23}},{"value":"/     let dst = re.replace_all(src, rep.by_ref());","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407600,"byte_end":407652,"line_start":1107,"line_end":1107,"column_start":5,"column_end":57}},{"value":"/     let dst = re.replace_all(&dst, rep.by_ref());","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407657,"byte_end":407710,"line_start":1108,"line_end":1108,"column_start":5,"column_end":58}},{"value":"/     dst.into_owned()","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407715,"byte_end":407739,"line_start":1109,"line_end":1109,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407744,"byte_end":407749,"line_start":1110,"line_end":1110,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407754,"byte_end":407761,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2351},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":408003,"byte_end":408014,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[{"value":"/ By-reference adaptor for a `Replacer`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407856,"byte_end":407897,"line_start":1117,"line_end":1117,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407898,"byte_end":407901,"line_start":1118,"line_end":1118,"column_start":1,"column_end":4}},{"value":"/ Returned by [`Replacer::by_ref`](trait.Replacer.html#method.by_ref).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":407902,"byte_end":407974,"line_start":1119,"line_end":1119,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409299,"byte_end":409307,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[{"value":"/ `NoExpand` indicates literal byte string replacement.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":408880,"byte_end":408937,"line_start":1151,"line_end":1151,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":408938,"byte_end":408941,"line_start":1152,"line_end":1152,"column_start":1,"column_end":4}},{"value":"/ It can be used with `replace` and `replace_all` to do a literal byte string","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":408942,"byte_end":409021,"line_start":1153,"line_end":1153,"column_start":1,"column_end":80}},{"value":"/ replacement without expanding `$name` to their corresponding capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409022,"byte_end":409094,"line_start":1154,"line_end":1154,"column_start":1,"column_end":73}},{"value":"/ groups. This can be both convenient (to avoid escaping `$`, for example)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409095,"byte_end":409171,"line_start":1155,"line_end":1155,"column_start":1,"column_end":77}},{"value":"/ and performant (since capture groups don't need to be found).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409172,"byte_end":409237,"line_start":1156,"line_end":1156,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409238,"byte_end":409241,"line_start":1157,"line_end":1157,"column_start":1,"column_end":4}},{"value":"/ `'t` is the lifetime of the literal text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409242,"byte_end":409287,"line_start":1158,"line_end":1158,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409312,"byte_end":409324,"line_start":1159,"line_end":1159,"column_start":25,"column_end":37},"name":"0","qualname":"::re_bytes::NoExpand::0","value":"&'t [u8]","parent":{"krate":0,"index":1097},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426105,"byte_end":426114,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[{"value":"/ Locations represents the offsets of each capturing group in a regex for","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":425891,"byte_end":425966,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ a single match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":425967,"byte_end":425986,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":425987,"byte_end":425990,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Unlike `Captures`, a `Locations` value only stores offsets.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":425991,"byte_end":426054,"line_start":19,"line_end":19,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426443,"byte_end":426446,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"pub fn pos(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"/ Returns the start and end positions of the Nth capture group. Returns","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426149,"byte_end":426222,"line_start":25,"line_end":25,"column_start":5,"column_end":78}},{"value":"/ `None` if `i` is not a valid capture group or if the capture group did","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426227,"byte_end":426301,"line_start":26,"line_end":26,"column_start":5,"column_end":79}},{"value":"/ not match anything. The positions returned are *always* byte indices","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426306,"byte_end":426378,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/ with respect to the original string matched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426383,"byte_end":426431,"line_start":28,"line_end":28,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426890,"byte_end":426894,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"pub fn iter(&Self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[{"value":"/ Creates an iterator of all the capture group positions in order of","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426686,"byte_end":426756,"line_start":37,"line_end":37,"column_start":5,"column_end":75}},{"value":"/ appearance in the regular expression. Positions are byte indices","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426761,"byte_end":426829,"line_start":38,"line_end":38,"column_start":5,"column_end":73}},{"value":"/ in terms of the original string matched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426834,"byte_end":426878,"line_start":39,"line_end":39,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427189,"byte_end":427192,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"/ Returns the total number of capturing groups.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426987,"byte_end":427036,"line_start":44,"line_end":44,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427041,"byte_end":427044,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1` since every regex has at least `1`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427049,"byte_end":427115,"line_start":46,"line_end":46,"column_start":5,"column_end":71}},{"value":"/ capturing group that corresponds to the entire match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427120,"byte_end":427177,"line_start":47,"line_end":47,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427605,"byte_end":427623,"line_start":64,"line_end":64,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1117}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[{"value":"/ An iterator over capture group positions for a particular match of a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427375,"byte_end":427447,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/ regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427448,"byte_end":427471,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427472,"byte_end":427475,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Positions are byte indices in terms of the original string matched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427476,"byte_end":427547,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427548,"byte_end":427551,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ `'c` is the lifetime of the captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427552,"byte_end":427593,"line_start":63,"line_end":63,"column_start":1,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":1122},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428826,"byte_end":428843,"line_start":99,"line_end":99,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[{"value":"/ `RegularExpression` describes types that can implement regex searching.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428109,"byte_end":428184,"line_start":87,"line_end":87,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428185,"byte_end":428188,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ This trait is my attempt at reducing code duplication and to standardize","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428189,"byte_end":428265,"line_start":89,"line_end":89,"column_start":1,"column_end":77}},{"value":"/ the internal API. Specific duplication that is avoided are the `find`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428266,"byte_end":428339,"line_start":90,"line_end":90,"column_start":1,"column_end":74}},{"value":"/ and `capture` iterators, which are slightly tricky.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428340,"byte_end":428395,"line_start":91,"line_end":91,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428396,"byte_end":428399,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ It's not clear whether this trait is worth it, and it also isn't","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428400,"byte_end":428468,"line_start":93,"line_end":93,"column_start":1,"column_end":69}},{"value":"/ clear whether it's useful as a public trait or not. Methods like","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428469,"byte_end":428537,"line_start":94,"line_end":94,"column_start":1,"column_end":69}},{"value":"/ `next_after_empty` reak of bad design, but the rest of the methods seem","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428538,"byte_end":428613,"line_start":95,"line_end":95,"column_start":1,"column_end":76}},{"value":"/ somewhat reasonable. One particular thing this trait would expose would be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428614,"byte_end":428692,"line_start":96,"line_end":96,"column_start":1,"column_end":79}},{"value":"/ the ability to start the search of a regex anywhere in a haystack, which","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428693,"byte_end":428769,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ isn't possible in the current public API.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428770,"byte_end":428815,"line_start":98,"line_end":98,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1123},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428896,"byte_end":428900,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[{"value":"/ The type of the haystack.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428857,"byte_end":428886,"line_start":100,"line_end":100,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429075,"byte_end":429084,"line_start":105,"line_end":105,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"pub fn slots_len(&Self) -> usize","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[{"value":"/ The number of capture slots in the compiled regular expression. This is","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428915,"byte_end":428990,"line_start":103,"line_end":103,"column_start":5,"column_end":80}},{"value":"/ always two times the number of capture groups (two slots per group).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428995,"byte_end":429067,"line_start":104,"line_end":104,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429180,"byte_end":429189,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"pub fn locations(&Self) -> Locations","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[{"value":"/ Allocates fresh space for all capturing groups in this regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429107,"byte_end":429172,"line_start":107,"line_end":107,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429535,"byte_end":429551,"line_start":117,"line_end":117,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"pub fn next_after_empty(&Self, &Self::Text, usize) -> usize","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[{"value":"/ Returns the position of the next character after `i`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429271,"byte_end":429328,"line_start":112,"line_end":112,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429333,"byte_end":429336,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ For example, a haystack with type `&[u8]` probably returns `i+1`,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429341,"byte_end":429410,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ whereas a haystack with type `&str` probably returns `i` plus the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429415,"byte_end":429484,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ length of the next UTF-8 sequence.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429489,"byte_end":429527,"line_start":116,"line_end":116,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429658,"byte_end":429675,"line_start":120,"line_end":120,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"pub fn shortest_match_at(&Self, &Self::Text, usize) -> Option<usize>","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[{"value":"/ Returns the location of the shortest match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429603,"byte_end":429650,"line_start":119,"line_end":119,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429831,"byte_end":429842,"line_start":127,"line_end":127,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"pub fn is_match_at(&Self, &Self::Text, usize) -> bool","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[{"value":"/ Returns whether the regex matches the text given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429770,"byte_end":429823,"line_start":126,"line_end":126,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429996,"byte_end":430003,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"pub fn find_at(&Self, &Self::Text, usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[{"value":"/ Returns the leftmost-first match location if one exists.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":429928,"byte_end":429988,"line_start":133,"line_end":133,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430238,"byte_end":430254,"line_start":142,"line_end":142,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"pub fn captures_read_at(&Self, &mut Locations, &Self::Text, usize)\n-> Option<(usize, usize)>","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[{"value":"/ Returns the leftmost-first match location if one exists, and also","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430107,"byte_end":430176,"line_start":140,"line_end":140,"column_start":5,"column_end":74}},{"value":"/ fills in any matching capture slot locations.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430181,"byte_end":430230,"line_start":141,"line_end":141,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430487,"byte_end":430496,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"pub fn find_iter(Self, &Self::Text) -> Matches<, Self>","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all non-overlapping successive leftmost-first","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430388,"byte_end":430462,"line_start":149,"line_end":149,"column_start":5,"column_end":79}},{"value":"/ matches.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430467,"byte_end":430479,"line_start":150,"line_end":150,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430818,"byte_end":430831,"line_start":165,"line_end":165,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"pub fn captures_iter(Self, &Self::Text) -> CaptureMatches<, Self>","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all non-overlapping successive leftmost-first","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430705,"byte_end":430779,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/ matches with captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430784,"byte_end":430810,"line_start":164,"line_end":164,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431047,"byte_end":431054,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping successive leftmost-first matches.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":430960,"byte_end":431035,"line_start":173,"line_end":173,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431313,"byte_end":431317,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"pub fn text(&Self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[{"value":"/ Return the text being searched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431266,"byte_end":431301,"line_start":182,"line_end":182,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431415,"byte_end":431420,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"pub fn regex(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[{"value":"/ Return the underlying regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431371,"byte_end":431403,"line_start":187,"line_end":187,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1150},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432620,"byte_end":432634,"line_start":225,"line_end":225,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping successive leftmost-first matches with","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432515,"byte_end":432594,"line_start":223,"line_end":223,"column_start":1,"column_end":80}},{"value":"/ captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432595,"byte_end":432608,"line_start":224,"line_end":224,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432831,"byte_end":432835,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"pub fn text(&Self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[{"value":"/ Return the text being searched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432784,"byte_end":432819,"line_start":229,"line_end":229,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432937,"byte_end":432942,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"pub fn regex(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[{"value":"/ Return the underlying regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432893,"byte_end":432925,"line_start":234,"line_end":234,"column_start":5,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":434823,"byte_end":434829,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"pub fn escape(&str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[{"value":"/ Escapes all regular expression meta characters in `text`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":434665,"byte_end":434726,"line_start":27,"line_end":27,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":434727,"byte_end":434730,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The string returned may be safely used as a literal in a regular","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":434731,"byte_end":434799,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/ expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":434800,"byte_end":434815,"line_start":30,"line_end":30,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2517},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435080,"byte_end":435085,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2521}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"/ Match represents a single match of a regex in a haystack.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":434882,"byte_end":434943,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":434944,"byte_end":434947,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'t` refers to the lifetime of the matched text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":434948,"byte_end":435023,"line_start":37,"line_end":37,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435265,"byte_end":435270,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"pub fn start(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"/ Returns the starting byte offset of the match in the haystack.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435173,"byte_end":435239,"line_start":46,"line_end":46,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435244,"byte_end":435253,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435409,"byte_end":435412,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"pub fn end(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"/ Returns the ending byte offset of the match in the haystack.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435319,"byte_end":435383,"line_start":52,"line_end":52,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435388,"byte_end":435397,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435514,"byte_end":435520,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"pub fn as_str(&Self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"/ Returns the matched text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435459,"byte_end":435488,"line_start":58,"line_end":58,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435493,"byte_end":435502,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2541},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438225,"byte_end":438230,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[{"value":"/ A compiled regular expression for matching Unicode strings.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435961,"byte_end":436024,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436025,"byte_end":436028,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ It is represented as either a sequence of bytecode instructions (dynamic)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436029,"byte_end":436106,"line_start":83,"line_end":83,"column_start":1,"column_end":78}},{"value":"/ or as a specialized Rust function (native). It can be used to search, split","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436107,"byte_end":436186,"line_start":84,"line_end":84,"column_start":1,"column_end":80}},{"value":"/ or replace text. All searching is done with an implicit `.*?` at the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436187,"byte_end":436259,"line_start":85,"line_end":85,"column_start":1,"column_end":73}},{"value":"/ beginning and end of an expression. To force an expression to match the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436260,"byte_end":436335,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/ whole string (or a prefix or a suffix), you must use an anchor like `^` or","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436336,"byte_end":436414,"line_start":87,"line_end":87,"column_start":1,"column_end":79}},{"value":"/ `$` (or `\\A` and `\\z`).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436415,"byte_end":436442,"line_start":88,"line_end":88,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436443,"byte_end":436446,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ While this crate will handle Unicode strings (whether in the regular","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436447,"byte_end":436519,"line_start":90,"line_end":90,"column_start":1,"column_end":73}},{"value":"/ expression or in the search text), all positions returned are **byte","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436520,"byte_end":436592,"line_start":91,"line_end":91,"column_start":1,"column_end":73}},{"value":"/ indices**. Every byte index is guaranteed to be at a Unicode code point","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436593,"byte_end":436668,"line_start":92,"line_end":92,"column_start":1,"column_end":76}},{"value":"/ boundary.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436669,"byte_end":436682,"line_start":93,"line_end":93,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436683,"byte_end":436686,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The lifetimes `'r` and `'t` in this crate correspond to the lifetime of a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436687,"byte_end":436764,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/ compiled regular expression and text to search, respectively.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436765,"byte_end":436830,"line_start":96,"line_end":96,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436831,"byte_end":436834,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ The only methods that allocate new strings are the string replacement","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436835,"byte_end":436908,"line_start":98,"line_end":98,"column_start":1,"column_end":74}},{"value":"/ methods. All other methods (searching and splitting) return borrowed","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436909,"byte_end":436981,"line_start":99,"line_end":99,"column_start":1,"column_end":73}},{"value":"/ pointers into the string given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":436982,"byte_end":437017,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437018,"byte_end":437021,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437022,"byte_end":437036,"line_start":102,"line_end":102,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437037,"byte_end":437040,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Find the location of a US phone number:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437041,"byte_end":437084,"line_start":104,"line_end":104,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437085,"byte_end":437088,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437089,"byte_end":437100,"line_start":106,"line_end":106,"column_start":1,"column_end":12}},{"value":"/ # use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437101,"byte_end":437124,"line_start":107,"line_end":107,"column_start":1,"column_end":24}},{"value":"/ let re = Regex::new(\"[0-9]{3}-[0-9]{3}-[0-9]{4}\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437125,"byte_end":437188,"line_start":108,"line_end":108,"column_start":1,"column_end":64}},{"value":"/ let mat = re.find(\"phone: 111-222-3333\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437189,"byte_end":437243,"line_start":109,"line_end":109,"column_start":1,"column_end":55}},{"value":"/ assert_eq!((mat.start(), mat.end()), (7, 19));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437244,"byte_end":437294,"line_start":110,"line_end":110,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437295,"byte_end":437302,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437303,"byte_end":437306,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ # Using the `std::str::pattern` methods with `Regex`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437307,"byte_end":437363,"line_start":113,"line_end":113,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437364,"byte_end":437367,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ > **Note**: This section requires that this crate is compiled with the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437368,"byte_end":437442,"line_start":115,"line_end":115,"column_start":1,"column_end":75}},{"value":"/ > `pattern` Cargo feature enabled, which **requires nightly Rust**.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437443,"byte_end":437514,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437515,"byte_end":437518,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Since `Regex` implements `Pattern`, you can use regexes with methods","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437519,"byte_end":437591,"line_start":118,"line_end":118,"column_start":1,"column_end":73}},{"value":"/ defined on `&str`. For example, `is_match`, `find`, `find_iter`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437592,"byte_end":437659,"line_start":119,"line_end":119,"column_start":1,"column_end":68}},{"value":"/ and `split` can be replaced with `str::contains`, `str::find`,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437660,"byte_end":437726,"line_start":120,"line_end":120,"column_start":1,"column_end":67}},{"value":"/ `str::match_indices` and `str::split`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437727,"byte_end":437769,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437770,"byte_end":437773,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Here are some examples:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437774,"byte_end":437801,"line_start":123,"line_end":123,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437802,"byte_end":437805,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437806,"byte_end":437824,"line_start":125,"line_end":125,"column_start":1,"column_end":19}},{"value":"/ # use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437825,"byte_end":437848,"line_start":126,"line_end":126,"column_start":1,"column_end":24}},{"value":"/ let re = Regex::new(r\"\\d+\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437849,"byte_end":437890,"line_start":127,"line_end":127,"column_start":1,"column_end":42}},{"value":"/ let haystack = \"a111b222c\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437891,"byte_end":437922,"line_start":128,"line_end":128,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437923,"byte_end":437926,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ assert!(haystack.contains(&re));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437927,"byte_end":437963,"line_start":130,"line_end":130,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(haystack.find(&re), Some(1));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":437964,"byte_end":438008,"line_start":131,"line_end":131,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(haystack.match_indices(&re).collect::<Vec<_>>(),","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438009,"byte_end":438072,"line_start":132,"line_end":132,"column_start":1,"column_end":64}},{"value":"/            vec![(1, 4), (5, 8)]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438073,"byte_end":438110,"line_start":133,"line_end":133,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(haystack.split(&re).collect::<Vec<_>>(), vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438111,"byte_end":438188,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438189,"byte_end":438196,"line_start":135,"line_end":135,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439172,"byte_end":439175,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"pub fn new(&str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[{"value":"/ Compiles a regular expression. Once compiled, it can be used repeatedly","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438953,"byte_end":439028,"line_start":171,"line_end":171,"column_start":5,"column_end":80}},{"value":"/ to search, split or replace text in a string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439033,"byte_end":439082,"line_start":172,"line_end":172,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439087,"byte_end":439090,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ If an invalid expression is given, then an error is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439095,"byte_end":439160,"line_start":174,"line_end":174,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439905,"byte_end":439913,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"pub fn is_match(&Self, &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[{"value":"/ Returns true if and only if the regex matches the string given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439261,"byte_end":439328,"line_start":179,"line_end":179,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439333,"byte_end":439336,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ It is recommended to use this method if all you need to do is test","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439341,"byte_end":439411,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"/ a match, since the underlying matching engine may be able to do less","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439416,"byte_end":439488,"line_start":182,"line_end":182,"column_start":5,"column_end":77}},{"value":"/ work.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439493,"byte_end":439502,"line_start":183,"line_end":183,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439507,"byte_end":439510,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439515,"byte_end":439528,"line_start":185,"line_end":185,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439533,"byte_end":439536,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Test if some text contains at least one word with exactly 13","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439541,"byte_end":439605,"line_start":187,"line_end":187,"column_start":5,"column_end":69}},{"value":"/ Unicode word characters:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439610,"byte_end":439638,"line_start":188,"line_end":188,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439643,"byte_end":439646,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439651,"byte_end":439662,"line_start":190,"line_end":190,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439667,"byte_end":439710,"line_start":191,"line_end":191,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439715,"byte_end":439732,"line_start":192,"line_end":192,"column_start":5,"column_end":22}},{"value":"/ let text = \"I categorically deny having triskaidekaphobia.\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439737,"byte_end":439801,"line_start":193,"line_end":193,"column_start":5,"column_end":69}},{"value":"/ assert!(Regex::new(r\"\\b\\w{13}\\b\").unwrap().is_match(text));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439806,"byte_end":439869,"line_start":194,"line_end":194,"column_start":5,"column_end":68}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439874,"byte_end":439881,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439886,"byte_end":439893,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440789,"byte_end":440793,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"pub fn find<'t>(&Self, &'t str) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the start and end byte range of the leftmost-first match in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":439988,"byte_end":440059,"line_start":201,"line_end":201,"column_start":5,"column_end":76}},{"value":"/ `text`. If no match exists, then `None` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440064,"byte_end":440120,"line_start":202,"line_end":202,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440125,"byte_end":440128,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Note that this should only be used if you want to discover the position","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440133,"byte_end":440208,"line_start":204,"line_end":204,"column_start":5,"column_end":80}},{"value":"/ of the match. Testing the existence of a match is faster if you use","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440213,"byte_end":440284,"line_start":205,"line_end":205,"column_start":5,"column_end":76}},{"value":"/ `is_match`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440289,"byte_end":440304,"line_start":206,"line_end":206,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440309,"byte_end":440312,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440317,"byte_end":440330,"line_start":208,"line_end":208,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440335,"byte_end":440338,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Find the start and end location of the first word with exactly 13","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440343,"byte_end":440412,"line_start":210,"line_end":210,"column_start":5,"column_end":74}},{"value":"/ Unicode word characters:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440417,"byte_end":440445,"line_start":211,"line_end":211,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440450,"byte_end":440453,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440458,"byte_end":440469,"line_start":213,"line_end":213,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440474,"byte_end":440517,"line_start":214,"line_end":214,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440522,"byte_end":440539,"line_start":215,"line_end":215,"column_start":5,"column_end":22}},{"value":"/ let text = \"I categorically deny having triskaidekaphobia.\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440544,"byte_end":440608,"line_start":216,"line_end":216,"column_start":5,"column_end":69}},{"value":"/ let mat = Regex::new(r\"\\b\\w{13}\\b\").unwrap().find(text).unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440613,"byte_end":440682,"line_start":217,"line_end":217,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(mat.start(), 2);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440687,"byte_end":440718,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(mat.end(), 15);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440723,"byte_end":440753,"line_start":219,"line_end":219,"column_start":5,"column_end":35}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440758,"byte_end":440765,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440770,"byte_end":440777,"line_start":221,"line_end":221,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441507,"byte_end":441516,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"pub fn find_iter<'r, 't>(&'r Self, &'t str) -> Matches","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[{"value":"/ Returns an iterator for each successive non-overlapping match in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440884,"byte_end":440952,"line_start":226,"line_end":226,"column_start":5,"column_end":73}},{"value":"/ `text`, returning the start and end byte indices with respect to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":440957,"byte_end":441025,"line_start":227,"line_end":227,"column_start":5,"column_end":73}},{"value":"/ `text`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441030,"byte_end":441041,"line_start":228,"line_end":228,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441046,"byte_end":441049,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441054,"byte_end":441067,"line_start":230,"line_end":230,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441072,"byte_end":441075,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Find the start and end location of every word with exactly 13 Unicode","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441080,"byte_end":441153,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"/ word characters:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441158,"byte_end":441178,"line_start":233,"line_end":233,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441183,"byte_end":441186,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441191,"byte_end":441202,"line_start":235,"line_end":235,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441207,"byte_end":441250,"line_start":236,"line_end":236,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441255,"byte_end":441272,"line_start":237,"line_end":237,"column_start":5,"column_end":22}},{"value":"/ let text = \"Retroactively relinquishing remunerations is reprehensible.\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441277,"byte_end":441354,"line_start":238,"line_end":238,"column_start":5,"column_end":82}},{"value":"/ for mat in Regex::new(r\"\\b\\w{13}\\b\").unwrap().find_iter(text) {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441359,"byte_end":441426,"line_start":239,"line_end":239,"column_start":5,"column_end":72}},{"value":"/     println!(\"{:?}\", mat);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441431,"byte_end":441461,"line_start":240,"line_end":240,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441466,"byte_end":441471,"line_start":241,"line_end":241,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441476,"byte_end":441483,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441488,"byte_end":441495,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444596,"byte_end":444604,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"pub fn captures<'t>(&Self, &'t str) -> Option<Captures>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the capture groups corresponding to the leftmost-first","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441637,"byte_end":441703,"line_start":248,"line_end":248,"column_start":5,"column_end":71}},{"value":"/ match in `text`. Capture group `0` always corresponds to the entire","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441708,"byte_end":441779,"line_start":249,"line_end":249,"column_start":5,"column_end":76}},{"value":"/ match. If no match is found, then `None` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441784,"byte_end":441841,"line_start":250,"line_end":250,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441846,"byte_end":441849,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ You should only use `captures` if you need access to the location of","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441854,"byte_end":441926,"line_start":252,"line_end":252,"column_start":5,"column_end":77}},{"value":"/ capturing group matches. Otherwise, `find` is faster for discovering","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":441931,"byte_end":442003,"line_start":253,"line_end":253,"column_start":5,"column_end":77}},{"value":"/ the location of the overall match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442008,"byte_end":442046,"line_start":254,"line_end":254,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442051,"byte_end":442054,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442059,"byte_end":442073,"line_start":256,"line_end":256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442078,"byte_end":442081,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Say you have some text with movie names and their release years,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442086,"byte_end":442154,"line_start":258,"line_end":258,"column_start":5,"column_end":73}},{"value":"/ like \"'Citizen Kane' (1941)\". It'd be nice if we could search for text","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442159,"byte_end":442233,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ looking like that, while also extracting the movie name and its release","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442238,"byte_end":442313,"line_start":260,"line_end":260,"column_start":5,"column_end":80}},{"value":"/ year separately.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442318,"byte_end":442338,"line_start":261,"line_end":261,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442343,"byte_end":442346,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442351,"byte_end":442362,"line_start":263,"line_end":263,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442367,"byte_end":442410,"line_start":264,"line_end":264,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442415,"byte_end":442432,"line_start":265,"line_end":265,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442437,"byte_end":442498,"line_start":266,"line_end":266,"column_start":5,"column_end":66}},{"value":"/ let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442503,"byte_end":442566,"line_start":267,"line_end":267,"column_start":5,"column_end":68}},{"value":"/ let caps = re.captures(text).unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442571,"byte_end":442613,"line_start":268,"line_end":268,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(caps.get(1).unwrap().as_str(), \"Citizen Kane\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442618,"byte_end":442680,"line_start":269,"line_end":269,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(caps.get(2).unwrap().as_str(), \"1941\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442685,"byte_end":442739,"line_start":270,"line_end":270,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442744,"byte_end":442815,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/ // You can also access the groups by index using the Index notation.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442820,"byte_end":442892,"line_start":272,"line_end":272,"column_start":5,"column_end":77}},{"value":"/ // Note that this will panic on an invalid index.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442897,"byte_end":442950,"line_start":273,"line_end":273,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(&caps[1], \"Citizen Kane\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":442955,"byte_end":442996,"line_start":274,"line_end":274,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(&caps[2], \"1941\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443001,"byte_end":443034,"line_start":275,"line_end":275,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443039,"byte_end":443089,"line_start":276,"line_end":276,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443094,"byte_end":443101,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443106,"byte_end":443113,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443118,"byte_end":443121,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ Note that the full match is at capture group `0`. Each subsequent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443126,"byte_end":443195,"line_start":280,"line_end":280,"column_start":5,"column_end":74}},{"value":"/ capture group is indexed by the order of its opening `(`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443200,"byte_end":443261,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443266,"byte_end":443269,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ We can make this example a bit clearer by using *named* capture groups:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443274,"byte_end":443349,"line_start":283,"line_end":283,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443354,"byte_end":443357,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443362,"byte_end":443373,"line_start":285,"line_end":285,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443378,"byte_end":443421,"line_start":286,"line_end":286,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443426,"byte_end":443443,"line_start":287,"line_end":287,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443448,"byte_end":443516,"line_start":288,"line_end":288,"column_start":5,"column_end":73}},{"value":"/                .unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443521,"byte_end":443550,"line_start":289,"line_end":289,"column_start":5,"column_end":34}},{"value":"/ let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443555,"byte_end":443618,"line_start":290,"line_end":290,"column_start":5,"column_end":68}},{"value":"/ let caps = re.captures(text).unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443623,"byte_end":443665,"line_start":291,"line_end":291,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(caps.name(\"title\").unwrap().as_str(), \"Citizen Kane\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443670,"byte_end":443739,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(caps.name(\"year\").unwrap().as_str(), \"1941\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443744,"byte_end":443804,"line_start":293,"line_end":293,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443809,"byte_end":443880,"line_start":294,"line_end":294,"column_start":5,"column_end":76}},{"value":"/ // You can also access the groups by name using the Index notation.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443885,"byte_end":443956,"line_start":295,"line_end":295,"column_start":5,"column_end":76}},{"value":"/ // Note that this will panic on an invalid group name.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":443961,"byte_end":444019,"line_start":296,"line_end":296,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(&caps[\"title\"], \"Citizen Kane\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444024,"byte_end":444071,"line_start":297,"line_end":297,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(&caps[\"year\"], \"1941\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444076,"byte_end":444114,"line_start":298,"line_end":298,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444119,"byte_end":444169,"line_start":299,"line_end":299,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444174,"byte_end":444177,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444182,"byte_end":444189,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444194,"byte_end":444201,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444206,"byte_end":444209,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Here we name the capture groups, which we can access with the `name`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444214,"byte_end":444286,"line_start":304,"line_end":304,"column_start":5,"column_end":77}},{"value":"/ method or the `Index` notation with a `&str`. Note that the named","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444291,"byte_end":444360,"line_start":305,"line_end":305,"column_start":5,"column_end":74}},{"value":"/ capture groups are still accessible with `get` or the `Index` notation","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444365,"byte_end":444439,"line_start":306,"line_end":306,"column_start":5,"column_end":79}},{"value":"/ with a `usize`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444444,"byte_end":444463,"line_start":307,"line_end":307,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444468,"byte_end":444471,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ The `0`th capture group is always unnamed, so it must always be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444476,"byte_end":444543,"line_start":309,"line_end":309,"column_start":5,"column_end":72}},{"value":"/ accessed with `get(0)` or `[0]`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444548,"byte_end":444584,"line_start":310,"line_end":310,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445937,"byte_end":445950,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"pub fn captures_iter<'r, 't>(&'r Self, &'t str) -> CaptureMatches","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[{"value":"/ Returns an iterator over all the non-overlapping capture groups matched","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444913,"byte_end":444988,"line_start":320,"line_end":320,"column_start":5,"column_end":80}},{"value":"/ in `text`. This is operationally the same as `find_iter`, except it","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":444993,"byte_end":445064,"line_start":321,"line_end":321,"column_start":5,"column_end":76}},{"value":"/ yields information about capturing group matches.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445069,"byte_end":445122,"line_start":322,"line_end":322,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445127,"byte_end":445130,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445135,"byte_end":445148,"line_start":324,"line_end":324,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445153,"byte_end":445156,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ We can use this to find all movie titles and their release years in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445161,"byte_end":445232,"line_start":326,"line_end":326,"column_start":5,"column_end":76}},{"value":"/ some text, where the movie is formatted like \"'Title' (xxxx)\":","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445237,"byte_end":445303,"line_start":327,"line_end":327,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445308,"byte_end":445311,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445316,"byte_end":445327,"line_start":329,"line_end":329,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445332,"byte_end":445375,"line_start":330,"line_end":330,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445380,"byte_end":445397,"line_start":331,"line_end":331,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445402,"byte_end":445470,"line_start":332,"line_end":332,"column_start":5,"column_end":73}},{"value":"/                .unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445475,"byte_end":445504,"line_start":333,"line_end":333,"column_start":5,"column_end":34}},{"value":"/ let text = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445509,"byte_end":445588,"line_start":334,"line_end":334,"column_start":5,"column_end":84}},{"value":"/ for caps in re.captures_iter(text) {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445593,"byte_end":445633,"line_start":335,"line_end":335,"column_start":5,"column_end":45}},{"value":"/     println!(\"Movie: {:?}, Released: {:?}\",","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445638,"byte_end":445685,"line_start":336,"line_end":336,"column_start":5,"column_end":52}},{"value":"/              &caps[\"title\"], &caps[\"year\"]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445690,"byte_end":445738,"line_start":337,"line_end":337,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445743,"byte_end":445748,"line_start":338,"line_end":338,"column_start":5,"column_end":10}},{"value":"/ // Output:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445753,"byte_end":445767,"line_start":339,"line_end":339,"column_start":5,"column_end":19}},{"value":"/ // Movie: Citizen Kane, Released: 1941","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445772,"byte_end":445814,"line_start":340,"line_end":340,"column_start":5,"column_end":47}},{"value":"/ // Movie: The Wizard of Oz, Released: 1939","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445819,"byte_end":445865,"line_start":341,"line_end":341,"column_start":5,"column_end":51}},{"value":"/ // Movie: M, Released: 1931","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445870,"byte_end":445901,"line_start":342,"line_end":342,"column_start":5,"column_end":36}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445906,"byte_end":445913,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":445918,"byte_end":445925,"line_start":344,"line_end":344,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446809,"byte_end":446814,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"pub fn split<'r, 't>(&'r Self, &'t str) -> Split","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[{"value":"/ Returns an iterator of substrings of `text` delimited by a match of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446112,"byte_end":446187,"line_start":352,"line_end":352,"column_start":5,"column_end":80}},{"value":"/ regular expression. Namely, each element of the iterator corresponds to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446192,"byte_end":446267,"line_start":353,"line_end":353,"column_start":5,"column_end":80}},{"value":"/ text that *isn't* matched by the regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446272,"byte_end":446328,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446333,"byte_end":446336,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ This method will *not* copy the text given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446341,"byte_end":446388,"line_start":356,"line_end":356,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446393,"byte_end":446396,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446401,"byte_end":446414,"line_start":358,"line_end":358,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446419,"byte_end":446422,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ To split a string delimited by arbitrary amounts of spaces or tabs:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446427,"byte_end":446498,"line_start":360,"line_end":360,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446503,"byte_end":446506,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446511,"byte_end":446522,"line_start":362,"line_end":362,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446527,"byte_end":446570,"line_start":363,"line_end":363,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446575,"byte_end":446592,"line_start":364,"line_end":364,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"[ \\t]+\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446597,"byte_end":446641,"line_start":365,"line_end":365,"column_start":5,"column_end":49}},{"value":"/ let fields: Vec<&str> = re.split(\"a b \\t  c\\td    e\").collect();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446646,"byte_end":446714,"line_start":366,"line_end":366,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(fields, vec![\"a\", \"b\", \"c\", \"d\", \"e\"]);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446719,"byte_end":446773,"line_start":367,"line_end":367,"column_start":5,"column_end":59}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446778,"byte_end":446785,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446790,"byte_end":446797,"line_start":369,"line_end":369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447802,"byte_end":447808,"line_start":397,"line_end":397,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"pub fn splitn<'r, 't>(&'r Self, &'t str, usize) -> SplitN","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of `text` delimited","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":446967,"byte_end":447040,"line_start":377,"line_end":377,"column_start":5,"column_end":78}},{"value":"/ by a match of the regular expression. (A `limit` of `0` will return no","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447045,"byte_end":447119,"line_start":378,"line_end":378,"column_start":5,"column_end":79}},{"value":"/ substrings.) Namely, each element of the iterator corresponds to text","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447124,"byte_end":447197,"line_start":379,"line_end":379,"column_start":5,"column_end":78}},{"value":"/ that *isn't* matched by the regular expression. The remainder of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447202,"byte_end":447274,"line_start":380,"line_end":380,"column_start":5,"column_end":77}},{"value":"/ string that is not split will be the last element in the iterator.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447279,"byte_end":447349,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447354,"byte_end":447357,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ This method will *not* copy the text given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447362,"byte_end":447409,"line_start":383,"line_end":383,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447414,"byte_end":447417,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447422,"byte_end":447435,"line_start":385,"line_end":385,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447440,"byte_end":447443,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Get the first two words in some text:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447448,"byte_end":447489,"line_start":387,"line_end":387,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447494,"byte_end":447497,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447502,"byte_end":447513,"line_start":389,"line_end":389,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447518,"byte_end":447561,"line_start":390,"line_end":390,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447566,"byte_end":447583,"line_start":391,"line_end":391,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"\\W+\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447588,"byte_end":447629,"line_start":392,"line_end":392,"column_start":5,"column_end":46}},{"value":"/ let fields: Vec<&str> = re.splitn(\"Hey! How are you?\", 3).collect();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447634,"byte_end":447706,"line_start":393,"line_end":393,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(fields, vec!(\"Hey\", \"How\", \"are you?\"));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447711,"byte_end":447766,"line_start":394,"line_end":394,"column_start":5,"column_end":60}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447771,"byte_end":447778,"line_start":395,"line_end":395,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447783,"byte_end":447790,"line_start":396,"line_end":396,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452345,"byte_end":452352,"line_start":509,"line_end":509,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"pub fn replace<'t, R: Replacer>(&Self, &'t str, R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[{"value":"/ Replaces the leftmost-first match with the replacement provided.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":447999,"byte_end":448067,"line_start":405,"line_end":405,"column_start":5,"column_end":73}},{"value":"/ The replacement can be a regular string (where `$N` and `$name` are","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448072,"byte_end":448143,"line_start":406,"line_end":406,"column_start":5,"column_end":76}},{"value":"/ expanded to match capture groups) or a function that takes the matches'","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448148,"byte_end":448223,"line_start":407,"line_end":407,"column_start":5,"column_end":80}},{"value":"/ `Captures` and returns the replaced string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448228,"byte_end":448275,"line_start":408,"line_end":408,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448280,"byte_end":448283,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ If no match is found, then a copy of the string is returned unchanged.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448288,"byte_end":448362,"line_start":410,"line_end":410,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448367,"byte_end":448370,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Replacement string syntax","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448375,"byte_end":448406,"line_start":412,"line_end":412,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448411,"byte_end":448414,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ All instances of `$name` in the replacement text is replaced with the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448419,"byte_end":448492,"line_start":414,"line_end":414,"column_start":5,"column_end":78}},{"value":"/ corresponding capture group `name`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448497,"byte_end":448536,"line_start":415,"line_end":415,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448541,"byte_end":448544,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ `name` may be an integer corresponding to the index of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448549,"byte_end":448611,"line_start":417,"line_end":417,"column_start":5,"column_end":67}},{"value":"/ capture group (counted by order of opening parenthesis where `0` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448616,"byte_end":448691,"line_start":418,"line_end":418,"column_start":5,"column_end":80}},{"value":"/ entire match) or it can be a name (consisting of letters, digits or","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448696,"byte_end":448767,"line_start":419,"line_end":419,"column_start":5,"column_end":76}},{"value":"/ underscores) corresponding to a named capture group.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448772,"byte_end":448828,"line_start":420,"line_end":420,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448833,"byte_end":448836,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ If `name` isn't a valid capture group (whether the name doesn't exist","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448841,"byte_end":448914,"line_start":422,"line_end":422,"column_start":5,"column_end":78}},{"value":"/ or isn't a valid index), then it is replaced with the empty string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448919,"byte_end":448990,"line_start":423,"line_end":423,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":448995,"byte_end":448998,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ The longest possible name is used. e.g., `$1a` looks up the capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449003,"byte_end":449074,"line_start":425,"line_end":425,"column_start":5,"column_end":76}},{"value":"/ group named `1a` and not the capture group at index `1`. To exert more","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449079,"byte_end":449153,"line_start":426,"line_end":426,"column_start":5,"column_end":79}},{"value":"/ precise control over the name, use braces, e.g., `${1}a`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449158,"byte_end":449219,"line_start":427,"line_end":427,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449224,"byte_end":449227,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ To write a literal `$` use `$$`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449232,"byte_end":449268,"line_start":429,"line_end":429,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449273,"byte_end":449276,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449281,"byte_end":449295,"line_start":431,"line_end":431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449300,"byte_end":449303,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ Note that this function is polymorphic with respect to the replacement.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449308,"byte_end":449383,"line_start":433,"line_end":433,"column_start":5,"column_end":80}},{"value":"/ In typical usage, this can just be a normal string:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449388,"byte_end":449443,"line_start":434,"line_end":434,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449448,"byte_end":449451,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449456,"byte_end":449467,"line_start":436,"line_end":436,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449472,"byte_end":449515,"line_start":437,"line_end":437,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449520,"byte_end":449537,"line_start":438,"line_end":438,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(\"[^01]+\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449542,"byte_end":449585,"line_start":439,"line_end":439,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(re.replace(\"1078910\", \"\"), \"1010\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449590,"byte_end":449640,"line_start":440,"line_end":440,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449645,"byte_end":449652,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449657,"byte_end":449664,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449669,"byte_end":449672,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ But anything satisfying the `Replacer` trait will work. For example,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449677,"byte_end":449749,"line_start":444,"line_end":444,"column_start":5,"column_end":77}},{"value":"/ a closure of type `|&Captures| -> String` provides direct access to the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449754,"byte_end":449829,"line_start":445,"line_end":445,"column_start":5,"column_end":80}},{"value":"/ captures corresponding to a match. This allows one to access","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449834,"byte_end":449898,"line_start":446,"line_end":446,"column_start":5,"column_end":69}},{"value":"/ capturing group matches easily:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449903,"byte_end":449938,"line_start":447,"line_end":447,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449943,"byte_end":449946,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449951,"byte_end":449962,"line_start":449,"line_end":449,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":449967,"byte_end":450010,"line_start":450,"line_end":450,"column_start":5,"column_end":48}},{"value":"/ # use regex::Captures; fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450015,"byte_end":450053,"line_start":451,"line_end":451,"column_start":5,"column_end":43}},{"value":"/ let re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450058,"byte_end":450114,"line_start":452,"line_end":452,"column_start":5,"column_end":61}},{"value":"/ let result = re.replace(\"Springsteen, Bruce\", |caps: &Captures| {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450119,"byte_end":450188,"line_start":453,"line_end":453,"column_start":5,"column_end":74}},{"value":"/     format!(\"{} {}\", &caps[2], &caps[1])","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450193,"byte_end":450237,"line_start":454,"line_end":454,"column_start":5,"column_end":49}},{"value":"/ });","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450242,"byte_end":450249,"line_start":455,"line_end":455,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(result, \"Bruce Springsteen\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450254,"byte_end":450298,"line_start":456,"line_end":456,"column_start":5,"column_end":49}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450303,"byte_end":450310,"line_start":457,"line_end":457,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450315,"byte_end":450322,"line_start":458,"line_end":458,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450327,"byte_end":450330,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ But this is a bit cumbersome to use all the time. Instead, a simple","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450335,"byte_end":450406,"line_start":460,"line_end":460,"column_start":5,"column_end":76}},{"value":"/ syntax is supported that expands `$name` into the corresponding capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450411,"byte_end":450486,"line_start":461,"line_end":461,"column_start":5,"column_end":80}},{"value":"/ group. Here's the last example, but using this expansion technique","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450491,"byte_end":450561,"line_start":462,"line_end":462,"column_start":5,"column_end":75}},{"value":"/ with named capture groups:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450566,"byte_end":450596,"line_start":463,"line_end":463,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450601,"byte_end":450604,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450609,"byte_end":450620,"line_start":465,"line_end":465,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450625,"byte_end":450668,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450673,"byte_end":450690,"line_start":467,"line_end":467,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(?P<first>\\S+)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450695,"byte_end":450768,"line_start":468,"line_end":468,"column_start":5,"column_end":78}},{"value":"/ let result = re.replace(\"Springsteen, Bruce\", \"$first $last\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450773,"byte_end":450839,"line_start":469,"line_end":469,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(result, \"Bruce Springsteen\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450844,"byte_end":450888,"line_start":470,"line_end":470,"column_start":5,"column_end":49}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450893,"byte_end":450900,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450905,"byte_end":450912,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450917,"byte_end":450920,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Note that using `$2` instead of `$first` or `$1` instead of `$last`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":450925,"byte_end":450996,"line_start":474,"line_end":474,"column_start":5,"column_end":76}},{"value":"/ would produce the same result. To write a literal `$` use `$$`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451001,"byte_end":451068,"line_start":475,"line_end":475,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451073,"byte_end":451076,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Sometimes the replacement string requires use of curly braces to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451081,"byte_end":451149,"line_start":477,"line_end":477,"column_start":5,"column_end":73}},{"value":"/ delineate a capture group replacement and surrounding literal text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451154,"byte_end":451225,"line_start":478,"line_end":478,"column_start":5,"column_end":76}},{"value":"/ For example, if we wanted to join two words together with an","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451230,"byte_end":451294,"line_start":479,"line_end":479,"column_start":5,"column_end":69}},{"value":"/ underscore:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451299,"byte_end":451314,"line_start":480,"line_end":480,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451319,"byte_end":451322,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451327,"byte_end":451338,"line_start":482,"line_end":482,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451343,"byte_end":451386,"line_start":483,"line_end":483,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451391,"byte_end":451408,"line_start":484,"line_end":484,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"(?P<first>\\w+)\\s+(?P<second>\\w+)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451413,"byte_end":451483,"line_start":485,"line_end":485,"column_start":5,"column_end":75}},{"value":"/ let result = re.replace(\"deep fried\", \"${first}_$second\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451488,"byte_end":451550,"line_start":486,"line_end":486,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(result, \"deep_fried\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451555,"byte_end":451592,"line_start":487,"line_end":487,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451597,"byte_end":451604,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451609,"byte_end":451616,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451621,"byte_end":451624,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ Without the curly braces, the capture group name `first_` would be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451629,"byte_end":451699,"line_start":491,"line_end":491,"column_start":5,"column_end":75}},{"value":"/ used, and since it doesn't exist, it would be replaced with the empty","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451704,"byte_end":451777,"line_start":492,"line_end":492,"column_start":5,"column_end":78}},{"value":"/ string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451782,"byte_end":451793,"line_start":493,"line_end":493,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451798,"byte_end":451801,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Finally, sometimes you just want to replace a literal string with no","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451806,"byte_end":451878,"line_start":495,"line_end":495,"column_start":5,"column_end":77}},{"value":"/ regard for capturing group expansion. This can be done by wrapping a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451883,"byte_end":451955,"line_start":496,"line_end":496,"column_start":5,"column_end":77}},{"value":"/ byte string with `NoExpand`:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451960,"byte_end":451992,"line_start":497,"line_end":497,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":451997,"byte_end":452000,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452005,"byte_end":452016,"line_start":499,"line_end":499,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452021,"byte_end":452064,"line_start":500,"line_end":500,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452069,"byte_end":452086,"line_start":501,"line_end":501,"column_start":5,"column_end":22}},{"value":"/ use regex::NoExpand;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452091,"byte_end":452115,"line_start":502,"line_end":502,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452120,"byte_end":452123,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(\\S+)\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452128,"byte_end":452192,"line_start":504,"line_end":504,"column_start":5,"column_end":69}},{"value":"/ let result = re.replace(\"Springsteen, Bruce\", NoExpand(\"$2 $last\"));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452197,"byte_end":452269,"line_start":505,"line_end":505,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(result, \"$2 $last\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452274,"byte_end":452309,"line_start":506,"line_end":506,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452314,"byte_end":452321,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452326,"byte_end":452333,"line_start":508,"line_end":508,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452809,"byte_end":452820,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"pub fn replace_all<'t, R: Replacer>(&Self, &'t str, R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[{"value":"/ Replaces all non-overlapping matches in `text` with the replacement","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452496,"byte_end":452567,"line_start":517,"line_end":517,"column_start":5,"column_end":76}},{"value":"/ provided. This is the same as calling `replacen` with `limit` set to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452572,"byte_end":452644,"line_start":518,"line_end":518,"column_start":5,"column_end":77}},{"value":"/ `0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452649,"byte_end":452657,"line_start":519,"line_end":519,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452662,"byte_end":452665,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `replace` for details on how to access","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452670,"byte_end":452738,"line_start":521,"line_end":521,"column_start":5,"column_end":73}},{"value":"/ capturing group matches in the replacement string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452743,"byte_end":452797,"line_start":522,"line_end":522,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":453289,"byte_end":453297,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"pub fn replacen<'t, R: Replacer>(&Self, &'t str, usize, R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[{"value":"/ Replaces at most `limit` non-overlapping matches in `text` with the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":452964,"byte_end":453035,"line_start":531,"line_end":531,"column_start":5,"column_end":76}},{"value":"/ replacement provided. If `limit` is 0, then all non-overlapping matches","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":453040,"byte_end":453115,"line_start":532,"line_end":532,"column_start":5,"column_end":80}},{"value":"/ are replaced.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":453120,"byte_end":453137,"line_start":533,"line_end":533,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":453142,"byte_end":453145,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `replace` for details on how to access","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":453150,"byte_end":453218,"line_start":535,"line_end":535,"column_start":5,"column_end":73}},{"value":"/ capturing group matches in the replacement string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":453223,"byte_end":453277,"line_start":536,"line_end":536,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456253,"byte_end":456267,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"pub fn shortest_match(&Self, &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[{"value":"/ Returns the end location of a match in the text given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455472,"byte_end":455530,"line_start":596,"line_end":596,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455535,"byte_end":455538,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ This method may have the same performance characteristics as","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455543,"byte_end":455607,"line_start":598,"line_end":598,"column_start":5,"column_end":69}},{"value":"/ `is_match`, except it provides an end location for a match. In","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455612,"byte_end":455678,"line_start":599,"line_end":599,"column_start":5,"column_end":71}},{"value":"/ particular, the location returned *may be shorter* than the proper end","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455683,"byte_end":455757,"line_start":600,"line_end":600,"column_start":5,"column_end":79}},{"value":"/ of the leftmost-first match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455762,"byte_end":455794,"line_start":601,"line_end":601,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455799,"byte_end":455802,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455807,"byte_end":455820,"line_start":603,"line_end":603,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455825,"byte_end":455828,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Typically, `a+` would match the entire first sequence of `a` in some","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455833,"byte_end":455905,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/ text, but `shortest_match` can give up as soon as it sees the first","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455910,"byte_end":455981,"line_start":606,"line_end":606,"column_start":5,"column_end":76}},{"value":"/ `a`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455986,"byte_end":455994,"line_start":607,"line_end":607,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455999,"byte_end":456002,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456007,"byte_end":456018,"line_start":609,"line_end":609,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456023,"byte_end":456066,"line_start":610,"line_end":610,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456071,"byte_end":456088,"line_start":611,"line_end":611,"column_start":5,"column_end":22}},{"value":"/ let text = \"aaaaa\";","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456093,"byte_end":456116,"line_start":612,"line_end":612,"column_start":5,"column_end":28}},{"value":"/ let pos = Regex::new(r\"a+\").unwrap().shortest_match(text);","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456121,"byte_end":456183,"line_start":613,"line_end":613,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(pos, Some(1));","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456188,"byte_end":456217,"line_start":614,"line_end":614,"column_start":5,"column_end":34}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456222,"byte_end":456229,"line_start":615,"line_end":615,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456234,"byte_end":456241,"line_start":616,"line_end":616,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456654,"byte_end":456671,"line_start":627,"line_end":627,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"pub fn shortest_match_at(&Self, &str, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as shortest_match, but starts the search at the given","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456357,"byte_end":456431,"line_start":621,"line_end":621,"column_start":5,"column_end":79}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456436,"byte_end":456447,"line_start":622,"line_end":622,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456452,"byte_end":456455,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456460,"byte_end":456535,"line_start":624,"line_end":624,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456540,"byte_end":456609,"line_start":625,"line_end":625,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456614,"byte_end":456642,"line_start":626,"line_end":626,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457118,"byte_end":457129,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"pub fn is_match_at(&Self, &str, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as is_match, but starts the search at the given","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456827,"byte_end":456895,"line_start":635,"line_end":635,"column_start":5,"column_end":73}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456900,"byte_end":456911,"line_start":636,"line_end":636,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456916,"byte_end":456919,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":456924,"byte_end":456999,"line_start":638,"line_end":638,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457004,"byte_end":457073,"line_start":639,"line_end":639,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457078,"byte_end":457106,"line_start":640,"line_end":640,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457525,"byte_end":457532,"line_start":651,"line_end":651,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"pub fn find_at<'t>(&Self, &'t str, usize) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as find, but starts the search at the given","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457238,"byte_end":457302,"line_start":645,"line_end":645,"column_start":5,"column_end":69}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457307,"byte_end":457318,"line_start":646,"line_end":646,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457323,"byte_end":457326,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457331,"byte_end":457406,"line_start":648,"line_end":648,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457411,"byte_end":457480,"line_start":649,"line_end":649,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457485,"byte_end":457513,"line_start":650,"line_end":650,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458194,"byte_end":458207,"line_start":671,"line_end":671,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"pub fn captures_read<'t>(&Self, &mut CaptureLocations, &'t str)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[{"value":"/ This is like `captures`, but uses","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457750,"byte_end":457787,"line_start":661,"line_end":661,"column_start":5,"column_end":42}},{"value":"/ [`CaptureLocations`](struct.CaptureLocations.html)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457792,"byte_end":457846,"line_start":662,"line_end":662,"column_start":5,"column_end":59}},{"value":"/ instead of","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457851,"byte_end":457865,"line_start":663,"line_end":663,"column_start":5,"column_end":19}},{"value":"/ [`Captures`](struct.Captures.html) in order to amortize allocations.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457870,"byte_end":457942,"line_start":664,"line_end":664,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457947,"byte_end":457950,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ To create a `CaptureLocations` value, use the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":457955,"byte_end":458004,"line_start":666,"line_end":666,"column_start":5,"column_end":54}},{"value":"/ `Regex::capture_locations` method.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458009,"byte_end":458047,"line_start":667,"line_end":667,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458052,"byte_end":458055,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ This returns the overall match if this was successful, which is always","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458060,"byte_end":458134,"line_start":669,"line_end":669,"column_start":5,"column_end":79}},{"value":"/ equivalence to the `0`th capture group.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458139,"byte_end":458182,"line_start":670,"line_end":670,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458706,"byte_end":458722,"line_start":685,"line_end":685,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"pub fn captures_read_at<'t>(&Self, &mut CaptureLocations, &'t str, usize)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[{"value":"/ Returns the same as captures, but starts the search at the given","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458373,"byte_end":458441,"line_start":679,"line_end":679,"column_start":5,"column_end":73}},{"value":"/ offset and populates the capture locations given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458446,"byte_end":458499,"line_start":680,"line_end":680,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458504,"byte_end":458507,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458512,"byte_end":458587,"line_start":682,"line_end":682,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458592,"byte_end":458661,"line_start":683,"line_end":683,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":458666,"byte_end":458694,"line_start":684,"line_end":684,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459270,"byte_end":459286,"line_start":703,"line_end":703,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"pub fn read_captures_at<'t>(&Self, &mut CaptureLocations, &'t str, usize)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[{"value":"/ An undocumented alias for `captures_read_at`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459014,"byte_end":459063,"line_start":697,"line_end":697,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459068,"byte_end":459071,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ The `regex-capi` crate previously used this routine, so to avoid","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459076,"byte_end":459144,"line_start":699,"line_end":699,"column_start":5,"column_end":73}},{"value":"/ breaking that crate, we continue to provide the name as an undocumented","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459149,"byte_end":459224,"line_start":700,"line_end":700,"column_start":5,"column_end":80}},{"value":"/ alias.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459229,"byte_end":459239,"line_start":701,"line_end":701,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459574,"byte_end":459580,"line_start":716,"line_end":716,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[{"value":"/ Returns the original string of this regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459516,"byte_end":459562,"line_start":715,"line_end":715,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459703,"byte_end":459716,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"pub fn capture_names(&Self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the capture names.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459644,"byte_end":459691,"line_start":720,"line_end":720,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459852,"byte_end":459864,"line_start":726,"line_end":726,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"pub fn captures_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[{"value":"/ Returns the number of captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459805,"byte_end":459840,"line_start":725,"line_end":725,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460075,"byte_end":460092,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"pub fn capture_locations(&Self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[{"value":"/ Returns an empty set of capture locations that can be reused in","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459931,"byte_end":459998,"line_start":730,"line_end":730,"column_start":5,"column_end":72}},{"value":"/ multiple calls to `captures_read` or `captures_read_at`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460003,"byte_end":460063,"line_start":731,"line_end":731,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460443,"byte_end":460452,"line_start":741,"line_end":741,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"pub fn locations(&Self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[{"value":"/ An alias for `capture_locations` to preserve backward compatibility.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460193,"byte_end":460265,"line_start":736,"line_end":736,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460270,"byte_end":460273,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ The `regex-capi` crate uses this method, so to avoid breaking that","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460278,"byte_end":460348,"line_start":738,"line_end":738,"column_start":5,"column_end":75}},{"value":"/ crate, we continue to export it as an undocumented API.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460353,"byte_end":460412,"line_start":739,"line_end":739,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460808,"byte_end":460820,"line_start":752,"line_end":752,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[{"value":"/ An iterator over the names of all possible captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460551,"byte_end":460607,"line_start":746,"line_end":746,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460608,"byte_end":460611,"line_start":747,"line_end":747,"column_start":1,"column_end":4}},{"value":"/ `None` indicates an unnamed capture; the first element (capture 0, the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460612,"byte_end":460686,"line_start":748,"line_end":748,"column_start":1,"column_end":75}},{"value":"/ whole matched region) is always unnamed.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460687,"byte_end":460731,"line_start":749,"line_end":749,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460732,"byte_end":460735,"line_start":750,"line_end":750,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460736,"byte_end":460796,"line_start":751,"line_end":751,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":461409,"byte_end":461414,"line_start":773,"line_end":773,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1267}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[{"value":"/ Yields all substrings delimited by a regular expression match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":461211,"byte_end":461277,"line_start":769,"line_end":769,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":461278,"byte_end":461281,"line_start":770,"line_end":770,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":461282,"byte_end":461357,"line_start":771,"line_end":771,"column_start":1,"column_end":76}},{"value":"/ lifetime of the string being split.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":461358,"byte_end":461397,"line_start":772,"line_end":772,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1273},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462390,"byte_end":462396,"line_start":808,"line_end":808,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[{"value":"/ Yields at most `N` substrings delimited by a regular expression match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462115,"byte_end":462189,"line_start":802,"line_end":802,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462190,"byte_end":462193,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ The last substring will be whatever remains after splitting.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462194,"byte_end":462258,"line_start":804,"line_end":804,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462259,"byte_end":462262,"line_start":805,"line_end":805,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462263,"byte_end":462338,"line_start":806,"line_end":806,"column_start":1,"column_end":76}},{"value":"/ lifetime of the string being split.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462339,"byte_end":462378,"line_start":807,"line_end":807,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2546},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463602,"byte_end":463618,"line_start":846,"line_end":846,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[{"value":"/ CaptureLocations is a low level representation of the raw offsets of each","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462832,"byte_end":462909,"line_start":830,"line_end":830,"column_start":1,"column_end":78}},{"value":"/ submatch.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462910,"byte_end":462923,"line_start":831,"line_end":831,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462924,"byte_end":462927,"line_start":832,"line_end":832,"column_start":1,"column_end":4}},{"value":"/ You can think of this as a lower level","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462928,"byte_end":462970,"line_start":833,"line_end":833,"column_start":1,"column_end":43}},{"value":"/ [`Captures`](struct.Captures.html), where this type does not support","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462971,"byte_end":463043,"line_start":834,"line_end":834,"column_start":1,"column_end":73}},{"value":"/ named capturing groups directly and it does not borrow the text that these","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463044,"byte_end":463122,"line_start":835,"line_end":835,"column_start":1,"column_end":79}},{"value":"/ offsets were matched on.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463123,"byte_end":463151,"line_start":836,"line_end":836,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463152,"byte_end":463155,"line_start":837,"line_end":837,"column_start":1,"column_end":4}},{"value":"/ Primarily, this type is useful when using the lower level `Regex` APIs","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463156,"byte_end":463230,"line_start":838,"line_end":838,"column_start":1,"column_end":75}},{"value":"/ such as `read_captures`, which permits amortizing the allocation in which","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463231,"byte_end":463308,"line_start":839,"line_end":839,"column_start":1,"column_end":78}},{"value":"/ capture match locations are stored.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463309,"byte_end":463348,"line_start":840,"line_end":840,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463349,"byte_end":463352,"line_start":841,"line_end":841,"column_start":1,"column_end":4}},{"value":"/ In order to build a value of this type, you'll need to call the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463353,"byte_end":463420,"line_start":842,"line_end":842,"column_start":1,"column_end":68}},{"value":"/ `capture_locations` method on the `Regex` being used to execute the search.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463421,"byte_end":463500,"line_start":843,"line_end":843,"column_start":1,"column_end":80}},{"value":"/ The value returned can then be reused in subsequent searches.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463501,"byte_end":463566,"line_start":844,"line_end":844,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463940,"byte_end":463949,"line_start":854,"line_end":854,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[{"value":"/ A type alias for `CaptureLocations` for backwards compatibility.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463642,"byte_end":463710,"line_start":848,"line_end":848,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463711,"byte_end":463714,"line_start":849,"line_end":849,"column_start":1,"column_end":4}},{"value":"/ Previously, we exported `CaptureLocations` as `Locations` in an","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463715,"byte_end":463782,"line_start":850,"line_end":850,"column_start":1,"column_end":68}},{"value":"/ undocumented API. To prevent breaking that code (e.g., in `regex-capi`),","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463783,"byte_end":463859,"line_start":851,"line_end":851,"column_start":1,"column_end":77}},{"value":"/ we continue re-exporting the same undocumented API.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463860,"byte_end":463915,"line_start":852,"line_end":852,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464307,"byte_end":464310,"line_start":862,"line_end":862,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"pub fn get(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"/ Returns the start and end positions of the Nth capture group. Returns","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463999,"byte_end":464072,"line_start":857,"line_end":857,"column_start":5,"column_end":78}},{"value":"/ `None` if `i` is not a valid capture group or if the capture group did","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464077,"byte_end":464151,"line_start":858,"line_end":858,"column_start":5,"column_end":79}},{"value":"/ not match anything. The positions returned are *always* byte indices","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464156,"byte_end":464228,"line_start":859,"line_end":859,"column_start":5,"column_end":77}},{"value":"/ with respect to the original string matched.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464233,"byte_end":464281,"line_start":860,"line_end":860,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464286,"byte_end":464295,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464605,"byte_end":464608,"line_start":871,"line_end":871,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"/ Returns the total number of capturing groups.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464389,"byte_end":464438,"line_start":866,"line_end":866,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464443,"byte_end":464446,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1` since every regex has at least `1`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464451,"byte_end":464517,"line_start":868,"line_end":868,"column_start":5,"column_end":71}},{"value":"/ capturing group that corresponds to the entire match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464522,"byte_end":464579,"line_start":869,"line_end":869,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464584,"byte_end":464593,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464968,"byte_end":464971,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"pub fn pos(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"/ An alias for the `get` method for backwards compatibility.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464659,"byte_end":464721,"line_start":875,"line_end":875,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464726,"byte_end":464729,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ Previously, we exported `get` as `pos` in an undocumented API. To","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464734,"byte_end":464803,"line_start":877,"line_end":877,"column_start":5,"column_end":74}},{"value":"/ prevent breaking that code (e.g., in `regex-capi`), we continue","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464808,"byte_end":464875,"line_start":878,"line_end":878,"column_start":5,"column_end":72}},{"value":"/ re-exporting the same undocumented API.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464880,"byte_end":464923,"line_start":879,"line_end":879,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":464947,"byte_end":464956,"line_start":881,"line_end":881,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465595,"byte_end":465603,"line_start":898,"line_end":898,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[{"value":"/ Captures represents a group of captured strings for a single match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465046,"byte_end":465117,"line_start":887,"line_end":887,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465118,"byte_end":465121,"line_start":888,"line_end":888,"column_start":1,"column_end":4}},{"value":"/ The 0th capture always corresponds to the entire match. Each subsequent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465122,"byte_end":465197,"line_start":889,"line_end":889,"column_start":1,"column_end":76}},{"value":"/ index corresponds to the next capture group in the regex. If a capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465198,"byte_end":465272,"line_start":890,"line_end":890,"column_start":1,"column_end":75}},{"value":"/ group is named, then the matched string is *also* available via the `name`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465273,"byte_end":465351,"line_start":891,"line_end":891,"column_start":1,"column_end":79}},{"value":"/ method. (Note that the 0th capture is always unnamed and so must be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465352,"byte_end":465423,"line_start":892,"line_end":892,"column_start":1,"column_end":72}},{"value":"/ accessed with the `get` method.)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465424,"byte_end":465460,"line_start":893,"line_end":893,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465461,"byte_end":465464,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Positions returned from a capture group are always byte indices.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465465,"byte_end":465533,"line_start":895,"line_end":895,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465534,"byte_end":465537,"line_start":896,"line_end":896,"column_start":1,"column_end":4}},{"value":"/ `'t` is the lifetime of the matched text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465538,"byte_end":465583,"line_start":897,"line_end":897,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466501,"byte_end":466504,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"pub fn get(&Self, usize) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the match associated with the capture group at index `i`. If","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465738,"byte_end":465810,"line_start":905,"line_end":905,"column_start":5,"column_end":77}},{"value":"/ `i` does not correspond to a capture group, or if the capture group","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465815,"byte_end":465886,"line_start":906,"line_end":906,"column_start":5,"column_end":76}},{"value":"/ did not participate in the match, then `None` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465891,"byte_end":465953,"line_start":907,"line_end":907,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465958,"byte_end":465961,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465966,"byte_end":465980,"line_start":909,"line_end":909,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465985,"byte_end":465988,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ Get the text of the match with a default of an empty string if this","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465993,"byte_end":466064,"line_start":911,"line_end":911,"column_start":5,"column_end":76}},{"value":"/ group didn't participate in the match:","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466069,"byte_end":466111,"line_start":912,"line_end":912,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466116,"byte_end":466119,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466124,"byte_end":466135,"line_start":914,"line_end":914,"column_start":5,"column_end":16}},{"value":"/ # use regex::Regex;","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466140,"byte_end":466163,"line_start":915,"line_end":915,"column_start":5,"column_end":28}},{"value":"/ let re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466168,"byte_end":466233,"line_start":916,"line_end":916,"column_start":5,"column_end":70}},{"value":"/ let caps = re.captures(\"abc123\").unwrap();","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466238,"byte_end":466284,"line_start":917,"line_end":917,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466289,"byte_end":466292,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ let text1 = caps.get(1).map_or(\"\", |m| m.as_str());","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466297,"byte_end":466352,"line_start":919,"line_end":919,"column_start":5,"column_end":60}},{"value":"/ let text2 = caps.get(2).map_or(\"\", |m| m.as_str());","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466357,"byte_end":466412,"line_start":920,"line_end":920,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(text1, \"123\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466417,"byte_end":466446,"line_start":921,"line_end":921,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(text2, \"\");","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466451,"byte_end":466477,"line_start":922,"line_end":922,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466482,"byte_end":466489,"line_start":923,"line_end":923,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466789,"byte_end":466793,"line_start":930,"line_end":930,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"pub fn name(&Self, &str) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Returns the match for the capture group named `name`. If `name` isn't a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466623,"byte_end":466698,"line_start":928,"line_end":928,"column_start":5,"column_end":80}},{"value":"/ valid capture group or didn't match anything, then `None` is returned.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466703,"byte_end":466777,"line_start":929,"line_end":929,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467225,"byte_end":467229,"line_start":939,"line_end":939,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"pub fn iter<'c>(&'c Self) -> SubCaptureMatches","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[{"value":"/ An iterator that yields all capturing matches in the order in which","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466910,"byte_end":466981,"line_start":934,"line_end":934,"column_start":5,"column_end":76}},{"value":"/ they appear in the regex. If a particular capture group didn't","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":466986,"byte_end":467052,"line_start":935,"line_end":935,"column_start":5,"column_end":71}},{"value":"/ participate in the match, then `None` is yielded for that capture.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467057,"byte_end":467127,"line_start":936,"line_end":936,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467132,"byte_end":467135,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ The first match always corresponds to the overall match of the regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467140,"byte_end":467213,"line_start":938,"line_end":938,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468273,"byte_end":468279,"line_start":962,"line_end":962,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"pub fn expand(&Self, &str, &mut String)","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[{"value":"/ Expands all instances of `$name` in `replacement` to the corresponding","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467382,"byte_end":467456,"line_start":946,"line_end":946,"column_start":5,"column_end":79}},{"value":"/ capture group `name`, and writes them to the `dst` buffer given.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467461,"byte_end":467529,"line_start":947,"line_end":947,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467534,"byte_end":467537,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ `name` may be an integer corresponding to the index of the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467542,"byte_end":467604,"line_start":949,"line_end":949,"column_start":5,"column_end":67}},{"value":"/ capture group (counted by order of opening parenthesis where `0` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467609,"byte_end":467684,"line_start":950,"line_end":950,"column_start":5,"column_end":80}},{"value":"/ entire match) or it can be a name (consisting of letters, digits or","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467689,"byte_end":467760,"line_start":951,"line_end":951,"column_start":5,"column_end":76}},{"value":"/ underscores) corresponding to a named capture group.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467765,"byte_end":467821,"line_start":952,"line_end":952,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467826,"byte_end":467829,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ If `name` isn't a valid capture group (whether the name doesn't exist","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467834,"byte_end":467907,"line_start":954,"line_end":954,"column_start":5,"column_end":78}},{"value":"/ or isn't a valid index), then it is replaced with the empty string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467912,"byte_end":467983,"line_start":955,"line_end":955,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467988,"byte_end":467991,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ The longest possible name is used. e.g., `$1a` looks up the capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":467996,"byte_end":468067,"line_start":957,"line_end":957,"column_start":5,"column_end":76}},{"value":"/ group named `1a` and not the capture group at index `1`. To exert more","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468072,"byte_end":468146,"line_start":958,"line_end":958,"column_start":5,"column_end":79}},{"value":"/ precise control over the name, use braces, e.g., `${1}a`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468151,"byte_end":468212,"line_start":959,"line_end":959,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468217,"byte_end":468220,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ To write a literal `$` use `$$`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468225,"byte_end":468261,"line_start":961,"line_end":961,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468586,"byte_end":468589,"line_start":971,"line_end":971,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"/ Returns the number of captured groups.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468380,"byte_end":468422,"line_start":966,"line_end":966,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468427,"byte_end":468430,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1`, since every regex has at least one capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468435,"byte_end":468510,"line_start":968,"line_end":968,"column_start":5,"column_end":80}},{"value":"/ group that corresponds to the full match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468515,"byte_end":468560,"line_start":969,"line_end":969,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468565,"byte_end":468574,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471267,"byte_end":471284,"line_start":1053,"line_end":1053,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[{"value":"/ An iterator that yields all capturing matches in the order in which they","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":470815,"byte_end":470891,"line_start":1044,"line_end":1044,"column_start":1,"column_end":77}},{"value":"/ appear in the regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":470892,"byte_end":470916,"line_start":1045,"line_end":1045,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":470917,"byte_end":470920,"line_start":1046,"line_end":1046,"column_start":1,"column_end":4}},{"value":"/ If a particular capture group didn't participate in the match, then `None`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":470921,"byte_end":470999,"line_start":1047,"line_end":1047,"column_start":1,"column_end":79}},{"value":"/ is yielded for that capture. The first match always corresponds to the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471000,"byte_end":471074,"line_start":1048,"line_end":1048,"column_start":1,"column_end":75}},{"value":"/ overall match of the regex.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471075,"byte_end":471106,"line_start":1049,"line_end":1049,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471107,"byte_end":471110,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ The lifetime `'c` corresponds to the lifetime of the `Captures` value, and","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471111,"byte_end":471189,"line_start":1051,"line_end":1051,"column_start":1,"column_end":79}},{"value":"/ the lifetime `'t` corresponds to the originally matched text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471190,"byte_end":471255,"line_start":1052,"line_end":1052,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471911,"byte_end":471925,"line_start":1074,"line_end":1074,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[{"value":"/ An iterator that yields all non-overlapping capture groups matching a","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471613,"byte_end":471686,"line_start":1067,"line_end":1067,"column_start":1,"column_end":74}},{"value":"/ particular regular expression.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471687,"byte_end":471721,"line_start":1068,"line_end":1068,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471722,"byte_end":471725,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ The iterator stops when no more matches can be found.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471726,"byte_end":471783,"line_start":1070,"line_end":1070,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471784,"byte_end":471787,"line_start":1071,"line_end":1071,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471788,"byte_end":471863,"line_start":1072,"line_end":1072,"column_start":1,"column_end":76}},{"value":"/ lifetime of the matched string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471864,"byte_end":471899,"line_start":1073,"line_end":1073,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472610,"byte_end":472617,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping matches for a particular string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472306,"byte_end":472379,"line_start":1088,"line_end":1088,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472380,"byte_end":472383,"line_start":1089,"line_end":1089,"column_start":1,"column_end":4}},{"value":"/ The iterator yields a `Match` value. The iterator stops when no more","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472384,"byte_end":472456,"line_start":1090,"line_end":1090,"column_start":1,"column_end":73}},{"value":"/ matches can be found.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472457,"byte_end":472482,"line_start":1091,"line_end":1091,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472483,"byte_end":472486,"line_start":1092,"line_end":1092,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472487,"byte_end":472562,"line_start":1093,"line_end":1093,"column_start":1,"column_end":76}},{"value":"/ lifetime of the matched string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472563,"byte_end":472598,"line_start":1094,"line_end":1094,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473242,"byte_end":473250,"line_start":1112,"line_end":1112,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1369}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[{"value":"/ Replacer describes types that can be used to replace matches in a string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472890,"byte_end":472967,"line_start":1106,"line_end":1106,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472968,"byte_end":472971,"line_start":1107,"line_end":1107,"column_start":1,"column_end":4}},{"value":"/ In general, users of this crate shouldn't need to implement this trait,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472972,"byte_end":473047,"line_start":1108,"line_end":1108,"column_start":1,"column_end":76}},{"value":"/ since implementations are already provided for `&str` and","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473048,"byte_end":473109,"line_start":1109,"line_end":1109,"column_start":1,"column_end":62}},{"value":"/ `FnMut(&Captures) -> String` (or any `FnMut(&Captures) -> T`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473110,"byte_end":473174,"line_start":1110,"line_end":1110,"column_start":1,"column_end":65}},{"value":"/ where `T: AsRef<str>`), which covers most use cases.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473175,"byte_end":473231,"line_start":1111,"line_end":1111,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473557,"byte_end":473571,"line_start":1120,"line_end":1120,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"pub fn replace_append(&mut Self, &Captures, &mut String)","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[{"value":"/ Appends text to `dst` to replace the current match.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473257,"byte_end":473312,"line_start":1113,"line_end":1113,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473317,"byte_end":473320,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ The current match is represented by `caps`, which is guaranteed to","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473325,"byte_end":473395,"line_start":1115,"line_end":1115,"column_start":5,"column_end":75}},{"value":"/ have a match at capture group `0`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473400,"byte_end":473438,"line_start":1116,"line_end":1116,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473443,"byte_end":473446,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ For example, a no-op replacement would be","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473451,"byte_end":473496,"line_start":1118,"line_end":1118,"column_start":5,"column_end":50}},{"value":"/ `dst.extend(caps.get(0).unwrap().as_str())`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473501,"byte_end":473549,"line_start":1119,"line_end":1119,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473976,"byte_end":473988,"line_start":1129,"line_end":1129,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"pub fn no_expansion<'r>(&'r mut Self) -> Option<Cow>","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[{"value":"/ Return a fixed unchanging replacement string.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473624,"byte_end":473673,"line_start":1122,"line_end":1122,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473678,"byte_end":473681,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ When doing replacements, if access to `Captures` is not needed (e.g.,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473686,"byte_end":473759,"line_start":1124,"line_end":1124,"column_start":5,"column_end":78}},{"value":"/ the replacement byte string does not need `$` expansion), then it can","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473764,"byte_end":473837,"line_start":1125,"line_end":1125,"column_start":5,"column_end":78}},{"value":"/ be beneficial to avoid finding sub-captures.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473842,"byte_end":473890,"line_start":1126,"line_end":1126,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473895,"byte_end":473898,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ In general, this is called once for every call to `replacen`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":473903,"byte_end":473968,"line_start":1128,"line_end":1128,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474709,"byte_end":474715,"line_start":1154,"line_end":1154,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"pub fn by_ref<'r>(&'r mut Self) -> ReplacerRef","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[{"value":"/ Return a `Replacer` that borrows and wraps this `Replacer`.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474057,"byte_end":474120,"line_start":1133,"line_end":1133,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474125,"byte_end":474128,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ This is useful when you want to take a generic `Replacer` (which might","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474133,"byte_end":474207,"line_start":1135,"line_end":1135,"column_start":5,"column_end":79}},{"value":"/ not be cloneable) and use it without consuming it, so it can be used","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474212,"byte_end":474284,"line_start":1136,"line_end":1136,"column_start":5,"column_end":77}},{"value":"/ more than once.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474289,"byte_end":474308,"line_start":1137,"line_end":1137,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474313,"byte_end":474316,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474321,"byte_end":474334,"line_start":1139,"line_end":1139,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474339,"byte_end":474342,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474347,"byte_end":474354,"line_start":1141,"line_end":1141,"column_start":5,"column_end":12}},{"value":"/ use regex::{Regex, Replacer};","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474359,"byte_end":474392,"line_start":1142,"line_end":1142,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474397,"byte_end":474400,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ fn replace_all_twice<R: Replacer>(","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474405,"byte_end":474443,"line_start":1144,"line_end":1144,"column_start":5,"column_end":43}},{"value":"/     re: Regex,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474448,"byte_end":474466,"line_start":1145,"line_end":1145,"column_start":5,"column_end":23}},{"value":"/     src: &str,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474471,"byte_end":474489,"line_start":1146,"line_end":1146,"column_start":5,"column_end":23}},{"value":"/     mut rep: R,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474494,"byte_end":474513,"line_start":1147,"line_end":1147,"column_start":5,"column_end":24}},{"value":"/ ) -> String {","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474518,"byte_end":474535,"line_start":1148,"line_end":1148,"column_start":5,"column_end":22}},{"value":"/     let dst = re.replace_all(src, rep.by_ref());","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474540,"byte_end":474592,"line_start":1149,"line_end":1149,"column_start":5,"column_end":57}},{"value":"/     let dst = re.replace_all(&dst, rep.by_ref());","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474597,"byte_end":474650,"line_start":1150,"line_end":1150,"column_start":5,"column_end":58}},{"value":"/     dst.into_owned()","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474655,"byte_end":474679,"line_start":1151,"line_end":1151,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474684,"byte_end":474689,"line_start":1152,"line_end":1152,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474694,"byte_end":474701,"line_start":1153,"line_end":1153,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2553},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474943,"byte_end":474954,"line_start":1163,"line_end":1163,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[{"value":"/ By-reference adaptor for a `Replacer`","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474796,"byte_end":474837,"line_start":1159,"line_end":1159,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474838,"byte_end":474841,"line_start":1160,"line_end":1160,"column_start":1,"column_end":4}},{"value":"/ Returned by [`Replacer::by_ref`](trait.Replacer.html#method.by_ref).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":474842,"byte_end":474914,"line_start":1161,"line_end":1161,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1384},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":476212,"byte_end":476220,"line_start":1201,"line_end":1201,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[{"value":"/ `NoExpand` indicates literal string replacement.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":475803,"byte_end":475855,"line_start":1193,"line_end":1193,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":475856,"byte_end":475859,"line_start":1194,"line_end":1194,"column_start":1,"column_end":4}},{"value":"/ It can be used with `replace` and `replace_all` to do a literal string","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":475860,"byte_end":475934,"line_start":1195,"line_end":1195,"column_start":1,"column_end":75}},{"value":"/ replacement without expanding `$name` to their corresponding capture","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":475935,"byte_end":476007,"line_start":1196,"line_end":1196,"column_start":1,"column_end":73}},{"value":"/ groups. This can be both convenient (to avoid escaping `$`, for example)","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":476008,"byte_end":476084,"line_start":1197,"line_end":1197,"column_start":1,"column_end":77}},{"value":"/ and performant (since capture groups don't need to be found).","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":476085,"byte_end":476150,"line_start":1198,"line_end":1198,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":476151,"byte_end":476154,"line_start":1199,"line_end":1199,"column_start":1,"column_end":4}},{"value":"/ `'t` is the lifetime of the literal text.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":476155,"byte_end":476200,"line_start":1200,"line_end":1200,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":1387},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":476225,"byte_end":476236,"line_start":1201,"line_end":1201,"column_start":25,"column_end":36},"name":"0","qualname":"::re_unicode::NoExpand::0","value":"&'t str","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2562},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477101,"byte_end":477110,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":2563},{"krate":0,"index":2564}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[{"value":"/ A sparse set used for representing ordered NFA states.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476517,"byte_end":476575,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476576,"byte_end":476579,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This supports constant time addition and membership testing. Clearing an","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476580,"byte_end":476656,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ entire set can also be done in constant time. Iteration yields elements","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476657,"byte_end":476732,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ in the order in which they were inserted.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476733,"byte_end":476778,"line_start":8,"line_end":8,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476779,"byte_end":476782,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The data structure is based on: http://research.swtch.com/sparse","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476783,"byte_end":476851,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/ Note though that we don't actually use uninitialized memory. We generally","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476852,"byte_end":476929,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ reuse allocations, so the initial allocation cost is bareable. However,","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":476930,"byte_end":477005,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ its other properties listed above are extremely useful.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477006,"byte_end":477065,"line_start":13,"line_end":13,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477489,"byte_end":477492,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"pub fn new(usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477668,"byte_end":477671,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477733,"byte_end":477741,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477807,"byte_end":477815,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477882,"byte_end":477888,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"pub fn insert(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":478064,"byte_end":478072,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"pub fn contains(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":478200,"byte_end":478205,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23198,"byte_end":23206,"line_start":677,"line_end":677,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"/ The `internal` module exists to support suspicious activity, such as","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":22985,"byte_end":23057,"line_start":672,"line_end":672,"column_start":1,"column_end":73}},{"value":"/ testing different matching engines and supporting the `regex-debug` CLI","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23058,"byte_end":23133,"line_start":673,"line_end":673,"column_start":1,"column_end":76}},{"value":"/ utility.","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23134,"byte_end":23146,"line_start":674,"line_end":674,"column_start":1,"column_end":13}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\lib.rs","byte_start":23162,"byte_end":23189,"line_start":676,"line_end":676,"column_start":1,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\backtrack.rs","byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\backtrack.rs","byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44585,"byte_end":44593,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":71069,"byte_end":71078,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":73255,"byte_end":73263,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":74196,"byte_end":74208,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":78962,"byte_end":78973,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":80215,"byte_end":80227,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":93216,"byte_end":93222,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":95518,"byte_end":95526,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":95948,"byte_end":95953,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":100184,"byte_end":100189,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":101008,"byte_end":101018,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":101322,"byte_end":101325,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":149913,"byte_end":149921,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":150715,"byte_end":150726,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":152587,"byte_end":152597,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":153033,"byte_end":153037,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":153613,"byte_end":153618,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":153889,"byte_end":153900,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":154322,"byte_end":154336,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":154842,"byte_end":154852,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159972,"byte_end":159977,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":160318,"byte_end":160323,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":160972,"byte_end":160977,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166187,"byte_end":166198,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":175658,"byte_end":175671,"line_start":368,"line_end":368,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":176709,"byte_end":176719,"line_start":403,"line_end":403,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":186146,"byte_end":186156,"line_start":642,"line_end":642,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201001,"byte_end":201014,"line_start":1125,"line_end":1125,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201138,"byte_end":201142,"line_start":1131,"line_end":1131,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202995,"byte_end":202999,"line_start":1190,"line_end":1190,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":203149,"byte_end":203161,"line_start":1199,"line_end":1199,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":208727,"byte_end":208744,"line_start":1346,"line_end":1346,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\expand.rs","byte_start":215706,"byte_end":215709,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\expand.rs","byte_start":215805,"byte_end":215808,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224432,"byte_end":224439,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227503,"byte_end":227512,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227686,"byte_end":227695,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227801,"byte_end":227810,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":229929,"byte_end":229938,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":230200,"byte_end":230209,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":230318,"byte_end":230327,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233573,"byte_end":233577,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233787,"byte_end":233791,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234746,"byte_end":234750,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234832,"byte_end":234836,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234959,"byte_end":234963,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":235192,"byte_end":235196,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_avx2\\imp.rs","byte_start":277657,"byte_end":277662,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_avx2\\imp.rs","byte_start":289278,"byte_end":289283,"line_start":367,"line_end":367,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_avx2\\imp.rs","byte_start":292070,"byte_end":292074,"line_start":448,"line_end":448,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_ssse3\\imp.rs","byte_start":309518,"byte_end":309523,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_ssse3\\imp.rs","byte_start":321143,"byte_end":321148,"line_start":677,"line_end":677,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_ssse3\\imp.rs","byte_start":323936,"byte_end":323940,"line_start":758,"line_end":758,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":237433,"byte_end":237448,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":242580,"byte_end":242587,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245657,"byte_end":245668,"line_start":280,"line_end":280,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":247383,"byte_end":247396,"line_start":343,"line_end":343,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":251303,"byte_end":251314,"line_start":452,"line_end":452,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":256621,"byte_end":256637,"line_start":615,"line_end":615,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\pikevm.rs","byte_start":327736,"byte_end":327741,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\pikevm.rs","byte_start":328035,"byte_end":328038,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\pikevm.rs","byte_start":337238,"byte_end":337245,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341061,"byte_end":341068,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":344022,"byte_end":344029,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":344170,"byte_end":344177,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349084,"byte_end":349088,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351479,"byte_end":351489,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":867},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352901,"byte_end":352910,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":354033,"byte_end":354045,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369208,"byte_end":369213,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370623,"byte_end":370628,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370805,"byte_end":370810,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371115,"byte_end":371120,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371204,"byte_end":371209,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371420,"byte_end":371425,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":387941,"byte_end":387946,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391984,"byte_end":391989,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393501,"byte_end":393508,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394095,"byte_end":394109,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394684,"byte_end":394689,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395668,"byte_end":395674,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1001},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396363,"byte_end":396375,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397803,"byte_end":397819,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399557,"byte_end":399565,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402543,"byte_end":402551,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402778,"byte_end":402791,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":404282,"byte_end":404290,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1053},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":404926,"byte_end":404934,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1060},{"krate":0,"index":1061}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405718,"byte_end":405735,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":408097,"byte_end":408108,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":408694,"byte_end":408695,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409350,"byte_end":409358,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426133,"byte_end":426142,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427696,"byte_end":427714,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1120},{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431205,"byte_end":431212,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431487,"byte_end":431494,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432716,"byte_end":432730,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":433015,"byte_end":433029,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435157,"byte_end":435162,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438261,"byte_end":438266,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438443,"byte_end":438448,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438636,"byte_end":438641,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438725,"byte_end":438730,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438941,"byte_end":438946,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1211},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455460,"byte_end":455465,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459504,"byte_end":459509,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460889,"byte_end":460901,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":461500,"byte_end":461505,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1272}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462477,"byte_end":462483,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463976,"byte_end":463992,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465719,"byte_end":465727,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468665,"byte_end":468673,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468900,"byte_end":468913,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":469960,"byte_end":469968,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":470600,"byte_end":470608,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471388,"byte_end":471405,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1339},{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472011,"byte_end":472025,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1351},{"krate":0,"index":1352}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472696,"byte_end":472703,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1363}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":475037,"byte_end":475048,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":475628,"byte_end":475629,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":476262,"byte_end":476270,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477466,"byte_end":477475,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":478271,"byte_end":478280,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\avx2.rs","byte_start":478782,"byte_end":478799,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\avx2.rs","byte_start":480498,"byte_end":480503,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\avx2.rs","byte_start":484286,"byte_end":484291,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\ssse3.rs","byte_start":484929,"byte_end":484947,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\ssse3.rs","byte_start":487267,"byte_end":487272,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\ssse3.rs","byte_start":490046,"byte_end":490051,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\backtrack.rs","byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\backtrack.rs","byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":44585,"byte_end":44593,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":71069,"byte_end":71078,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":73255,"byte_end":73263,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":74196,"byte_end":74208,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":78962,"byte_end":78973,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\compile.rs","byte_start":80215,"byte_end":80227,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":93216,"byte_end":93222,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":95518,"byte_end":95526,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":217},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":95948,"byte_end":95953,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":100184,"byte_end":100189,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":101008,"byte_end":101018,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":101322,"byte_end":101325,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":149913,"byte_end":149921,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":150715,"byte_end":150726,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":152587,"byte_end":152597,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":153033,"byte_end":153037,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":153613,"byte_end":153618,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1660},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":153889,"byte_end":153900,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1627},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":154322,"byte_end":154336,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\dfa.rs","byte_start":154842,"byte_end":154852,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1706},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":159972,"byte_end":159977,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1730},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":160318,"byte_end":160323,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1730},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\error.rs","byte_start":160972,"byte_end":160977,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1730},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":166187,"byte_end":166198,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":175658,"byte_end":175671,"line_start":368,"line_end":368,"column_start":32,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":372},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":176709,"byte_end":176719,"line_start":403,"line_end":403,"column_start":32,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1745},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":186146,"byte_end":186156,"line_start":642,"line_end":642,"column_start":10,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201001,"byte_end":201014,"line_start":1125,"line_end":1125,"column_start":10,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":201138,"byte_end":201142,"line_start":1131,"line_end":1131,"column_start":6,"column_end":10},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":202995,"byte_end":202999,"line_start":1190,"line_end":1190,"column_start":16,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":369},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":203149,"byte_end":203161,"line_start":1199,"line_end":1199,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\exec.rs","byte_start":208727,"byte_end":208744,"line_start":1346,"line_end":1346,"column_start":6,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\expand.rs","byte_start":215706,"byte_end":215709,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1840},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\expand.rs","byte_start":215805,"byte_end":215808,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1840},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":224432,"byte_end":224439,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227503,"byte_end":227512,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227686,"byte_end":227695,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1877},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":227801,"byte_end":227810,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1877},"to":{"krate":0,"index":534}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":229929,"byte_end":229938,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":230200,"byte_end":230209,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1889},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":230318,"byte_end":230327,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1889},"to":{"krate":0,"index":534}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233573,"byte_end":233577,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1901},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":233787,"byte_end":233791,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1901},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234746,"byte_end":234750,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1901},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234832,"byte_end":234836,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1901},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":234959,"byte_end":234963,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1901},"to":{"krate":2,"index":1770}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\input.rs","byte_start":235192,"byte_end":235196,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1901},"to":{"krate":2,"index":1807}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_avx2\\imp.rs","byte_start":277657,"byte_end":277662,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_avx2\\imp.rs","byte_start":289278,"byte_end":289283,"line_start":367,"line_end":367,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_avx2\\imp.rs","byte_start":292070,"byte_end":292074,"line_start":448,"line_end":448,"column_start":6,"column_end":10},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_ssse3\\imp.rs","byte_start":309518,"byte_end":309523,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_ssse3\\imp.rs","byte_start":321143,"byte_end":321148,"line_start":677,"line_end":677,"column_start":6,"column_end":11},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\teddy_ssse3\\imp.rs","byte_start":323936,"byte_end":323940,"line_start":758,"line_end":758,"column_start":6,"column_end":10},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":237433,"byte_end":237448,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1995},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":242580,"byte_end":242587,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2004},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":245657,"byte_end":245668,"line_start":280,"line_end":280,"column_start":23,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":742},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":247383,"byte_end":247396,"line_start":343,"line_end":343,"column_start":6,"column_end":19},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":251303,"byte_end":251314,"line_start":452,"line_end":452,"column_start":6,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\literal\\mod.rs","byte_start":256621,"byte_end":256637,"line_start":615,"line_end":615,"column_start":6,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\pikevm.rs","byte_start":327736,"byte_end":327741,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2069},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\pikevm.rs","byte_start":328035,"byte_end":328038,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\pikevm.rs","byte_start":337238,"byte_end":337245,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2077},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":341061,"byte_end":341068,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":344022,"byte_end":344029,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2096},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":344170,"byte_end":344177,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2096},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":349084,"byte_end":349088,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":351479,"byte_end":351489,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\prog.rs","byte_start":352901,"byte_end":352910,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_builder.rs","byte_start":354033,"byte_end":354045,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2211},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":369208,"byte_end":369213,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370623,"byte_end":370628,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2339},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":370805,"byte_end":370810,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2339},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371115,"byte_end":371120,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2339},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371204,"byte_end":371209,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2339},"to":{"krate":2,"index":8578}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":371420,"byte_end":371425,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":387941,"byte_end":387946,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":391984,"byte_end":391989,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":393501,"byte_end":393508,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":961},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394095,"byte_end":394109,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":972},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":394684,"byte_end":394689,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":983},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":395668,"byte_end":395674,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":396363,"byte_end":396375,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1003},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":397803,"byte_end":397819,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":399557,"byte_end":399565,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402543,"byte_end":402551,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1019},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":402778,"byte_end":402791,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":404282,"byte_end":404290,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1019},"to":{"krate":2,"index":2323}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":404926,"byte_end":404934,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1019},"to":{"krate":2,"index":2323}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":405718,"byte_end":405735,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":408097,"byte_end":408108,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2351},"to":{"krate":0,"index":1077}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":408694,"byte_end":408695,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1094},"to":{"krate":0,"index":1077}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_bytes.rs","byte_start":409350,"byte_end":409358,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1097},"to":{"krate":0,"index":1077}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":426133,"byte_end":426142,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":427696,"byte_end":427714,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1114},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":428845,"byte_end":428850,"line_start":99,"line_end":99,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431205,"byte_end":431212,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":431487,"byte_end":431494,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1133},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":432716,"byte_end":432730,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_trait.rs","byte_start":433015,"byte_end":433029,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":435157,"byte_end":435162,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438261,"byte_end":438266,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2541},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438443,"byte_end":438448,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2541},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438636,"byte_end":438641,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2541},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438725,"byte_end":438730,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2541},"to":{"krate":2,"index":8578}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":438941,"byte_end":438946,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":455460,"byte_end":455465,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":459504,"byte_end":459509,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":460889,"byte_end":460901,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1252},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":461500,"byte_end":461505,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":462477,"byte_end":462483,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1273},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":463976,"byte_end":463992,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":465719,"byte_end":465727,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468665,"byte_end":468673,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1288},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":468900,"byte_end":468913,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1306},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":469960,"byte_end":469968,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1288},"to":{"krate":2,"index":2323}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":470600,"byte_end":470608,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1288},"to":{"krate":2,"index":2323}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":471388,"byte_end":471405,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1331},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472011,"byte_end":472025,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1343},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":472696,"byte_end":472703,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1354},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":475037,"byte_end":475048,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2553},"to":{"krate":0,"index":1365}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":475628,"byte_end":475629,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1381},"to":{"krate":0,"index":1365}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\re_unicode.rs","byte_start":476262,"byte_end":476270,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1384},"to":{"krate":0,"index":1365}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":477466,"byte_end":477475,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\sparse.rs","byte_start":478271,"byte_end":478280,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2562},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\avx2.rs","byte_start":478782,"byte_end":478799,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\avx2.rs","byte_start":480498,"byte_end":480503,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\avx2.rs","byte_start":484286,"byte_end":484291,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2577},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\ssse3.rs","byte_start":484929,"byte_end":484947,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\ssse3.rs","byte_start":487267,"byte_end":487272,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Thai Nguyen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.1.6\\src\\vector\\ssse3.rs","byte_start":490046,"byte_end":490051,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2592},"to":{"krate":2,"index":6606}}]}